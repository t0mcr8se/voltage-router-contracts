{
  "address": "0x667C258F3aD5aF6f87f136B51C5F1947872Ef0cE",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IUniswapV3QuoterV2",
          "name": "quoter",
          "type": "address"
        },
        {
          "internalType": "contract IERC20TokenV06[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        }
      ],
      "name": "_getPoolPathSingleHop",
      "outputs": [
        {
          "internalType": "contract IUniswapV3Pool[][]",
          "name": "poolPaths",
          "type": "address[][]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "callDatas",
          "type": "bytes[]"
        }
      ],
      "name": "batchCall",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "internalType": "bool",
              "name": "success",
              "type": "bool"
            }
          ],
          "internalType": "struct ERC20BridgeSampler.CallResults[]",
          "name": "callResults",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20TokenV06[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "getAllowanceOf",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "allowances",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20TokenV06[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getBalanceOf",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "balances",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBlockNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGasLeft",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20TokenV06",
              "name": "makerToken",
              "type": "address"
            },
            {
              "internalType": "contract IERC20TokenV06",
              "name": "takerToken",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "makerAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "takerAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "takerTokenFeeAmount",
              "type": "uint128"
            },
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "taker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "feeRecipient",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "pool",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "expiry",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            }
          ],
          "internalType": "struct IExchange.LimitOrder[]",
          "name": "orders",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "enum IExchange.SignatureType",
              "name": "signatureType",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IExchange.Signature[]",
          "name": "orderSignatures",
          "type": "tuple[]"
        },
        {
          "internalType": "contract IExchange",
          "name": "exchange",
          "type": "address"
        }
      ],
      "name": "getLimitOrderFillableMakerAssetAmounts",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "orderFillableMakerAssetAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20TokenV06",
              "name": "makerToken",
              "type": "address"
            },
            {
              "internalType": "contract IERC20TokenV06",
              "name": "takerToken",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "makerAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "takerAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "takerTokenFeeAmount",
              "type": "uint128"
            },
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "taker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "feeRecipient",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "pool",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "expiry",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            }
          ],
          "internalType": "struct IExchange.LimitOrder",
          "name": "order",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "enum IExchange.SignatureType",
              "name": "signatureType",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IExchange.Signature",
          "name": "signature",
          "type": "tuple"
        },
        {
          "internalType": "contract IExchange",
          "name": "exchange",
          "type": "address"
        }
      ],
      "name": "getLimitOrderFillableTakerAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fillableTakerAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20TokenV06",
              "name": "makerToken",
              "type": "address"
            },
            {
              "internalType": "contract IERC20TokenV06",
              "name": "takerToken",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "makerAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "takerAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "takerTokenFeeAmount",
              "type": "uint128"
            },
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "taker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "feeRecipient",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "pool",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "expiry",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            }
          ],
          "internalType": "struct IExchange.LimitOrder[]",
          "name": "orders",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "enum IExchange.SignatureType",
              "name": "signatureType",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IExchange.Signature[]",
          "name": "orderSignatures",
          "type": "tuple[]"
        },
        {
          "internalType": "contract IExchange",
          "name": "exchange",
          "type": "address"
        }
      ],
      "name": "getLimitOrderFillableTakerAssetAmounts",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "orderFillableTakerAssetAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20TokenV06[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "name": "getTokenDecimals",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "decimals",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isContract",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "poolAddress",
              "type": "address"
            },
            {
              "internalType": "bytes4",
              "name": "sellQuoteFunctionSelector",
              "type": "bytes4"
            },
            {
              "internalType": "bytes4",
              "name": "buyQuoteFunctionSelector",
              "type": "bytes4"
            }
          ],
          "internalType": "struct CurveSampler.CurveInfo",
          "name": "curveInfo",
          "type": "tuple"
        },
        {
          "internalType": "int128",
          "name": "fromTokenIdx",
          "type": "int128"
        },
        {
          "internalType": "int128",
          "name": "toTokenIdx",
          "type": "int128"
        },
        {
          "internalType": "uint256[]",
          "name": "makerTokenAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "sampleBuysFromCurve",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "takerTokenAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "takerToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "makerToken",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "makerTokenAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "sampleBuysFromMStable",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "takerTokenAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "takerToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "makerToken",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "makerTokenAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "sampleBuysFromUniswap",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "takerTokenAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "router",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "makerTokenAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "sampleBuysFromUniswapV2",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "takerTokenAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniswapV3QuoterV2",
          "name": "quoter",
          "type": "address"
        },
        {
          "internalType": "contract IERC20TokenV06[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "makerTokenAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "sampleBuysFromUniswapV3",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "uniswapPaths",
          "type": "bytes[]"
        },
        {
          "internalType": "uint256[]",
          "name": "uniswapGasUsed",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "takerTokenAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "poolAddress",
              "type": "address"
            },
            {
              "internalType": "bytes4",
              "name": "sellQuoteFunctionSelector",
              "type": "bytes4"
            },
            {
              "internalType": "bytes4",
              "name": "buyQuoteFunctionSelector",
              "type": "bytes4"
            }
          ],
          "internalType": "struct CurveSampler.CurveInfo",
          "name": "curveInfo",
          "type": "tuple"
        },
        {
          "internalType": "int128",
          "name": "fromTokenIdx",
          "type": "int128"
        },
        {
          "internalType": "int128",
          "name": "toTokenIdx",
          "type": "int128"
        },
        {
          "internalType": "uint256[]",
          "name": "takerTokenAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "sampleSellsFromCurve",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "makerTokenAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "takerToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "makerToken",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "takerTokenAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "sampleSellsFromMStable",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "makerTokenAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "takerToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "makerToken",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "takerTokenAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "sampleSellsFromUniswap",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "makerTokenAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "router",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "takerTokenAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "sampleSellsFromUniswapV2",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "makerTokenAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniswapV3QuoterV2",
          "name": "quoter",
          "type": "address"
        },
        {
          "internalType": "contract IERC20TokenV06[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "takerTokenAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "sampleSellsFromUniswapV3",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "uniswapPaths",
          "type": "bytes[]"
        },
        {
          "internalType": "uint256[]",
          "name": "uniswapGasUsed",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "makerTokenAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "firstHopCalls",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes[]",
          "name": "secondHopCalls",
          "type": "bytes[]"
        },
        {
          "internalType": "uint256",
          "name": "numSamples",
          "type": "uint256"
        }
      ],
      "name": "sampleTwoHopBuy",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "sourceIndex",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "returnData",
              "type": "bytes"
            }
          ],
          "internalType": "struct TwoHopSampler.HopInfo",
          "name": "firstHop",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "sourceIndex",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "returnData",
              "type": "bytes"
            }
          ],
          "internalType": "struct TwoHopSampler.HopInfo",
          "name": "secondHop",
          "type": "tuple"
        },
        {
          "internalType": "uint256[]",
          "name": "sellAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "firstHopCalls",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes[]",
          "name": "secondHopCalls",
          "type": "bytes[]"
        },
        {
          "internalType": "uint256",
          "name": "numSamples",
          "type": "uint256"
        }
      ],
      "name": "sampleTwoHopSell",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "sourceIndex",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "returnData",
              "type": "bytes"
            }
          ],
          "internalType": "struct TwoHopSampler.HopInfo",
          "name": "firstHop",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "sourceIndex",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "returnData",
              "type": "bytes"
            }
          ],
          "internalType": "struct TwoHopSampler.HopInfo",
          "name": "secondHop",
          "type": "tuple"
        },
        {
          "internalType": "uint256[]",
          "name": "buyAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x3af9e1dcd4033ed3e114f98f947e18c5710db772283b8654f04fbd728355b96c",
  "receipt": {
    "to": null,
    "from": "0x560215A59247d47Bd949786DE7A7561bcc1E43ED",
    "contractAddress": "0x667C258F3aD5aF6f87f136B51C5F1947872Ef0cE",
    "transactionIndex": 0,
    "gasUsed": "5147108",
    "logsBloom": "0x
    "blockHash": "0xdb0fdb8b2e45b3827682e41f7d697289f33d6fe3b1223e814969e79c0091e278",
    "transactionHash": "0x3af9e1dcd4033ed3e114f98f947e18c5710db772283b8654f04fbd728355b96c",
    "logs": [],
    "blockNumber": 9477392,
    "cumulativeGasUsed": "5147108",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d824bfd18a929a7d770611c578d2def3",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IUniswapV3QuoterV2\",\"name\":\"quoter\",\"type\":\"address\"},{\"internalType\":\"contract IERC20TokenV06[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"}],\"name\":\"_getPoolPathSingleHop\",\"outputs\":[{\"internalType\":\"contract IUniswapV3Pool[][]\",\"name\":\"poolPaths\",\"type\":\"address[][]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"callDatas\",\"type\":\"bytes[]\"}],\"name\":\"batchCall\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"internalType\":\"struct ERC20BridgeSampler.CallResults[]\",\"name\":\"callResults\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20TokenV06[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"getAllowanceOf\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"allowances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20TokenV06[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBalanceOf\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGasLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20TokenV06\",\"name\":\"makerToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20TokenV06\",\"name\":\"takerToken\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"makerAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"takerAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"takerTokenFeeAmount\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"pool\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"expiry\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"internalType\":\"struct IExchange.LimitOrder[]\",\"name\":\"orders\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"enum IExchange.SignatureType\",\"name\":\"signatureType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IExchange.Signature[]\",\"name\":\"orderSignatures\",\"type\":\"tuple[]\"},{\"internalType\":\"contract IExchange\",\"name\":\"exchange\",\"type\":\"address\"}],\"name\":\"getLimitOrderFillableMakerAssetAmounts\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"orderFillableMakerAssetAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20TokenV06\",\"name\":\"makerToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20TokenV06\",\"name\":\"takerToken\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"makerAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"takerAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"takerTokenFeeAmount\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"pool\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"expiry\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"internalType\":\"struct IExchange.LimitOrder\",\"name\":\"order\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum IExchange.SignatureType\",\"name\":\"signatureType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IExchange.Signature\",\"name\":\"signature\",\"type\":\"tuple\"},{\"internalType\":\"contract IExchange\",\"name\":\"exchange\",\"type\":\"address\"}],\"name\":\"getLimitOrderFillableTakerAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fillableTakerAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20TokenV06\",\"name\":\"makerToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20TokenV06\",\"name\":\"takerToken\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"makerAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"takerAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"takerTokenFeeAmount\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"pool\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"expiry\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"internalType\":\"struct IExchange.LimitOrder[]\",\"name\":\"orders\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"enum IExchange.SignatureType\",\"name\":\"signatureType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IExchange.Signature[]\",\"name\":\"orderSignatures\",\"type\":\"tuple[]\"},{\"internalType\":\"contract IExchange\",\"name\":\"exchange\",\"type\":\"address\"}],\"name\":\"getLimitOrderFillableTakerAssetAmounts\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"orderFillableTakerAssetAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20TokenV06[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"getTokenDecimals\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"decimals\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"sellQuoteFunctionSelector\",\"type\":\"bytes4\"},{\"internalType\":\"bytes4\",\"name\":\"buyQuoteFunctionSelector\",\"type\":\"bytes4\"}],\"internalType\":\"struct CurveSampler.CurveInfo\",\"name\":\"curveInfo\",\"type\":\"tuple\"},{\"internalType\":\"int128\",\"name\":\"fromTokenIdx\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"toTokenIdx\",\"type\":\"int128\"},{\"internalType\":\"uint256[]\",\"name\":\"makerTokenAmounts\",\"type\":\"uint256[]\"}],\"name\":\"sampleBuysFromCurve\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"takerTokenAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takerToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"makerToken\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"makerTokenAmounts\",\"type\":\"uint256[]\"}],\"name\":\"sampleBuysFromMStable\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"takerTokenAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takerToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"makerToken\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"makerTokenAmounts\",\"type\":\"uint256[]\"}],\"name\":\"sampleBuysFromUniswap\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"takerTokenAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"makerTokenAmounts\",\"type\":\"uint256[]\"}],\"name\":\"sampleBuysFromUniswapV2\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"takerTokenAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniswapV3QuoterV2\",\"name\":\"quoter\",\"type\":\"address\"},{\"internalType\":\"contract IERC20TokenV06[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"makerTokenAmounts\",\"type\":\"uint256[]\"}],\"name\":\"sampleBuysFromUniswapV3\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"uniswapPaths\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"uniswapGasUsed\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"takerTokenAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"sellQuoteFunctionSelector\",\"type\":\"bytes4\"},{\"internalType\":\"bytes4\",\"name\":\"buyQuoteFunctionSelector\",\"type\":\"bytes4\"}],\"internalType\":\"struct CurveSampler.CurveInfo\",\"name\":\"curveInfo\",\"type\":\"tuple\"},{\"internalType\":\"int128\",\"name\":\"fromTokenIdx\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"toTokenIdx\",\"type\":\"int128\"},{\"internalType\":\"uint256[]\",\"name\":\"takerTokenAmounts\",\"type\":\"uint256[]\"}],\"name\":\"sampleSellsFromCurve\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"makerTokenAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takerToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"makerToken\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"takerTokenAmounts\",\"type\":\"uint256[]\"}],\"name\":\"sampleSellsFromMStable\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"makerTokenAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takerToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"makerToken\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"takerTokenAmounts\",\"type\":\"uint256[]\"}],\"name\":\"sampleSellsFromUniswap\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"makerTokenAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"takerTokenAmounts\",\"type\":\"uint256[]\"}],\"name\":\"sampleSellsFromUniswapV2\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"makerTokenAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniswapV3QuoterV2\",\"name\":\"quoter\",\"type\":\"address\"},{\"internalType\":\"contract IERC20TokenV06[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"takerTokenAmounts\",\"type\":\"uint256[]\"}],\"name\":\"sampleSellsFromUniswapV3\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"uniswapPaths\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"uniswapGasUsed\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"makerTokenAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"firstHopCalls\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"secondHopCalls\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"numSamples\",\"type\":\"uint256\"}],\"name\":\"sampleTwoHopBuy\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sourceIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct TwoHopSampler.HopInfo\",\"name\":\"firstHop\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sourceIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct TwoHopSampler.HopInfo\",\"name\":\"secondHop\",\"type\":\"tuple\"},{\"internalType\":\"uint256[]\",\"name\":\"sellAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"firstHopCalls\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"secondHopCalls\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"numSamples\",\"type\":\"uint256\"}],\"name\":\"sampleTwoHopSell\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sourceIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct TwoHopSampler.HopInfo\",\"name\":\"firstHop\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sourceIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct TwoHopSampler.HopInfo\",\"name\":\"secondHop\",\"type\":\"tuple\"},{\"internalType\":\"uint256[]\",\"name\":\"buyAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"batchCall(bytes[])\":{\"details\":\"Call multiple public functions on this contract in a single transaction.\",\"params\":{\"callDatas\":\"ABI-encoded call data for each function call.\"},\"returns\":{\"callResults\":\"ABI-encoded results data for each call.\"}},\"getLimitOrderFillableMakerAssetAmounts((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256)[],(uint8,uint8,bytes32,bytes32)[],address)\":{\"details\":\"Queries the fillable taker asset amounts of native orders.      Effectively ignores orders that have empty signatures or\",\"params\":{\"exchange\":\"The V4 exchange.\",\"orderSignatures\":\"Signatures for each respective order in `orders`.\",\"orders\":\"Native orders to query.\"},\"returns\":{\"orderFillableMakerAssetAmounts\":\"How much maker asset can be filled         by each order in `orders`.\"}},\"getLimitOrderFillableTakerAmount((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256),(uint8,uint8,bytes32,bytes32),address)\":{\"details\":\"Get the fillable taker amount of an order, taking into account      order state, maker fees, and maker balances.\"},\"getLimitOrderFillableTakerAssetAmounts((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256)[],(uint8,uint8,bytes32,bytes32)[],address)\":{\"details\":\"Queries the fillable taker asset amounts of native orders.      Effectively ignores orders that have empty signatures or      maker/taker asset amounts (returning 0).\",\"params\":{\"exchange\":\"The V4 exchange.\",\"orderSignatures\":\"Signatures for each respective order in `orders`.\",\"orders\":\"Native limit orders to query.\"},\"returns\":{\"orderFillableTakerAssetAmounts\":\"How much taker asset can be filled         by each order in `orders`.\"}},\"sampleBuysFromCurve((address,bytes4,bytes4),int128,int128,uint256[])\":{\"details\":\"Sample buy quotes from Curve.\",\"params\":{\"curveInfo\":\"Curve information specific to this token pair.\",\"fromTokenIdx\":\"Index of the taker token (what to sell).\",\"makerTokenAmounts\":\"Maker token buy amount for each sample.\",\"toTokenIdx\":\"Index of the maker token (what to buy).\"},\"returns\":{\"takerTokenAmounts\":\"Taker amounts sold at each maker token         amount.\"}},\"sampleBuysFromMStable(address,address,address,uint256[])\":{\"details\":\"Sample buy quotes from MStable contract\",\"params\":{\"makerToken\":\"Address of the maker token (what to buy).\",\"makerTokenAmounts\":\"Maker token buy amount for each sample.\",\"router\":\"Address of the mStable contract\",\"takerToken\":\"Address of the taker token (what to sell).\"},\"returns\":{\"takerTokenAmounts\":\"Taker amounts sold at each maker token         amount.\"}},\"sampleBuysFromUniswap(address,address,address,uint256[])\":{\"details\":\"Sample buy quotes from Uniswap.\",\"params\":{\"makerToken\":\"Address of the maker token (what to buy).\",\"makerTokenAmounts\":\"Maker token sell amount for each sample.\",\"takerToken\":\"Address of the taker token (what to sell).\"},\"returns\":{\"takerTokenAmounts\":\"Taker amounts sold at each maker token         amount.\"}},\"sampleBuysFromUniswapV2(address,address[],uint256[])\":{\"details\":\"Sample buy quotes from UniswapV2.\",\"params\":{\"makerTokenAmounts\":\"Maker token buy amount for each sample.\",\"path\":\"Token route. Should be takerToken -> makerToken.\",\"router\":\"Router to look up tokens and amounts\"},\"returns\":{\"takerTokenAmounts\":\"Taker amounts sold at each maker token         amount.\"}},\"sampleBuysFromUniswapV3(address,address[],uint256[])\":{\"details\":\"Sample buy quotes from UniswapV3.\",\"params\":{\"makerTokenAmounts\":\"Maker token buy amount for each sample.\",\"path\":\"Token route. Should be takerToken -> makerToken (at most two hops).\",\"quoter\":\"UniswapV3 Quoter contract.\"},\"returns\":{\"takerTokenAmounts\":\"Taker amounts sold at each maker token amount.\",\"uniswapGasUsed\":\"Estimated amount of gas used\",\"uniswapPaths\":\"The encoded uniswap path for each sample.\"}},\"sampleSellsFromCurve((address,bytes4,bytes4),int128,int128,uint256[])\":{\"details\":\"Sample sell quotes from Curve.\",\"params\":{\"curveInfo\":\"Curve information specific to this token pair.\",\"fromTokenIdx\":\"Index of the taker token (what to sell).\",\"takerTokenAmounts\":\"Taker token sell amount for each sample.\",\"toTokenIdx\":\"Index of the maker token (what to buy).\"},\"returns\":{\"makerTokenAmounts\":\"Maker amounts bought at each taker token         amount.\"}},\"sampleSellsFromMStable(address,address,address,uint256[])\":{\"details\":\"Sample sell quotes from the mStable contract\",\"params\":{\"makerToken\":\"Address of the maker token (what to buy).\",\"router\":\"Address of the mStable contract\",\"takerToken\":\"Address of the taker token (what to sell).\",\"takerTokenAmounts\":\"Taker token sell amount for each sample.\"},\"returns\":{\"makerTokenAmounts\":\"Maker amounts bought at each taker token         amount.\"}},\"sampleSellsFromUniswap(address,address,address,uint256[])\":{\"details\":\"Sample sell quotes from Uniswap.\",\"params\":{\"makerToken\":\"Address of the maker token (what to buy).\",\"router\":\"Address of the Uniswap Router\",\"takerToken\":\"Address of the taker token (what to sell).\",\"takerTokenAmounts\":\"Taker token sell amount for each sample.\"},\"returns\":{\"makerTokenAmounts\":\"Maker amounts bought at each taker token         amount.\"}},\"sampleSellsFromUniswapV2(address,address[],uint256[])\":{\"details\":\"Sample sell quotes from UniswapV2.\",\"params\":{\"path\":\"Token route. Should be takerToken -> makerToken\",\"router\":\"Router to look up tokens and amounts\",\"takerTokenAmounts\":\"Taker token sell amount for each sample.\"},\"returns\":{\"makerTokenAmounts\":\"Maker amounts bought at each taker token         amount.\"}},\"sampleSellsFromUniswapV3(address,address[],uint256[])\":{\"details\":\"Sample sell quotes from UniswapV3.\",\"params\":{\"path\":\"Token route. Should be takerToken -> makerToken (at most two hops).\",\"quoter\":\"UniswapV3 Quoter contract.\",\"takerTokenAmounts\":\"Taker token sell amount for each sample.\"},\"returns\":{\"makerTokenAmounts\":\"Maker amounts bought at each taker token amount.\",\"uniswapGasUsed\":\"Estimated amount of gas used\",\"uniswapPaths\":\"The encoded uniswap path for each sample.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/sampler/ERC20BridgeSampler.sol\":\"ERC20BridgeSampler\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"src/contracts-erc20/v06/IERC20TokenV06.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\ninterface IERC20TokenV06 {\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @dev send `value` token to `to` from `msg.sender`\\n    /// @param to The address of the recipient\\n    /// @param value The amount of token to be transferred\\n    /// @return True if transfer was successful\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\\n    /// @param from The address of the sender\\n    /// @param to The address of the recipient\\n    /// @param value The amount of token to be transferred\\n    /// @return True if transfer was successful\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n\\n    /// @dev `msg.sender` approves `spender` to spend `value` tokens\\n    /// @param spender The address of the account able to transfer the tokens\\n    /// @param value The amount of wei to be approved for transfer\\n    /// @return Always true if the call has enough gas to complete execution\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /// @dev Query total supply of token\\n    /// @return Total supply of token\\n    function totalSupply() external view returns (uint256);\\n\\n    /// @dev Get the balance of `owner`.\\n    /// @param owner The address from which the balance will be retrieved\\n    /// @return Balance of owner\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    /// @dev Get the allowance for `spender` to spend from `owner`.\\n    /// @param owner The address of the account owning tokens\\n    /// @param spender The address of the account able to transfer the tokens\\n    /// @return Amount of remaining tokens allowed to spent\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /// @dev Get the number of decimals this token has.\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x738fc3ee22931305f16e783b286180c32f6c6390ebbeb86b8b28b4f2715e9805\",\"license\":\"Apache-2.0\"},\"src/contracts-erc20/v06/LibERC20TokenV06.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\nimport \\\"../../contracts-utils/v06/errors/LibRichErrorsV06.sol\\\";\\nimport \\\"../../contracts-utils/v06/LibBytesV06.sol\\\";\\nimport \\\"./IERC20TokenV06.sol\\\";\\n\\nlibrary LibERC20TokenV06 {\\n    bytes private constant DECIMALS_CALL_DATA = hex\\\"313ce567\\\";\\n\\n    /// @dev Calls `IERC20TokenV06(token).approve()`.\\n    ///      Reverts if the return data is invalid or the call reverts.\\n    /// @param token The address of the token contract.\\n    /// @param spender The address that receives an allowance.\\n    /// @param allowance The allowance to set.\\n    function compatApprove(IERC20TokenV06 token, address spender, uint256 allowance) internal {\\n        bytes memory callData = abi.encodeWithSelector(token.approve.selector, spender, allowance);\\n        _callWithOptionalBooleanResult(address(token), callData);\\n    }\\n\\n    /// @dev Calls `IERC20TokenV06(token).approve()` and sets the allowance to the\\n    ///      maximum if the current approval is not already >= an amount.\\n    ///      Reverts if the return data is invalid or the call reverts.\\n    /// @param token The address of the token contract.\\n    /// @param spender The address that receives an allowance.\\n    /// @param amount The minimum allowance needed.\\n    function approveIfBelow(IERC20TokenV06 token, address spender, uint256 amount) internal {\\n        if (token.allowance(address(this), spender) < amount) {\\n            compatApprove(token, spender, uint256(-1));\\n        }\\n    }\\n\\n    /// @dev Calls `IERC20TokenV06(token).transfer()`.\\n    ///      Reverts if the return data is invalid or the call reverts.\\n    /// @param token The address of the token contract.\\n    /// @param to The address that receives the tokens\\n    /// @param amount Number of tokens to transfer.\\n    function compatTransfer(IERC20TokenV06 token, address to, uint256 amount) internal {\\n        bytes memory callData = abi.encodeWithSelector(token.transfer.selector, to, amount);\\n        _callWithOptionalBooleanResult(address(token), callData);\\n    }\\n\\n    /// @dev Calls `IERC20TokenV06(token).transferFrom()`.\\n    ///      Reverts if the return data is invalid or the call reverts.\\n    /// @param token The address of the token contract.\\n    /// @param from The owner of the tokens.\\n    /// @param to The address that receives the tokens\\n    /// @param amount Number of tokens to transfer.\\n    function compatTransferFrom(IERC20TokenV06 token, address from, address to, uint256 amount) internal {\\n        bytes memory callData = abi.encodeWithSelector(token.transferFrom.selector, from, to, amount);\\n        _callWithOptionalBooleanResult(address(token), callData);\\n    }\\n\\n    /// @dev Retrieves the number of decimals for a token.\\n    ///      Returns `18` if the call reverts.\\n    /// @param token The address of the token contract.\\n    /// @return tokenDecimals The number of decimals places for the token.\\n    function compatDecimals(IERC20TokenV06 token) internal view returns (uint8 tokenDecimals) {\\n        tokenDecimals = 18;\\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(DECIMALS_CALL_DATA);\\n        if (didSucceed && resultData.length >= 32) {\\n            tokenDecimals = uint8(LibBytesV06.readUint256(resultData, 0));\\n        }\\n    }\\n\\n    /// @dev Retrieves the allowance for a token, owner, and spender.\\n    ///      Returns `0` if the call reverts.\\n    /// @param token The address of the token contract.\\n    /// @param owner The owner of the tokens.\\n    /// @param spender The address the spender.\\n    /// @return allowance_ The allowance for a token, owner, and spender.\\n    function compatAllowance(\\n        IERC20TokenV06 token,\\n        address owner,\\n        address spender\\n    ) internal view returns (uint256 allowance_) {\\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\\n            abi.encodeWithSelector(token.allowance.selector, owner, spender)\\n        );\\n        if (didSucceed && resultData.length >= 32) {\\n            allowance_ = LibBytesV06.readUint256(resultData, 0);\\n        }\\n    }\\n\\n    /// @dev Retrieves the balance for a token owner.\\n    ///      Returns `0` if the call reverts.\\n    /// @param token The address of the token contract.\\n    /// @param owner The owner of the tokens.\\n    /// @return balance The token balance of an owner.\\n    function compatBalanceOf(IERC20TokenV06 token, address owner) internal view returns (uint256 balance) {\\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\\n            abi.encodeWithSelector(token.balanceOf.selector, owner)\\n        );\\n        if (didSucceed && resultData.length >= 32) {\\n            balance = LibBytesV06.readUint256(resultData, 0);\\n        }\\n    }\\n\\n    /// @dev Executes a call on address `target` with calldata `callData`\\n    ///      and asserts that either nothing was returned or a single boolean\\n    ///      was returned equal to `true`.\\n    /// @param target The call target.\\n    /// @param callData The abi-encoded call data.\\n    function _callWithOptionalBooleanResult(address target, bytes memory callData) private {\\n        (bool didSucceed, bytes memory resultData) = target.call(callData);\\n        // Revert if the call reverted.\\n        if (!didSucceed) {\\n            LibRichErrorsV06.rrevert(resultData);\\n        }\\n        // If we get back 0 returndata, this may be a non-standard ERC-20 that\\n        // does not return a boolean. Check that it at least contains code.\\n        if (resultData.length == 0) {\\n            uint256 size;\\n            assembly {\\n                size := extcodesize(target)\\n            }\\n            require(size > 0, \\\"invalid token address, contains no code\\\");\\n            return;\\n        }\\n        // If we get back at least 32 bytes, we know the target address\\n        // contains code, and we assume it is a token that returned a boolean\\n        // success value, which must be true.\\n        if (resultData.length >= 32) {\\n            uint256 result = LibBytesV06.readUint256(resultData, 0);\\n            if (result == 1) {\\n                return;\\n            } else {\\n                LibRichErrorsV06.rrevert(resultData);\\n            }\\n        }\\n        // If 0 < returndatasize < 32, the target is a contract, but not a\\n        // valid token.\\n        LibRichErrorsV06.rrevert(resultData);\\n    }\\n}\\n\",\"keccak256\":\"0xa904656f8c2774bde8392caa9f9cce0c0ede27efa42a106968a7106be3ea3a50\",\"license\":\"Apache-2.0\"},\"src/contracts-utils/v06/LibBytesV06.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\nimport \\\"./errors/LibBytesRichErrorsV06.sol\\\";\\nimport \\\"./errors/LibRichErrorsV06.sol\\\";\\n\\nlibrary LibBytesV06 {\\n    using LibBytesV06 for bytes;\\n\\n    /// @dev Gets the memory address for a byte array.\\n    /// @param input Byte array to lookup.\\n    /// @return memoryAddress Memory address of byte array. This\\n    ///         points to the header of the byte array which contains\\n    ///         the length.\\n    function rawAddress(bytes memory input) internal pure returns (uint256 memoryAddress) {\\n        assembly {\\n            memoryAddress := input\\n        }\\n        return memoryAddress;\\n    }\\n\\n    /// @dev Gets the memory address for the contents of a byte array.\\n    /// @param input Byte array to lookup.\\n    /// @return memoryAddress Memory address of the contents of the byte array.\\n    function contentAddress(bytes memory input) internal pure returns (uint256 memoryAddress) {\\n        assembly {\\n            memoryAddress := add(input, 32)\\n        }\\n        return memoryAddress;\\n    }\\n\\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\\n    /// @param dest memory address to copy bytes to.\\n    /// @param source memory address to copy bytes from.\\n    /// @param length number of bytes to copy.\\n    function memCopy(uint256 dest, uint256 source, uint256 length) internal pure {\\n        if (length < 32) {\\n            // Handle a partial word by reading destination and masking\\n            // off the bits we are interested in.\\n            // This correctly handles overlap, zero lengths and source == dest\\n            assembly {\\n                let mask := sub(exp(256, sub(32, length)), 1)\\n                let s := and(mload(source), not(mask))\\n                let d := and(mload(dest), mask)\\n                mstore(dest, or(s, d))\\n            }\\n        } else {\\n            // Skip the O(length) loop when source == dest.\\n            if (source == dest) {\\n                return;\\n            }\\n\\n            // For large copies we copy whole words at a time. The final\\n            // word is aligned to the end of the range (instead of after the\\n            // previous) to handle partial words. So a copy will look like this:\\n            //\\n            //  ####\\n            //      ####\\n            //          ####\\n            //            ####\\n            //\\n            // We handle overlap in the source and destination range by\\n            // changing the copying direction. This prevents us from\\n            // overwriting parts of source that we still need to copy.\\n            //\\n            // This correctly handles source == dest\\n            //\\n            if (source > dest) {\\n                assembly {\\n                    // We subtract 32 from `sEnd` and `dEnd` because it\\n                    // is easier to compare with in the loop, and these\\n                    // are also the addresses we need for copying the\\n                    // last bytes.\\n                    length := sub(length, 32)\\n                    let sEnd := add(source, length)\\n                    let dEnd := add(dest, length)\\n\\n                    // Remember the last 32 bytes of source\\n                    // This needs to be done here and not after the loop\\n                    // because we may have overwritten the last bytes in\\n                    // source already due to overlap.\\n                    let last := mload(sEnd)\\n\\n                    // Copy whole words front to back\\n                    // Note: the first check is always true,\\n                    // this could have been a do-while loop.\\n                    for {\\n\\n                    } lt(source, sEnd) {\\n\\n                    } {\\n                        mstore(dest, mload(source))\\n                        source := add(source, 32)\\n                        dest := add(dest, 32)\\n                    }\\n\\n                    // Write the last 32 bytes\\n                    mstore(dEnd, last)\\n                }\\n            } else {\\n                assembly {\\n                    // We subtract 32 from `sEnd` and `dEnd` because those\\n                    // are the starting points when copying a word at the end.\\n                    length := sub(length, 32)\\n                    let sEnd := add(source, length)\\n                    let dEnd := add(dest, length)\\n\\n                    // Remember the first 32 bytes of source\\n                    // This needs to be done here and not after the loop\\n                    // because we may have overwritten the first bytes in\\n                    // source already due to overlap.\\n                    let first := mload(source)\\n\\n                    // Copy whole words back to front\\n                    // We use a signed comparisson here to allow dEnd to become\\n                    // negative (happens when source and dest < 32). Valid\\n                    // addresses in local memory will never be larger than\\n                    // 2**255, so they can be safely re-interpreted as signed.\\n                    // Note: the first check is always true,\\n                    // this could have been a do-while loop.\\n                    for {\\n\\n                    } slt(dest, dEnd) {\\n\\n                    } {\\n                        mstore(dEnd, mload(sEnd))\\n                        sEnd := sub(sEnd, 32)\\n                        dEnd := sub(dEnd, 32)\\n                    }\\n\\n                    // Write the first 32 bytes\\n                    mstore(dest, first)\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns a slices from a byte array.\\n    /// @param b The byte array to take a slice from.\\n    /// @param from The starting index for the slice (inclusive).\\n    /// @param to The final index for the slice (exclusive).\\n    /// @return result The slice containing bytes at indices [from, to)\\n    function slice(bytes memory b, uint256 from, uint256 to) internal pure returns (bytes memory result) {\\n        // Ensure that the from and to positions are valid positions for a slice within\\n        // the byte array that is being used.\\n        if (from > to) {\\n            LibRichErrorsV06.rrevert(\\n                LibBytesRichErrorsV06.InvalidByteOperationError(\\n                    LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\\n                    from,\\n                    to\\n                )\\n            );\\n        }\\n        if (to > b.length) {\\n            LibRichErrorsV06.rrevert(\\n                LibBytesRichErrorsV06.InvalidByteOperationError(\\n                    LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\\n                    to,\\n                    b.length\\n                )\\n            );\\n        }\\n\\n        // Create a new bytes structure and copy contents\\n        result = new bytes(to - from);\\n        memCopy(result.contentAddress(), b.contentAddress() + from, result.length);\\n        return result;\\n    }\\n\\n    /// @dev Returns a slice from a byte array without preserving the input.\\n    ///      When `from == 0`, the original array will match the slice.\\n    ///      In other cases its state will be corrupted.\\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\\n    /// @param from The starting index for the slice (inclusive).\\n    /// @param to The final index for the slice (exclusive).\\n    /// @return result The slice containing bytes at indices [from, to)\\n    function sliceDestructive(bytes memory b, uint256 from, uint256 to) internal pure returns (bytes memory result) {\\n        // Ensure that the from and to positions are valid positions for a slice within\\n        // the byte array that is being used.\\n        if (from > to) {\\n            LibRichErrorsV06.rrevert(\\n                LibBytesRichErrorsV06.InvalidByteOperationError(\\n                    LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\\n                    from,\\n                    to\\n                )\\n            );\\n        }\\n        if (to > b.length) {\\n            LibRichErrorsV06.rrevert(\\n                LibBytesRichErrorsV06.InvalidByteOperationError(\\n                    LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\\n                    to,\\n                    b.length\\n                )\\n            );\\n        }\\n\\n        // Create a new bytes structure around [from, to) in-place.\\n        assembly {\\n            result := add(b, from)\\n            mstore(result, sub(to, from))\\n        }\\n        return result;\\n    }\\n\\n    /// @dev Pops the last byte off of a byte array by modifying its length.\\n    /// @param b Byte array that will be modified.\\n    /// @return result The byte that was popped off.\\n    function popLastByte(bytes memory b) internal pure returns (bytes1 result) {\\n        if (b.length == 0) {\\n            LibRichErrorsV06.rrevert(\\n                LibBytesRichErrorsV06.InvalidByteOperationError(\\n                    LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanZeroRequired,\\n                    b.length,\\n                    0\\n                )\\n            );\\n        }\\n\\n        // Store last byte.\\n        result = b[b.length - 1];\\n\\n        assembly {\\n            // Decrement length of byte array.\\n            let newLen := sub(mload(b), 1)\\n            mstore(b, newLen)\\n        }\\n        return result;\\n    }\\n\\n    /// @dev Tests equality of two byte arrays.\\n    /// @param lhs First byte array to compare.\\n    /// @param rhs Second byte array to compare.\\n    /// @return equal True if arrays are the same. False otherwise.\\n    function equals(bytes memory lhs, bytes memory rhs) internal pure returns (bool equal) {\\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\\n        // We early exit on unequal lengths, but keccak would also correctly\\n        // handle this.\\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\\n    }\\n\\n    /// @dev Reads an address from a position in a byte array.\\n    /// @param b Byte array containing an address.\\n    /// @param index Index in byte array of address.\\n    /// @return result address from byte array.\\n    function readAddress(bytes memory b, uint256 index) internal pure returns (address result) {\\n        if (b.length < index + 20) {\\n            LibRichErrorsV06.rrevert(\\n                LibBytesRichErrorsV06.InvalidByteOperationError(\\n                    LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\\n                    b.length,\\n                    index + 20 // 20 is length of address\\n                )\\n            );\\n        }\\n\\n        // Add offset to index:\\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\\n        index += 20;\\n\\n        // Read address from array memory\\n        assembly {\\n            // 1. Add index to address of bytes array\\n            // 2. Load 32-byte word from memory\\n            // 3. Apply 20-byte mask to obtain address\\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\\n        }\\n        return result;\\n    }\\n\\n    /// @dev Writes an address into a specific position in a byte array.\\n    /// @param b Byte array to insert address into.\\n    /// @param index Index in byte array of address.\\n    /// @param input Address to put into byte array.\\n    function writeAddress(bytes memory b, uint256 index, address input) internal pure {\\n        if (b.length < index + 20) {\\n            LibRichErrorsV06.rrevert(\\n                LibBytesRichErrorsV06.InvalidByteOperationError(\\n                    LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\\n                    b.length,\\n                    index + 20 // 20 is length of address\\n                )\\n            );\\n        }\\n\\n        // Add offset to index:\\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\\n        index += 20;\\n\\n        // Store address into array memory\\n        assembly {\\n            // The address occupies 20 bytes and mstore stores 32 bytes.\\n            // First fetch the 32-byte word where we'll be storing the address, then\\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\\n\\n            // 1. Add index to address of bytes array\\n            // 2. Load 32-byte word from memory\\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\\n            let neighbors := and(\\n                mload(add(b, index)),\\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\\n            )\\n\\n            // Make sure input address is clean.\\n            // (Solidity does not guarantee this)\\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\\n\\n            // Store the neighbors and address into memory\\n            mstore(add(b, index), xor(input, neighbors))\\n        }\\n    }\\n\\n    /// @dev Reads a bytes32 value from a position in a byte array.\\n    /// @param b Byte array containing a bytes32 value.\\n    /// @param index Index in byte array of bytes32 value.\\n    /// @return result bytes32 value from byte array.\\n    function readBytes32(bytes memory b, uint256 index) internal pure returns (bytes32 result) {\\n        if (b.length < index + 32) {\\n            LibRichErrorsV06.rrevert(\\n                LibBytesRichErrorsV06.InvalidByteOperationError(\\n                    LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\\n                    b.length,\\n                    index + 32\\n                )\\n            );\\n        }\\n\\n        // Arrays are prefixed by a 256 bit length parameter\\n        index += 32;\\n\\n        // Read the bytes32 from array memory\\n        assembly {\\n            result := mload(add(b, index))\\n        }\\n        return result;\\n    }\\n\\n    /// @dev Writes a bytes32 into a specific position in a byte array.\\n    /// @param b Byte array to insert <input> into.\\n    /// @param index Index in byte array of <input>.\\n    /// @param input bytes32 to put into byte array.\\n    function writeBytes32(bytes memory b, uint256 index, bytes32 input) internal pure {\\n        if (b.length < index + 32) {\\n            LibRichErrorsV06.rrevert(\\n                LibBytesRichErrorsV06.InvalidByteOperationError(\\n                    LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\\n                    b.length,\\n                    index + 32\\n                )\\n            );\\n        }\\n\\n        // Arrays are prefixed by a 256 bit length parameter\\n        index += 32;\\n\\n        // Read the bytes32 from array memory\\n        assembly {\\n            mstore(add(b, index), input)\\n        }\\n    }\\n\\n    /// @dev Reads a uint256 value from a position in a byte array.\\n    /// @param b Byte array containing a uint256 value.\\n    /// @param index Index in byte array of uint256 value.\\n    /// @return result uint256 value from byte array.\\n    function readUint256(bytes memory b, uint256 index) internal pure returns (uint256 result) {\\n        result = uint256(readBytes32(b, index));\\n        return result;\\n    }\\n\\n    /// @dev Writes a uint256 into a specific position in a byte array.\\n    /// @param b Byte array to insert <input> into.\\n    /// @param index Index in byte array of <input>.\\n    /// @param input uint256 to put into byte array.\\n    function writeUint256(bytes memory b, uint256 index, uint256 input) internal pure {\\n        writeBytes32(b, index, bytes32(input));\\n    }\\n\\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\\n    /// @param b Byte array containing a bytes4 value.\\n    /// @param index Index in byte array of bytes4 value.\\n    /// @return result bytes4 value from byte array.\\n    function readBytes4(bytes memory b, uint256 index) internal pure returns (bytes4 result) {\\n        if (b.length < index + 4) {\\n            LibRichErrorsV06.rrevert(\\n                LibBytesRichErrorsV06.InvalidByteOperationError(\\n                    LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,\\n                    b.length,\\n                    index + 4\\n                )\\n            );\\n        }\\n\\n        // Arrays are prefixed by a 32 byte length field\\n        index += 32;\\n\\n        // Read the bytes4 from array memory\\n        assembly {\\n            result := mload(add(b, index))\\n            // Solidity does not require us to clean the trailing bytes.\\n            // We do it anyway\\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\\n        }\\n        return result;\\n    }\\n\\n    /// @dev Writes a new length to a byte array.\\n    ///      Decreasing length will lead to removing the corresponding lower order bytes from the byte array.\\n    ///      Increasing length may lead to appending adjacent in-memory bytes to the end of the byte array.\\n    /// @param b Bytes array to write new length to.\\n    /// @param length New length of byte array.\\n    function writeLength(bytes memory b, uint256 length) internal pure {\\n        assembly {\\n            mstore(b, length)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4627b090ebd8db251e6cea36597c906bd4f82c219059395eaf7263067666b856\",\"license\":\"Apache-2.0\"},\"src/contracts-utils/v06/LibMathV06.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2019 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\nimport \\\"./LibSafeMathV06.sol\\\";\\nimport \\\"./errors/LibRichErrorsV06.sol\\\";\\nimport \\\"./errors/LibMathRichErrorsV06.sol\\\";\\n\\nlibrary LibMathV06 {\\n    using LibSafeMathV06 for uint256;\\n\\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\\n    ///      Reverts if rounding error is >= 0.1%\\n    /// @param numerator Numerator.\\n    /// @param denominator Denominator.\\n    /// @param target Value to calculate partial of.\\n    /// @return partialAmount Partial value of target rounded down.\\n    function safeGetPartialAmountFloor(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 target\\n    ) internal pure returns (uint256 partialAmount) {\\n        if (isRoundingErrorFloor(numerator, denominator, target)) {\\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.RoundingError(numerator, denominator, target));\\n        }\\n\\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\\n        return partialAmount;\\n    }\\n\\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\\n    ///      Reverts if rounding error is >= 0.1%\\n    /// @param numerator Numerator.\\n    /// @param denominator Denominator.\\n    /// @param target Value to calculate partial of.\\n    /// @return partialAmount Partial value of target rounded up.\\n    function safeGetPartialAmountCeil(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 target\\n    ) internal pure returns (uint256 partialAmount) {\\n        if (isRoundingErrorCeil(numerator, denominator, target)) {\\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.RoundingError(numerator, denominator, target));\\n        }\\n\\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\\n        //       ceil(a / b) = floor((a + b - 1) / b)\\n        // To implement `ceil(a / b)` using safeDiv.\\n        partialAmount = numerator.safeMul(target).safeAdd(denominator.safeSub(1)).safeDiv(denominator);\\n\\n        return partialAmount;\\n    }\\n\\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\\n    /// @param numerator Numerator.\\n    /// @param denominator Denominator.\\n    /// @param target Value to calculate partial of.\\n    /// @return partialAmount Partial value of target rounded down.\\n    function getPartialAmountFloor(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 target\\n    ) internal pure returns (uint256 partialAmount) {\\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\\n        return partialAmount;\\n    }\\n\\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\\n    /// @param numerator Numerator.\\n    /// @param denominator Denominator.\\n    /// @param target Value to calculate partial of.\\n    /// @return partialAmount Partial value of target rounded up.\\n    function getPartialAmountCeil(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 target\\n    ) internal pure returns (uint256 partialAmount) {\\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\\n        //       ceil(a / b) = floor((a + b - 1) / b)\\n        // To implement `ceil(a / b)` using safeDiv.\\n        partialAmount = numerator.safeMul(target).safeAdd(denominator.safeSub(1)).safeDiv(denominator);\\n\\n        return partialAmount;\\n    }\\n\\n    /// @dev Checks if rounding error >= 0.1% when rounding down.\\n    /// @param numerator Numerator.\\n    /// @param denominator Denominator.\\n    /// @param target Value to multiply with numerator/denominator.\\n    /// @return isError Rounding error is present.\\n    function isRoundingErrorFloor(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 target\\n    ) internal pure returns (bool isError) {\\n        if (denominator == 0) {\\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.DivisionByZeroError());\\n        }\\n\\n        // The absolute rounding error is the difference between the rounded\\n        // value and the ideal value. The relative rounding error is the\\n        // absolute rounding error divided by the absolute value of the\\n        // ideal value. This is undefined when the ideal value is zero.\\n        //\\n        // The ideal value is `numerator * target / denominator`.\\n        // Let's call `numerator * target % denominator` the remainder.\\n        // The absolute error is `remainder / denominator`.\\n        //\\n        // When the ideal value is zero, we require the absolute error to\\n        // be zero. Fortunately, this is always the case. The ideal value is\\n        // zero iff `numerator == 0` and/or `target == 0`. In this case the\\n        // remainder and absolute error are also zero.\\n        if (target == 0 || numerator == 0) {\\n            return false;\\n        }\\n\\n        // Otherwise, we want the relative rounding error to be strictly\\n        // less than 0.1%.\\n        // The relative error is `remainder / (numerator * target)`.\\n        // We want the relative error less than 1 / 1000:\\n        //        remainder / (numerator * denominator)  <  1 / 1000\\n        // or equivalently:\\n        //        1000 * remainder  <  numerator * target\\n        // so we have a rounding error iff:\\n        //        1000 * remainder  >=  numerator * target\\n        uint256 remainder = mulmod(target, numerator, denominator);\\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\\n        return isError;\\n    }\\n\\n    /// @dev Checks if rounding error >= 0.1% when rounding up.\\n    /// @param numerator Numerator.\\n    /// @param denominator Denominator.\\n    /// @param target Value to multiply with numerator/denominator.\\n    /// @return isError Rounding error is present.\\n    function isRoundingErrorCeil(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 target\\n    ) internal pure returns (bool isError) {\\n        if (denominator == 0) {\\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.DivisionByZeroError());\\n        }\\n\\n        // See the comments in `isRoundingError`.\\n        if (target == 0 || numerator == 0) {\\n            // When either is zero, the ideal value and rounded value are zero\\n            // and there is no rounding error. (Although the relative error\\n            // is undefined.)\\n            return false;\\n        }\\n        // Compute remainder as before\\n        uint256 remainder = mulmod(target, numerator, denominator);\\n        remainder = denominator.safeSub(remainder) % denominator;\\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\\n        return isError;\\n    }\\n}\\n\",\"keccak256\":\"0x90f967c24663ba10b4660a9d800648dbfdb9bcfd2f7be4a361ff01f8d9d6a399\",\"license\":\"Apache-2.0\"},\"src/contracts-utils/v06/LibSafeMathV06.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\nimport \\\"./errors/LibRichErrorsV06.sol\\\";\\nimport \\\"./errors/LibSafeMathRichErrorsV06.sol\\\";\\n\\nlibrary LibSafeMathV06 {\\n    function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        if (c / a != b) {\\n            LibRichErrorsV06.rrevert(\\n                LibSafeMathRichErrorsV06.Uint256BinOpError(\\n                    LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\\n                    a,\\n                    b\\n                )\\n            );\\n        }\\n        return c;\\n    }\\n\\n    function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            LibRichErrorsV06.rrevert(\\n                LibSafeMathRichErrorsV06.Uint256BinOpError(\\n                    LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\\n                    a,\\n                    b\\n                )\\n            );\\n        }\\n        uint256 c = a / b;\\n        return c;\\n    }\\n\\n    function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b > a) {\\n            LibRichErrorsV06.rrevert(\\n                LibSafeMathRichErrorsV06.Uint256BinOpError(\\n                    LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\\n                    a,\\n                    b\\n                )\\n            );\\n        }\\n        return a - b;\\n    }\\n\\n    function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        if (c < a) {\\n            LibRichErrorsV06.rrevert(\\n                LibSafeMathRichErrorsV06.Uint256BinOpError(\\n                    LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\\n                    a,\\n                    b\\n                )\\n            );\\n        }\\n        return c;\\n    }\\n\\n    function max256(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    function min256(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    function safeMul128(uint128 a, uint128 b) internal pure returns (uint128) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint128 c = a * b;\\n        if (c / a != b) {\\n            LibRichErrorsV06.rrevert(\\n                LibSafeMathRichErrorsV06.Uint256BinOpError(\\n                    LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\\n                    a,\\n                    b\\n                )\\n            );\\n        }\\n        return c;\\n    }\\n\\n    function safeDiv128(uint128 a, uint128 b) internal pure returns (uint128) {\\n        if (b == 0) {\\n            LibRichErrorsV06.rrevert(\\n                LibSafeMathRichErrorsV06.Uint256BinOpError(\\n                    LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\\n                    a,\\n                    b\\n                )\\n            );\\n        }\\n        uint128 c = a / b;\\n        return c;\\n    }\\n\\n    function safeSub128(uint128 a, uint128 b) internal pure returns (uint128) {\\n        if (b > a) {\\n            LibRichErrorsV06.rrevert(\\n                LibSafeMathRichErrorsV06.Uint256BinOpError(\\n                    LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\\n                    a,\\n                    b\\n                )\\n            );\\n        }\\n        return a - b;\\n    }\\n\\n    function safeAdd128(uint128 a, uint128 b) internal pure returns (uint128) {\\n        uint128 c = a + b;\\n        if (c < a) {\\n            LibRichErrorsV06.rrevert(\\n                LibSafeMathRichErrorsV06.Uint256BinOpError(\\n                    LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\\n                    a,\\n                    b\\n                )\\n            );\\n        }\\n        return c;\\n    }\\n\\n    function max128(uint128 a, uint128 b) internal pure returns (uint128) {\\n        return a >= b ? a : b;\\n    }\\n\\n    function min128(uint128 a, uint128 b) internal pure returns (uint128) {\\n        return a < b ? a : b;\\n    }\\n\\n    function safeDowncastToUint128(uint256 a) internal pure returns (uint128) {\\n        if (a > type(uint128).max) {\\n            LibRichErrorsV06.rrevert(\\n                LibSafeMathRichErrorsV06.Uint256DowncastError(\\n                    LibSafeMathRichErrorsV06.DowncastErrorCodes.VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128,\\n                    a\\n                )\\n            );\\n        }\\n        return uint128(a);\\n    }\\n}\\n\",\"keccak256\":\"0xf41503c5323320d0d4a8de4afddbc41c9e0fa205b8b0ee317bd4d98b411bb3ea\",\"license\":\"Apache-2.0\"},\"src/contracts-utils/v06/errors/LibBytesRichErrorsV06.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\nlibrary LibBytesRichErrorsV06 {\\n    enum InvalidByteOperationErrorCodes {\\n        FromLessThanOrEqualsToRequired,\\n        ToLessThanOrEqualsLengthRequired,\\n        LengthGreaterThanZeroRequired,\\n        LengthGreaterThanOrEqualsFourRequired,\\n        LengthGreaterThanOrEqualsTwentyRequired,\\n        LengthGreaterThanOrEqualsThirtyTwoRequired,\\n        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\\n        DestinationLengthGreaterThanOrEqualSourceLengthRequired\\n    }\\n\\n    // bytes4(keccak256(\\\"InvalidByteOperationError(uint8,uint256,uint256)\\\"))\\n    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR = 0x28006595;\\n\\n    function InvalidByteOperationError(\\n        InvalidByteOperationErrorCodes errorCode,\\n        uint256 offset,\\n        uint256 required\\n    ) internal pure returns (bytes memory) {\\n        return abi.encodeWithSelector(INVALID_BYTE_OPERATION_ERROR_SELECTOR, errorCode, offset, required);\\n    }\\n}\\n\",\"keccak256\":\"0x53f172b5aaf453b6372471ab3918bb0c1611ff38c8ad30f1a955f2453fa499c3\",\"license\":\"Apache-2.0\"},\"src/contracts-utils/v06/errors/LibMathRichErrorsV06.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\nlibrary LibMathRichErrorsV06 {\\n    // bytes4(keccak256(\\\"DivisionByZeroError()\\\"))\\n    bytes internal constant DIVISION_BY_ZERO_ERROR = hex\\\"a791837c\\\";\\n\\n    // bytes4(keccak256(\\\"RoundingError(uint256,uint256,uint256)\\\"))\\n    bytes4 internal constant ROUNDING_ERROR_SELECTOR = 0x339f3de2;\\n\\n    function DivisionByZeroError() internal pure returns (bytes memory) {\\n        return DIVISION_BY_ZERO_ERROR;\\n    }\\n\\n    function RoundingError(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 target\\n    ) internal pure returns (bytes memory) {\\n        return abi.encodeWithSelector(ROUNDING_ERROR_SELECTOR, numerator, denominator, target);\\n    }\\n}\\n\",\"keccak256\":\"0x351f2d05a070f1de7c57d2f246c9e8cea8c15037cdbe228aec6948cca02641c3\",\"license\":\"Apache-2.0\"},\"src/contracts-utils/v06/errors/LibRichErrorsV06.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\nlibrary LibRichErrorsV06 {\\n    // bytes4(keccak256(\\\"Error(string)\\\"))\\n    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\\n\\n    /// @dev ABI encode a standard, string revert error payload.\\n    ///      This is the same payload that would be included by a `revert(string)`\\n    ///      solidity statement. It has the function signature `Error(string)`.\\n    /// @param message The error string.\\n    /// @return The ABI encoded error.\\n    function StandardError(string memory message) internal pure returns (bytes memory) {\\n        return abi.encodeWithSelector(STANDARD_ERROR_SELECTOR, bytes(message));\\n    }\\n\\n    /// @dev Reverts an encoded rich revert reason `errorData`.\\n    /// @param errorData ABI encoded error data.\\n    function rrevert(bytes memory errorData) internal pure {\\n        assembly {\\n            revert(add(errorData, 0x20), mload(errorData))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x94011e576f60b0c5490c9424503a7ef0c9ebb57d1d9573372c87da0ede38f674\",\"license\":\"Apache-2.0\"},\"src/contracts-utils/v06/errors/LibSafeMathRichErrorsV06.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\nlibrary LibSafeMathRichErrorsV06 {\\n    // bytes4(keccak256(\\\"Uint256BinOpError(uint8,uint256,uint256)\\\"))\\n    bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR = 0xe946c1bb;\\n\\n    // bytes4(keccak256(\\\"Uint256DowncastError(uint8,uint256)\\\"))\\n    bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR = 0xc996af7b;\\n\\n    enum BinOpErrorCodes {\\n        ADDITION_OVERFLOW,\\n        MULTIPLICATION_OVERFLOW,\\n        SUBTRACTION_UNDERFLOW,\\n        DIVISION_BY_ZERO\\n    }\\n\\n    enum DowncastErrorCodes {\\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT32,\\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT64,\\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT96,\\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128\\n    }\\n\\n    function Uint256BinOpError(BinOpErrorCodes errorCode, uint256 a, uint256 b) internal pure returns (bytes memory) {\\n        return abi.encodeWithSelector(UINT256_BINOP_ERROR_SELECTOR, errorCode, a, b);\\n    }\\n\\n    function Uint256DowncastError(DowncastErrorCodes errorCode, uint256 a) internal pure returns (bytes memory) {\\n        return abi.encodeWithSelector(UINT256_DOWNCAST_ERROR_SELECTOR, errorCode, a);\\n    }\\n}\\n\",\"keccak256\":\"0xfb01cc2d90995a03f1f72b00226e089d1bf2acf36fe2c115b08ccf048e26cf6b\",\"license\":\"Apache-2.0\"},\"src/sampler/ApproximateBuys.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../contracts-utils/v06/LibMathV06.sol\\\";\\n\\ncontract ApproximateBuys {\\n    /// @dev Information computing buy quotes for sources that do not have native\\n    ///      buy quote support.\\n    struct ApproximateBuyQuoteOpts {\\n        // Arbitrary maker token data to pass to `getSellQuoteCallback`.\\n        bytes makerTokenData;\\n        // Arbitrary taker token data to pass to `getSellQuoteCallback`.\\n        bytes takerTokenData;\\n        // Callback to retrieve a sell quote.\\n        function(bytes memory, bytes memory, uint256) internal view returns (uint256) getSellQuoteCallback;\\n    }\\n\\n    uint256 private constant ONE_HUNDED_PERCENT_BPS = 1e4;\\n    /// @dev Maximum approximate (positive) error rate when approximating a buy quote.\\n    uint256 private constant APPROXIMATE_BUY_TARGET_EPSILON_BPS = 0.0005e4;\\n    /// @dev Maximum iterations to perform when approximating a buy quote.\\n    uint256 private constant APPROXIMATE_BUY_MAX_ITERATIONS = 5;\\n\\n    function _sampleApproximateBuys(\\n        ApproximateBuyQuoteOpts memory opts,\\n        uint256[] memory makerTokenAmounts\\n    ) internal view returns (uint256[] memory takerTokenAmounts) {\\n        takerTokenAmounts = new uint256[](makerTokenAmounts.length);\\n        if (makerTokenAmounts.length == 0) {\\n            return takerTokenAmounts;\\n        }\\n\\n        uint256 sellAmount = opts.getSellQuoteCallback(opts.makerTokenData, opts.takerTokenData, makerTokenAmounts[0]);\\n        if (sellAmount == 0) {\\n            return takerTokenAmounts;\\n        }\\n\\n        uint256 buyAmount = opts.getSellQuoteCallback(opts.takerTokenData, opts.makerTokenData, sellAmount);\\n        if (buyAmount == 0) {\\n            return takerTokenAmounts;\\n        }\\n\\n        for (uint256 i = 0; i < makerTokenAmounts.length; i++) {\\n            uint256 eps = 0;\\n            for (uint256 iter = 0; iter < APPROXIMATE_BUY_MAX_ITERATIONS; iter++) {\\n                // adjustedSellAmount = previousSellAmount * (target/actual) * JUMP_MULTIPLIER\\n                sellAmount = _safeGetPartialAmountCeil(makerTokenAmounts[i], buyAmount, sellAmount);\\n                if (sellAmount == 0) {\\n                    break;\\n                }\\n                sellAmount = _safeGetPartialAmountCeil(\\n                    (ONE_HUNDED_PERCENT_BPS + APPROXIMATE_BUY_TARGET_EPSILON_BPS),\\n                    ONE_HUNDED_PERCENT_BPS,\\n                    sellAmount\\n                );\\n                if (sellAmount == 0) {\\n                    break;\\n                }\\n                uint256 _buyAmount = opts.getSellQuoteCallback(opts.takerTokenData, opts.makerTokenData, sellAmount);\\n                if (_buyAmount == 0) {\\n                    break;\\n                }\\n                // We re-use buyAmount next iteration, only assign if it is\\n                // non zero\\n                buyAmount = _buyAmount;\\n                // If we've reached our goal, exit early\\n                if (buyAmount >= makerTokenAmounts[i]) {\\n                    eps = ((buyAmount - makerTokenAmounts[i]) * ONE_HUNDED_PERCENT_BPS) / makerTokenAmounts[i];\\n                    if (eps <= APPROXIMATE_BUY_TARGET_EPSILON_BPS) {\\n                        break;\\n                    }\\n                }\\n            }\\n            if (eps == 0 || eps > APPROXIMATE_BUY_TARGET_EPSILON_BPS) {\\n                break;\\n            }\\n            // We do our best to close in on the requested amount, but we can either over buy or under buy and exit\\n            // if we hit a max iteration limit\\n            // We scale the sell amount to get the approximate target\\n            takerTokenAmounts[i] = _safeGetPartialAmountCeil(makerTokenAmounts[i], buyAmount, sellAmount);\\n        }\\n    }\\n\\n    function _safeGetPartialAmountCeil(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 target\\n    ) internal view returns (uint256 partialAmount) {\\n        if (numerator == 0 || target == 0 || denominator == 0) return 0;\\n        uint256 c = numerator * target;\\n        if (c / numerator != target) return 0;\\n        return (c + (denominator - 1)) / denominator;\\n    }\\n}\\n\",\"keccak256\":\"0xb47ca80c6417fee2ad03fcd6a1748a301c737a698dd359eb48c1adf585e5351f\",\"license\":\"Apache-2.0\"},\"src/sampler/CurveSampler.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./interfaces/ICurve.sol\\\";\\nimport \\\"./ApproximateBuys.sol\\\";\\nimport \\\"./SamplerUtils.sol\\\";\\n\\ncontract CurveSampler is SamplerUtils, ApproximateBuys {\\n    /// @dev Information for sampling from curve sources.\\n    struct CurveInfo {\\n        address poolAddress;\\n        bytes4 sellQuoteFunctionSelector;\\n        bytes4 buyQuoteFunctionSelector;\\n    }\\n\\n    /// @dev Base gas limit for Curve calls. Some Curves have multiple tokens\\n    ///      So a reasonable ceil is 150k per token. Biggest Curve has 4 tokens.\\n    uint256 private constant CURVE_CALL_GAS = 2000e3; // Was 600k for Curve but SnowSwap is using 1500k+\\n\\n    /// @dev Sample sell quotes from Curve.\\n    /// @param curveInfo Curve information specific to this token pair.\\n    /// @param fromTokenIdx Index of the taker token (what to sell).\\n    /// @param toTokenIdx Index of the maker token (what to buy).\\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\\n    ///         amount.\\n    function sampleSellsFromCurve(\\n        CurveInfo memory curveInfo,\\n        int128 fromTokenIdx,\\n        int128 toTokenIdx,\\n        uint256[] memory takerTokenAmounts\\n    ) public view returns (uint256[] memory makerTokenAmounts) {\\n        uint256 numSamples = takerTokenAmounts.length;\\n        makerTokenAmounts = new uint256[](numSamples);\\n        for (uint256 i = 0; i < numSamples; i++) {\\n            (bool didSucceed, bytes memory resultData) = curveInfo.poolAddress.staticcall.gas(CURVE_CALL_GAS)(\\n                abi.encodeWithSelector(\\n                    curveInfo.sellQuoteFunctionSelector,\\n                    fromTokenIdx,\\n                    toTokenIdx,\\n                    takerTokenAmounts[i]\\n                )\\n            );\\n            uint256 buyAmount = 0;\\n            if (didSucceed) {\\n                buyAmount = abi.decode(resultData, (uint256));\\n            }\\n            makerTokenAmounts[i] = buyAmount;\\n            // Break early if there are 0 amounts\\n            if (makerTokenAmounts[i] == 0) {\\n                break;\\n            }\\n        }\\n    }\\n\\n    /// @dev Sample buy quotes from Curve.\\n    /// @param curveInfo Curve information specific to this token pair.\\n    /// @param fromTokenIdx Index of the taker token (what to sell).\\n    /// @param toTokenIdx Index of the maker token (what to buy).\\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\\n    ///         amount.\\n    function sampleBuysFromCurve(\\n        CurveInfo memory curveInfo,\\n        int128 fromTokenIdx,\\n        int128 toTokenIdx,\\n        uint256[] memory makerTokenAmounts\\n    ) public view returns (uint256[] memory takerTokenAmounts) {\\n        if (curveInfo.buyQuoteFunctionSelector == bytes4(0)) {\\n            // Buys not supported on this curve, so approximate it.\\n            return\\n                _sampleApproximateBuys(\\n                    ApproximateBuyQuoteOpts({\\n                        makerTokenData: abi.encode(toTokenIdx, curveInfo),\\n                        takerTokenData: abi.encode(fromTokenIdx, curveInfo),\\n                        getSellQuoteCallback: _sampleSellForApproximateBuyFromCurve\\n                    }),\\n                    makerTokenAmounts\\n                );\\n        }\\n        uint256 numSamples = makerTokenAmounts.length;\\n        takerTokenAmounts = new uint256[](numSamples);\\n        for (uint256 i = 0; i < numSamples; i++) {\\n            (bool didSucceed, bytes memory resultData) = curveInfo.poolAddress.staticcall.gas(CURVE_CALL_GAS)(\\n                abi.encodeWithSelector(\\n                    curveInfo.buyQuoteFunctionSelector,\\n                    fromTokenIdx,\\n                    toTokenIdx,\\n                    makerTokenAmounts[i]\\n                )\\n            );\\n            uint256 sellAmount = 0;\\n            if (didSucceed) {\\n                sellAmount = abi.decode(resultData, (uint256));\\n            }\\n            takerTokenAmounts[i] = sellAmount;\\n            // Break early if there are 0 amounts\\n            if (takerTokenAmounts[i] == 0) {\\n                break;\\n            }\\n        }\\n    }\\n\\n    function _sampleSellForApproximateBuyFromCurve(\\n        bytes memory takerTokenData,\\n        bytes memory makerTokenData,\\n        uint256 sellAmount\\n    ) private view returns (uint256 buyAmount) {\\n        (int128 takerTokenIdx, CurveInfo memory curveInfo) = abi.decode(takerTokenData, (int128, CurveInfo));\\n        int128 makerTokenIdx = abi.decode(makerTokenData, (int128));\\n        (bool success, bytes memory resultData) = address(this).staticcall(\\n            abi.encodeWithSelector(\\n                this.sampleSellsFromCurve.selector,\\n                curveInfo,\\n                takerTokenIdx,\\n                makerTokenIdx,\\n                _toSingleValueArray(sellAmount)\\n            )\\n        );\\n        if (!success) {\\n            return 0;\\n        }\\n        // solhint-disable-next-line indent\\n        return abi.decode(resultData, (uint256[]))[0];\\n    }\\n}\\n\",\"keccak256\":\"0x18123d1567b61dbb63241fad889a09f96191054385ee26b21925a2e97d08522d\",\"license\":\"Apache-2.0\"},\"src/sampler/ERC20BridgeSampler.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./CurveSampler.sol\\\";\\nimport \\\"./MStableSampler.sol\\\";\\nimport \\\"./NativeOrderSampler.sol\\\";\\nimport \\\"./TwoHopSampler.sol\\\";\\nimport \\\"./UniswapSampler.sol\\\";\\nimport \\\"./UniswapV2Sampler.sol\\\";\\nimport \\\"./UniswapV3Sampler.sol\\\";\\nimport \\\"./UtilitySampler.sol\\\";\\n\\ncontract ERC20BridgeSampler is\\n    CurveSampler,\\n    MStableSampler,\\n    NativeOrderSampler,\\n    TwoHopSampler,\\n    UniswapSampler,\\n    UniswapV2Sampler,\\n    UniswapV3Sampler,\\n    UtilitySampler\\n{\\n    struct CallResults {\\n        bytes data;\\n        bool success;\\n    }\\n\\n    /// @dev Call multiple public functions on this contract in a single transaction.\\n    /// @param callDatas ABI-encoded call data for each function call.\\n    /// @return callResults ABI-encoded results data for each call.\\n    function batchCall(bytes[] calldata callDatas) external returns (CallResults[] memory callResults) {\\n        callResults = new CallResults[](callDatas.length);\\n        for (uint256 i = 0; i != callDatas.length; ++i) {\\n            callResults[i].success = true;\\n            if (callDatas[i].length == 0) {\\n                continue;\\n            }\\n            (callResults[i].success, callResults[i].data) = address(this).call(callDatas[i]);\\n        }\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x7cb9708a0b0c7d8a341d9a6b3d6c1b56d40cc60a42130e35b111a5ec4428d240\",\"license\":\"Apache-2.0\"},\"src/sampler/MStableSampler.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./interfaces/IMStable.sol\\\";\\nimport \\\"./ApproximateBuys.sol\\\";\\nimport \\\"./SamplerUtils.sol\\\";\\n\\ncontract MStableSampler is SamplerUtils, ApproximateBuys {\\n    /// @dev Default gas limit for mStable calls.\\n    uint256 private constant DEFAULT_CALL_GAS = 800e3; // 800k\\n\\n    /// @dev Sample sell quotes from the mStable contract\\n    /// @param router Address of the mStable contract\\n    /// @param takerToken Address of the taker token (what to sell).\\n    /// @param makerToken Address of the maker token (what to buy).\\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\\n    ///         amount.\\n    function sampleSellsFromMStable(\\n        address router,\\n        address takerToken,\\n        address makerToken,\\n        uint256[] memory takerTokenAmounts\\n    ) public view returns (uint256[] memory makerTokenAmounts) {\\n        _assertValidPair(makerToken, takerToken);\\n        // Initialize array of maker token amounts.\\n        uint256 numSamples = takerTokenAmounts.length;\\n        makerTokenAmounts = new uint256[](numSamples);\\n\\n        for (uint256 i = 0; i < numSamples; i++) {\\n            try\\n                IMStable(router).getSwapOutput{gas: DEFAULT_CALL_GAS}(takerToken, makerToken, takerTokenAmounts[i])\\n            returns (uint256 amount) {\\n                makerTokenAmounts[i] = amount;\\n                // Break early if there are 0 amounts\\n                if (makerTokenAmounts[i] == 0) {\\n                    break;\\n                }\\n            } catch (bytes memory) {\\n                // Swallow failures, leaving all results as zero.\\n                break;\\n            }\\n        }\\n    }\\n\\n    /// @dev Sample buy quotes from MStable contract\\n    /// @param router Address of the mStable contract\\n    /// @param takerToken Address of the taker token (what to sell).\\n    /// @param makerToken Address of the maker token (what to buy).\\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\\n    ///         amount.\\n    function sampleBuysFromMStable(\\n        address router,\\n        address takerToken,\\n        address makerToken,\\n        uint256[] memory makerTokenAmounts\\n    ) public view returns (uint256[] memory takerTokenAmounts) {\\n        return\\n            _sampleApproximateBuys(\\n                ApproximateBuyQuoteOpts({\\n                    makerTokenData: abi.encode(makerToken, router),\\n                    takerTokenData: abi.encode(takerToken, router),\\n                    getSellQuoteCallback: _sampleSellForApproximateBuyFromMStable\\n                }),\\n                makerTokenAmounts\\n            );\\n    }\\n\\n    function _sampleSellForApproximateBuyFromMStable(\\n        bytes memory takerTokenData,\\n        bytes memory makerTokenData,\\n        uint256 sellAmount\\n    ) private view returns (uint256 buyAmount) {\\n        (address takerToken, address router) = abi.decode(takerTokenData, (address, address));\\n        address makerToken = abi.decode(makerTokenData, (address));\\n        try this.sampleSellsFromMStable(router, takerToken, makerToken, _toSingleValueArray(sellAmount)) returns (\\n            uint256[] memory amounts\\n        ) {\\n            return amounts[0];\\n        } catch (bytes memory) {\\n            // Swallow failures, leaving all results as zero.\\n            return 0;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4a3f94cda5839985c308628dee9305d02ad1d62da8582a0dfdb1a89abcb5461b\",\"license\":\"Apache-2.0\"},\"src/sampler/NativeOrderSampler.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2021 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../contracts-erc20/v06/LibERC20TokenV06.sol\\\";\\nimport \\\"../contracts-utils/v06/LibMathV06.sol\\\";\\nimport \\\"../contracts-utils/v06/LibBytesV06.sol\\\";\\nimport \\\"../contracts-utils/v06/LibSafeMathV06.sol\\\";\\n\\ninterface IExchange {\\n    enum OrderStatus {\\n        INVALID,\\n        FILLABLE,\\n        FILLED,\\n        CANCELLED,\\n        EXPIRED\\n    }\\n\\n    /// @dev A standard OTC or OO limit order.\\n    struct LimitOrder {\\n        IERC20TokenV06 makerToken;\\n        IERC20TokenV06 takerToken;\\n        uint128 makerAmount;\\n        uint128 takerAmount;\\n        uint128 takerTokenFeeAmount;\\n        address maker;\\n        address taker;\\n        address sender;\\n        address feeRecipient;\\n        bytes32 pool;\\n        uint64 expiry;\\n        uint256 salt;\\n    }\\n\\n    /// @dev An RFQ limit order.\\n    struct RfqOrder {\\n        IERC20TokenV06 makerToken;\\n        IERC20TokenV06 takerToken;\\n        uint128 makerAmount;\\n        uint128 takerAmount;\\n        address maker;\\n        address taker;\\n        address txOrigin;\\n        bytes32 pool;\\n        uint64 expiry;\\n        uint256 salt;\\n    }\\n\\n    /// @dev Info on a limit or RFQ order.\\n    struct OrderInfo {\\n        bytes32 orderHash;\\n        OrderStatus status;\\n        uint128 takerTokenFilledAmount;\\n    }\\n\\n    /// @dev Allowed signature types.\\n    enum SignatureType {\\n        ILLEGAL,\\n        INVALID,\\n        EIP712,\\n        ETHSIGN\\n    }\\n\\n    /// @dev Encoded EC signature.\\n    struct Signature {\\n        // How to validate the signature.\\n        SignatureType signatureType;\\n        // EC Signature data.\\n        uint8 v;\\n        // EC Signature data.\\n        bytes32 r;\\n        // EC Signature data.\\n        bytes32 s;\\n    }\\n\\n    /// @dev Get the order info for a limit order.\\n    /// @param order The limit order.\\n    /// @return orderInfo Info about the order.\\n    function getLimitOrderInfo(LimitOrder memory order) external view returns (OrderInfo memory orderInfo);\\n\\n    /// @dev Get order info, fillable amount, and signature validity for a limit order.\\n    ///      Fillable amount is determined using balances and allowances of the maker.\\n    /// @param order The limit order.\\n    /// @param signature The order signature.\\n    /// @return orderInfo Info about the order.\\n    /// @return actualFillableTakerTokenAmount How much of the order is fillable\\n    ///         based on maker funds, in taker tokens.\\n    /// @return isSignatureValid Whether the signature is valid.\\n    function getLimitOrderRelevantState(\\n        LimitOrder memory order,\\n        Signature calldata signature\\n    ) external view returns (OrderInfo memory orderInfo, uint128 actualFillableTakerTokenAmount, bool isSignatureValid);\\n}\\n\\ncontract NativeOrderSampler {\\n    using LibSafeMathV06 for uint256;\\n    using LibBytesV06 for bytes;\\n\\n    /// @dev Gas limit for calls to `getOrderFillableTakerAmount()`.\\n    uint256 internal constant DEFAULT_CALL_GAS = 200e3; // 200k\\n\\n    /// @dev Queries the fillable taker asset amounts of native orders.\\n    ///      Effectively ignores orders that have empty signatures or\\n    ///      maker/taker asset amounts (returning 0).\\n    /// @param orders Native limit orders to query.\\n    /// @param orderSignatures Signatures for each respective order in `orders`.\\n    /// @param exchange The V4 exchange.\\n    /// @return orderFillableTakerAssetAmounts How much taker asset can be filled\\n    ///         by each order in `orders`.\\n    function getLimitOrderFillableTakerAssetAmounts(\\n        IExchange.LimitOrder[] memory orders,\\n        IExchange.Signature[] memory orderSignatures,\\n        IExchange exchange\\n    ) public view returns (uint256[] memory orderFillableTakerAssetAmounts) {\\n        orderFillableTakerAssetAmounts = new uint256[](orders.length);\\n        for (uint256 i = 0; i != orders.length; i++) {\\n            try\\n                this.getLimitOrderFillableTakerAmount{gas: DEFAULT_CALL_GAS}(orders[i], orderSignatures[i], exchange)\\n            returns (uint256 amount) {\\n                orderFillableTakerAssetAmounts[i] = amount;\\n            } catch (bytes memory) {\\n                // Swallow failures, leaving all results as zero.\\n                orderFillableTakerAssetAmounts[i] = 0;\\n            }\\n        }\\n    }\\n\\n    /// @dev Queries the fillable taker asset amounts of native orders.\\n    ///      Effectively ignores orders that have empty signatures or\\n    /// @param orders Native orders to query.\\n    /// @param orderSignatures Signatures for each respective order in `orders`.\\n    /// @param exchange The V4 exchange.\\n    /// @return orderFillableMakerAssetAmounts How much maker asset can be filled\\n    ///         by each order in `orders`.\\n    function getLimitOrderFillableMakerAssetAmounts(\\n        IExchange.LimitOrder[] memory orders,\\n        IExchange.Signature[] memory orderSignatures,\\n        IExchange exchange\\n    ) public view returns (uint256[] memory orderFillableMakerAssetAmounts) {\\n        orderFillableMakerAssetAmounts = getLimitOrderFillableTakerAssetAmounts(orders, orderSignatures, exchange);\\n        // `orderFillableMakerAssetAmounts` now holds taker asset amounts, so\\n        // convert them to maker asset amounts.\\n        for (uint256 i = 0; i < orders.length; ++i) {\\n            if (orderFillableMakerAssetAmounts[i] != 0) {\\n                orderFillableMakerAssetAmounts[i] = LibMathV06.getPartialAmountCeil(\\n                    orderFillableMakerAssetAmounts[i],\\n                    orders[i].takerAmount,\\n                    orders[i].makerAmount\\n                );\\n            }\\n        }\\n    }\\n\\n    /// @dev Get the fillable taker amount of an order, taking into account\\n    ///      order state, maker fees, and maker balances.\\n    function getLimitOrderFillableTakerAmount(\\n        IExchange.LimitOrder memory order,\\n        IExchange.Signature memory signature,\\n        IExchange exchange\\n    ) public view virtual returns (uint256 fillableTakerAmount) {\\n        if (\\n            signature.signatureType == IExchange.SignatureType.ILLEGAL ||\\n            signature.signatureType == IExchange.SignatureType.INVALID ||\\n            order.makerAmount == 0 ||\\n            order.takerAmount == 0\\n        ) {\\n            return 0;\\n        }\\n\\n        (IExchange.OrderInfo memory orderInfo, uint128 remainingFillableTakerAmount, bool isSignatureValid) = exchange\\n            .getLimitOrderRelevantState(order, signature);\\n\\n        if (\\n            orderInfo.status != IExchange.OrderStatus.FILLABLE ||\\n            !isSignatureValid ||\\n            order.makerToken == IERC20TokenV06(0)\\n        ) {\\n            return 0;\\n        }\\n\\n        fillableTakerAmount = uint256(remainingFillableTakerAmount);\\n    }\\n}\\n\",\"keccak256\":\"0x3b2f0ce7e62d93bea0efe718f7b801cedcd665827be5831315fe886d6631b54b\",\"license\":\"Apache-2.0\"},\"src/sampler/SamplerUtils.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../contracts-erc20/v06/LibERC20TokenV06.sol\\\";\\n\\ncontract SamplerUtils {\\n    /// @dev Overridable way to get token decimals.\\n    /// @param tokenAddress Address of the token.\\n    /// @return decimals The decimal places for the token.\\n    function _getTokenDecimals(address tokenAddress) internal view virtual returns (uint8 decimals) {\\n        return LibERC20TokenV06.compatDecimals(IERC20TokenV06(tokenAddress));\\n    }\\n\\n    function _toSingleValueArray(uint256 v) internal pure returns (uint256[] memory arr) {\\n        arr = new uint256[](1);\\n        arr[0] = v;\\n    }\\n\\n    /// @dev Assert that the tokens in a trade pair are valid.\\n    /// @param makerToken Address of the maker token.\\n    /// @param takerToken Address of the taker token.\\n    function _assertValidPair(address makerToken, address takerToken) internal pure {\\n        require(makerToken != takerToken, \\\"ERC20BridgeSampler/INVALID_TOKEN_PAIR\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x47ba3fdf9ccc89160b5d3e5c6546fbe9063bb4663e39e76acaea2ea9940a66bd\",\"license\":\"Apache-2.0\"},\"src/sampler/TwoHopSampler.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../contracts-utils/v06/LibBytesV06.sol\\\";\\n\\ncontract TwoHopSampler {\\n    using LibBytesV06 for bytes;\\n\\n    struct HopInfo {\\n        uint256 sourceIndex;\\n        bytes returnData;\\n    }\\n\\n    function sampleTwoHopSell(\\n        bytes[] memory firstHopCalls,\\n        bytes[] memory secondHopCalls,\\n        uint256 numSamples\\n    ) public returns (HopInfo memory firstHop, HopInfo memory secondHop, uint256[] memory buyAmounts) {\\n        buyAmounts = new uint256[](numSamples);\\n        uint256[] memory intermediateAmounts = new uint256[](numSamples);\\n        for (uint256 i = 0; i < firstHopCalls.length; i++) {\\n            (bool didSucceed, bytes memory returnData) = address(this).call(firstHopCalls[i]);\\n            if (didSucceed) {\\n                uint256[] memory amounts = getAmounts(returnData, numSamples);\\n                // Use the amount from the largest size for comparison.\\n                if (amounts[numSamples - 1] > intermediateAmounts[numSamples - 1]) {\\n                    firstHop.sourceIndex = i;\\n                    firstHop.returnData = returnData;\\n                    for (uint256 j = 0; j < numSamples; j++) {\\n                        intermediateAmounts[j] = amounts[j];\\n                    }\\n                }\\n            }\\n        }\\n\\n        if (intermediateAmounts[numSamples - 1] == 0) {\\n            return (firstHop, secondHop, buyAmounts);\\n        }\\n\\n        for (uint256 i = 0; i < secondHopCalls.length; i++) {\\n            writeAmounts(secondHopCalls[i], intermediateAmounts);\\n\\n            (bool didSucceed, bytes memory returnData) = address(this).call(secondHopCalls[i]);\\n            if (didSucceed) {\\n                uint256[] memory amounts = getAmounts(returnData, numSamples);\\n                // Use the amount from the largest size for comparison.\\n                if (amounts[numSamples - 1] > buyAmounts[numSamples - 1]) {\\n                    secondHop.sourceIndex = i;\\n                    secondHop.returnData = returnData;\\n                    for (uint256 j = 0; j < numSamples; j++) {\\n                        buyAmounts[j] = amounts[j];\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    function sampleTwoHopBuy(\\n        bytes[] memory firstHopCalls,\\n        bytes[] memory secondHopCalls,\\n        uint256 numSamples\\n    ) public returns (HopInfo memory firstHop, HopInfo memory secondHop, uint256[] memory sellAmounts) {\\n        sellAmounts = new uint256[](numSamples);\\n        for (uint256 i = 0; i < numSamples; i++) {\\n            sellAmounts[i] = uint256(-1);\\n        }\\n\\n        uint256[] memory intermediateAmounts = new uint256[](numSamples);\\n        for (uint256 i = 0; i < numSamples; i++) {\\n            intermediateAmounts[i] = uint256(-1);\\n        }\\n\\n        for (uint256 i = 0; i < secondHopCalls.length; i++) {\\n            (bool didSucceed, bytes memory returnData) = address(this).call(secondHopCalls[i]);\\n            if (didSucceed) {\\n                uint256[] memory amounts = getAmounts(returnData, numSamples);\\n                uint256 largestAmount = amounts[numSamples - 1];\\n\\n                // Use the amount from the largest size for comparison.\\n                if (largestAmount > 0 && largestAmount < intermediateAmounts[numSamples - 1]) {\\n                    secondHop.sourceIndex = i;\\n                    secondHop.returnData = returnData;\\n                    for (uint256 j = 0; j < numSamples; j++) {\\n                        intermediateAmounts[j] = amounts[j];\\n                    }\\n                }\\n            }\\n        }\\n\\n        if (intermediateAmounts[numSamples - 1] == uint256(-1)) {\\n            return (firstHop, secondHop, sellAmounts);\\n        }\\n\\n        for (uint256 i = 0; i != firstHopCalls.length; ++i) {\\n            writeAmounts(firstHopCalls[i], intermediateAmounts);\\n            (bool didSucceed, bytes memory returnData) = address(this).call(firstHopCalls[i]);\\n            if (didSucceed) {\\n                uint256[] memory amounts = getAmounts(returnData, numSamples);\\n                uint256 largestAmount = amounts[numSamples - 1];\\n\\n                // Use the amount from the largest size for comparison.\\n                if (largestAmount > 0 && largestAmount < sellAmounts[numSamples - 1]) {\\n                    firstHop.sourceIndex = i;\\n                    firstHop.returnData = returnData;\\n                    for (uint256 j = 0; j < numSamples; j++) {\\n                        sellAmounts[j] = amounts[j];\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Extract amounts from `data` by creating a copy assuming that such uint256[] array exists\\n    /// at the end of `data`.\\n    function getAmounts(bytes memory data, uint256 amountsLength) private pure returns (uint256[] memory) {\\n        uint256 start = data.length - (amountsLength + 2) * 32; // Copy offset and length as well.\\n        uint256 end = data.length;\\n        bytes memory amounts = data.slice(start, end);\\n        amounts.writeUint256(0, 0x20); // Overwrite offset.\\n        return abi.decode(amounts, (uint256[]));\\n    }\\n\\n    /// @dev Writes amounts arary to the end of data assuming that there is space reserved.\\n    function writeAmounts(bytes memory data, uint256[] memory amounts) private pure {\\n        for (uint256 i = 0; i < amounts.length; i++) {\\n            uint256 index = data.length - 32 * (amounts.length - i - 1);\\n            uint256 amount = amounts[i];\\n            assembly {\\n                mstore(add(data, index), amount)\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7e76a4b395eb455d3afe32f2acec14d1d7c62c42184760d93e6c9241920ff8d7\",\"license\":\"Apache-2.0\"},\"src/sampler/UniswapSampler.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./interfaces/IUniswapExchangeQuotes.sol\\\";\\nimport \\\"./SamplerUtils.sol\\\";\\n\\ninterface IUniswapExchangeFactory {\\n    /// @dev Get the exchange for a token.\\n    /// @param tokenAddress The address of the token contract.\\n    function getExchange(address tokenAddress) external view returns (address);\\n}\\n\\ncontract UniswapSampler is SamplerUtils {\\n    /// @dev Gas limit for Uniswap calls.\\n    uint256 private constant UNISWAP_CALL_GAS = 150e3; // 150k\\n\\n    /// @dev Sample sell quotes from Uniswap.\\n    /// @param router Address of the Uniswap Router\\n    /// @param takerToken Address of the taker token (what to sell).\\n    /// @param makerToken Address of the maker token (what to buy).\\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\\n    ///         amount.\\n    function sampleSellsFromUniswap(\\n        address router,\\n        address takerToken,\\n        address makerToken,\\n        uint256[] memory takerTokenAmounts\\n    ) public view returns (uint256[] memory makerTokenAmounts) {\\n        _assertValidPair(makerToken, takerToken);\\n        uint256 numSamples = takerTokenAmounts.length;\\n        makerTokenAmounts = new uint256[](numSamples);\\n\\n        IUniswapExchangeQuotes takerTokenExchange = takerToken == address(0)\\n            ? IUniswapExchangeQuotes(0)\\n            : _getUniswapExchange(router, takerToken);\\n        IUniswapExchangeQuotes makerTokenExchange = makerToken == address(0)\\n            ? IUniswapExchangeQuotes(0)\\n            : _getUniswapExchange(router, makerToken);\\n        for (uint256 i = 0; i < numSamples; i++) {\\n            bool didSucceed = true;\\n            if (makerToken == address(0)) {\\n                (makerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\\n                    address(takerTokenExchange),\\n                    takerTokenExchange.getTokenToEthInputPrice.selector,\\n                    takerTokenAmounts[i]\\n                );\\n            } else if (takerToken == address(0)) {\\n                (makerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\\n                    address(makerTokenExchange),\\n                    makerTokenExchange.getEthToTokenInputPrice.selector,\\n                    takerTokenAmounts[i]\\n                );\\n            } else {\\n                uint256 ethBought;\\n                (ethBought, didSucceed) = _callUniswapExchangePriceFunction(\\n                    address(takerTokenExchange),\\n                    takerTokenExchange.getTokenToEthInputPrice.selector,\\n                    takerTokenAmounts[i]\\n                );\\n                if (ethBought != 0) {\\n                    (makerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\\n                        address(makerTokenExchange),\\n                        makerTokenExchange.getEthToTokenInputPrice.selector,\\n                        ethBought\\n                    );\\n                } else {\\n                    makerTokenAmounts[i] = 0;\\n                }\\n            }\\n            // Break early if amounts are 0\\n            if (!didSucceed || makerTokenAmounts[i] == 0) {\\n                break;\\n            }\\n        }\\n    }\\n\\n    /// @dev Sample buy quotes from Uniswap.\\n    /// @param takerToken Address of the taker token (what to sell).\\n    /// @param makerToken Address of the maker token (what to buy).\\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\\n    ///         amount.\\n    function sampleBuysFromUniswap(\\n        address router,\\n        address takerToken,\\n        address makerToken,\\n        uint256[] memory makerTokenAmounts\\n    ) public view returns (uint256[] memory takerTokenAmounts) {\\n        _assertValidPair(makerToken, takerToken);\\n        uint256 numSamples = makerTokenAmounts.length;\\n        takerTokenAmounts = new uint256[](numSamples);\\n\\n        IUniswapExchangeQuotes takerTokenExchange = takerToken == address(0)\\n            ? IUniswapExchangeQuotes(0)\\n            : _getUniswapExchange(router, takerToken);\\n        IUniswapExchangeQuotes makerTokenExchange = makerToken == address(0)\\n            ? IUniswapExchangeQuotes(0)\\n            : _getUniswapExchange(router, makerToken);\\n        for (uint256 i = 0; i < numSamples; i++) {\\n            bool didSucceed = true;\\n            if (makerToken == address(0)) {\\n                (takerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\\n                    address(takerTokenExchange),\\n                    takerTokenExchange.getTokenToEthOutputPrice.selector,\\n                    makerTokenAmounts[i]\\n                );\\n            } else if (takerToken == address(0)) {\\n                (takerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\\n                    address(makerTokenExchange),\\n                    makerTokenExchange.getEthToTokenOutputPrice.selector,\\n                    makerTokenAmounts[i]\\n                );\\n            } else {\\n                uint256 ethSold;\\n                (ethSold, didSucceed) = _callUniswapExchangePriceFunction(\\n                    address(makerTokenExchange),\\n                    makerTokenExchange.getEthToTokenOutputPrice.selector,\\n                    makerTokenAmounts[i]\\n                );\\n                if (ethSold != 0) {\\n                    (takerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\\n                        address(takerTokenExchange),\\n                        takerTokenExchange.getTokenToEthOutputPrice.selector,\\n                        ethSold\\n                    );\\n                } else {\\n                    takerTokenAmounts[i] = 0;\\n                }\\n            }\\n            // Break early if amounts are 0\\n            if (!didSucceed || takerTokenAmounts[i] == 0) {\\n                break;\\n            }\\n        }\\n    }\\n\\n    /// @dev Gracefully calls a Uniswap pricing function.\\n    /// @param uniswapExchangeAddress Address of an `IUniswapExchangeQuotes` exchange.\\n    /// @param functionSelector Selector of the target function.\\n    /// @param inputAmount Quantity parameter particular to the pricing function.\\n    /// @return outputAmount The returned amount from the function call. Will be\\n    ///         zero if the call fails or if `uniswapExchangeAddress` is zero.\\n    function _callUniswapExchangePriceFunction(\\n        address uniswapExchangeAddress,\\n        bytes4 functionSelector,\\n        uint256 inputAmount\\n    ) private view returns (uint256 outputAmount, bool didSucceed) {\\n        if (uniswapExchangeAddress == address(0)) {\\n            return (outputAmount, didSucceed);\\n        }\\n        bytes memory resultData;\\n        (didSucceed, resultData) = uniswapExchangeAddress.staticcall.gas(UNISWAP_CALL_GAS)(\\n            abi.encodeWithSelector(functionSelector, inputAmount)\\n        );\\n        if (didSucceed) {\\n            outputAmount = abi.decode(resultData, (uint256));\\n        }\\n    }\\n\\n    /// @dev Retrive an existing Uniswap exchange contract.\\n    ///      Throws if the exchange does not exist.\\n    /// @param router Address of the Uniswap router.\\n    /// @param tokenAddress Address of the token contract.\\n    /// @return exchange `IUniswapExchangeQuotes` for the token.\\n    function _getUniswapExchange(\\n        address router,\\n        address tokenAddress\\n    ) private view returns (IUniswapExchangeQuotes exchange) {\\n        exchange = IUniswapExchangeQuotes(address(IUniswapExchangeFactory(router).getExchange(tokenAddress)));\\n    }\\n}\\n\",\"keccak256\":\"0x44742b4639c912802a4745d8f1a0c0cc7ad4957ca4576f807df358f14acf4147\",\"license\":\"Apache-2.0\"},\"src/sampler/UniswapV2Sampler.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./interfaces/IUniswapV2Router01.sol\\\";\\n\\ncontract UniswapV2Sampler {\\n    /// @dev Gas limit for UniswapV2 calls.\\n    uint256 private constant UNISWAPV2_CALL_GAS = 150e3; // 150k\\n\\n    /// @dev Sample sell quotes from UniswapV2.\\n    /// @param router Router to look up tokens and amounts\\n    /// @param path Token route. Should be takerToken -> makerToken\\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\\n    ///         amount.\\n    function sampleSellsFromUniswapV2(\\n        address router,\\n        address[] memory path,\\n        uint256[] memory takerTokenAmounts\\n    ) public view returns (uint256[] memory makerTokenAmounts) {\\n        uint256 numSamples = takerTokenAmounts.length;\\n        makerTokenAmounts = new uint256[](numSamples);\\n        for (uint256 i = 0; i < numSamples; i++) {\\n            try IUniswapV2Router01(router).getAmountsOut{gas: UNISWAPV2_CALL_GAS}(takerTokenAmounts[i], path) returns (\\n                uint256[] memory amounts\\n            ) {\\n                makerTokenAmounts[i] = amounts[path.length - 1];\\n                // Break early if there are 0 amounts\\n                if (makerTokenAmounts[i] == 0) {\\n                    break;\\n                }\\n            } catch (bytes memory) {\\n                // Swallow failures, leaving all results as zero.\\n                break;\\n            }\\n        }\\n    }\\n\\n    /// @dev Sample buy quotes from UniswapV2.\\n    /// @param router Router to look up tokens and amounts\\n    /// @param path Token route. Should be takerToken -> makerToken.\\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\\n    ///         amount.\\n    function sampleBuysFromUniswapV2(\\n        address router,\\n        address[] memory path,\\n        uint256[] memory makerTokenAmounts\\n    ) public view returns (uint256[] memory takerTokenAmounts) {\\n        uint256 numSamples = makerTokenAmounts.length;\\n        takerTokenAmounts = new uint256[](numSamples);\\n        for (uint256 i = 0; i < numSamples; i++) {\\n            try IUniswapV2Router01(router).getAmountsIn{gas: UNISWAPV2_CALL_GAS}(makerTokenAmounts[i], path) returns (\\n                uint256[] memory amounts\\n            ) {\\n                takerTokenAmounts[i] = amounts[0];\\n                // Break early if there are 0 amounts\\n                if (takerTokenAmounts[i] == 0) {\\n                    break;\\n                }\\n            } catch (bytes memory) {\\n                // Swallow failures, leaving all results as zero.\\n                break;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5fbc69e73ff8a3d9c71bbadaa500a83d98d01640a470c58a34192a8459368484\",\"license\":\"Apache-2.0\"},\"src/sampler/UniswapV3Sampler.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2022 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../contracts-erc20/v06/IERC20TokenV06.sol\\\";\\n\\ninterface IUniswapV3QuoterV2 {\\n    function factory() external view returns (IUniswapV3Factory factory);\\n\\n    // @notice Returns the amount out received for a given exact input swap without executing the swap\\n    // @param path The path of the swap, i.e. each token pair and the pool fee\\n    // @param amountIn The amount of the first token to swap\\n    // @return amountOut The amount of the last token that would be received\\n    // @return sqrtPriceX96AfterList List of the sqrt price after the swap for each pool in the path\\n    // @return initializedTicksCrossedList List of the initialized ticks that the swap crossed for each pool in the path\\n    // @return gasEstimate The estimate of the gas that the swap consumes\\n    function quoteExactInput(\\n        bytes memory path,\\n        uint256 amountIn\\n    )\\n        external\\n        returns (\\n            uint256 amountOut,\\n            uint160[] memory sqrtPriceX96AfterList,\\n            uint32[] memory initializedTicksCrossedList,\\n            uint256 gasEstimate\\n        );\\n\\n    // @notice Returns the amount in required for a given exact output swap without executing the swap\\n    // @param path The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order\\n    // @param amountOut The amount of the last token to receive\\n    // @return amountIn The amount of first token required to be paid\\n    // @return sqrtPriceX96AfterList List of the sqrt price after the swap for each pool in the path\\n    // @return initializedTicksCrossedList List of the initialized ticks that the swap crossed for each pool in the path\\n    // @return gasEstimate The estimate of the gas that the swap consumes\\n    function quoteExactOutput(\\n        bytes memory path,\\n        uint256 amountOut\\n    )\\n        external\\n        returns (\\n            uint256 amountIn,\\n            uint160[] memory sqrtPriceX96AfterList,\\n            uint32[] memory initializedTicksCrossedList,\\n            uint256 gasEstimate\\n        );\\n}\\n\\ninterface IUniswapV3Factory {\\n    function getPool(IERC20TokenV06 a, IERC20TokenV06 b, uint24 fee) external view returns (IUniswapV3Pool pool);\\n}\\n\\ninterface IUniswapV3Pool {\\n    function token0() external view returns (IERC20TokenV06);\\n\\n    function token1() external view returns (IERC20TokenV06);\\n\\n    function fee() external view returns (uint24);\\n}\\n\\ncontract UniswapV3Sampler {\\n    /// @dev Gas limit for UniswapV3 calls. This is 100% a guess.\\n    uint256 private constant QUOTE_GAS = 700e3;\\n\\n    /// @dev Sample sell quotes from UniswapV3.\\n    /// @param quoter UniswapV3 Quoter contract.\\n    /// @param path Token route. Should be takerToken -> makerToken (at most two hops).\\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\\n    /// @return uniswapPaths The encoded uniswap path for each sample.\\n    /// @return uniswapGasUsed Estimated amount of gas used\\n    /// @return makerTokenAmounts Maker amounts bought at each taker token amount.\\n    function sampleSellsFromUniswapV3(\\n        IUniswapV3QuoterV2 quoter,\\n        IERC20TokenV06[] memory path,\\n        uint256[] memory takerTokenAmounts\\n    )\\n        public\\n        returns (bytes[] memory uniswapPaths, uint256[] memory uniswapGasUsed, uint256[] memory makerTokenAmounts)\\n    {\\n        IUniswapV3Pool[][] memory poolPaths = _getPoolPaths(\\n            quoter,\\n            path,\\n            takerTokenAmounts[takerTokenAmounts.length - 1]\\n        );\\n\\n        makerTokenAmounts = new uint256[](takerTokenAmounts.length);\\n        uniswapPaths = new bytes[](takerTokenAmounts.length);\\n        uniswapGasUsed = new uint256[](takerTokenAmounts.length);\\n\\n        for (uint256 i = 0; i < takerTokenAmounts.length; ++i) {\\n            // Pick the best result from the pool paths.\\n            uint256 topBuyAmount = 0;\\n            for (uint256 j = 0; j < poolPaths.length; ++j) {\\n                if (!isValidPoolPath(poolPaths[j])) {\\n                    continue;\\n                }\\n\\n                bytes memory uniswapPath = _toUniswapPath(path, poolPaths[j]);\\n                try quoter.quoteExactInput{gas: QUOTE_GAS}(uniswapPath, takerTokenAmounts[i]) returns (\\n                    uint256 buyAmount,\\n                    uint160[] memory /* sqrtPriceX96AfterList */,\\n                    uint32[] memory /* initializedTicksCrossedList */,\\n                    uint256 gasUsed\\n                ) {\\n                    if (topBuyAmount <= buyAmount) {\\n                        topBuyAmount = buyAmount;\\n                        uniswapPaths[i] = uniswapPath;\\n                        uniswapGasUsed[i] = gasUsed;\\n                    }\\n                } catch {}\\n            }\\n            // Break early if we can't complete the sells.\\n            if (topBuyAmount == 0) {\\n                // HACK(kimpers): To avoid too many local variables, paths and gas used is set directly in the loop\\n                // then reset if no valid valid quote was found\\n                uniswapPaths[i] = \\\"\\\";\\n                uniswapGasUsed[i] = 0;\\n                break;\\n            }\\n            makerTokenAmounts[i] = topBuyAmount;\\n        }\\n    }\\n\\n    /// @dev Sample buy quotes from UniswapV3.\\n    /// @param quoter UniswapV3 Quoter contract.\\n    /// @param path Token route. Should be takerToken -> makerToken (at most two hops).\\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\\n    /// @return uniswapPaths The encoded uniswap path for each sample.\\n    /// @return uniswapGasUsed Estimated amount of gas used\\n    /// @return takerTokenAmounts Taker amounts sold at each maker token amount.\\n    function sampleBuysFromUniswapV3(\\n        IUniswapV3QuoterV2 quoter,\\n        IERC20TokenV06[] memory path,\\n        uint256[] memory makerTokenAmounts\\n    )\\n        public\\n        returns (bytes[] memory uniswapPaths, uint256[] memory uniswapGasUsed, uint256[] memory takerTokenAmounts)\\n    {\\n        IERC20TokenV06[] memory reversedPath = _reverseTokenPath(path);\\n        IUniswapV3Pool[][] memory poolPaths = _getPoolPaths(\\n            quoter,\\n            reversedPath,\\n            makerTokenAmounts[makerTokenAmounts.length - 1]\\n        );\\n\\n        takerTokenAmounts = new uint256[](makerTokenAmounts.length);\\n        uniswapPaths = new bytes[](makerTokenAmounts.length);\\n        uniswapGasUsed = new uint256[](makerTokenAmounts.length);\\n\\n        for (uint256 i = 0; i < makerTokenAmounts.length; ++i) {\\n            // Pick the best result from the pool paths.\\n            uint256 topSellAmount = 0;\\n            for (uint256 j = 0; j < poolPaths.length; ++j) {\\n                if (!isValidPoolPath(poolPaths[j])) {\\n                    continue;\\n                }\\n\\n                // quoter requires path to be reversed for buys.\\n                bytes memory uniswapPath = _toUniswapPath(reversedPath, poolPaths[j]);\\n                try quoter.quoteExactOutput{gas: QUOTE_GAS}(uniswapPath, makerTokenAmounts[i]) returns (\\n                    uint256 sellAmount,\\n                    uint160[] memory /* sqrtPriceX96AfterList */,\\n                    uint32[] memory /* initializedTicksCrossedList */,\\n                    uint256 gasUsed\\n                ) {\\n                    if (topSellAmount == 0 || topSellAmount >= sellAmount) {\\n                        topSellAmount = sellAmount;\\n                        // But the output path should still be encoded for sells.\\n                        uniswapPaths[i] = _toUniswapPath(path, _reversePoolPath(poolPaths[j]));\\n                        uniswapGasUsed[i] = gasUsed;\\n                    }\\n                } catch {}\\n            }\\n            // Break early if we can't complete the buys.\\n            if (topSellAmount == 0) {\\n                // HACK(kimpers): To avoid too many local variables, paths and gas used is set directly in the loop\\n                // then reset if no valid valid quote was found\\n                uniswapPaths[i] = \\\"\\\";\\n                uniswapGasUsed[i] = 0;\\n                break;\\n            }\\n            takerTokenAmounts[i] = topSellAmount;\\n        }\\n    }\\n\\n    /// @dev Returns `poolPaths` to sample against. The caller is responsible for not using path involinvg zero address(es).\\n    function _getPoolPaths(\\n        IUniswapV3QuoterV2 quoter,\\n        IERC20TokenV06[] memory path,\\n        uint256 inputAmount\\n    ) private returns (IUniswapV3Pool[][] memory poolPaths) {\\n        if (path.length == 2) {\\n            return _getPoolPathSingleHop(quoter, path, inputAmount);\\n        }\\n        if (path.length == 3) {\\n            return _getPoolPathTwoHop(quoter, path, inputAmount);\\n        }\\n        revert(\\\"UniswapV3Sampler/unsupported token path length\\\");\\n    }\\n\\n    function _getPoolPathSingleHop(\\n        IUniswapV3QuoterV2 quoter,\\n        IERC20TokenV06[] memory path,\\n        uint256 inputAmount\\n    ) public returns (IUniswapV3Pool[][] memory poolPaths) {\\n        poolPaths = new IUniswapV3Pool[][](2);\\n        (IUniswapV3Pool[2] memory topPools, ) = _getTopTwoPools(\\n            quoter,\\n            quoter.factory(),\\n            path[0],\\n            path[1],\\n            inputAmount\\n        );\\n\\n        uint256 pathCount = 0;\\n        for (uint256 i = 0; i < 2; i++) {\\n            IUniswapV3Pool topPool = topPools[i];\\n            poolPaths[pathCount] = new IUniswapV3Pool[](1);\\n            poolPaths[pathCount][0] = topPool;\\n            pathCount++;\\n        }\\n    }\\n\\n    function _getPoolPathTwoHop(\\n        IUniswapV3QuoterV2 quoter,\\n        IERC20TokenV06[] memory path,\\n        uint256 inputAmount\\n    ) private returns (IUniswapV3Pool[][] memory poolPaths) {\\n        IUniswapV3Factory factory = quoter.factory();\\n        poolPaths = new IUniswapV3Pool[][](4);\\n        (IUniswapV3Pool[2] memory firstHopTopPools, uint256[2] memory firstHopAmounts) = _getTopTwoPools(\\n            quoter,\\n            factory,\\n            path[0],\\n            path[1],\\n            inputAmount\\n        );\\n        (IUniswapV3Pool[2] memory secondHopTopPools, ) = _getTopTwoPools(\\n            quoter,\\n            factory,\\n            path[1],\\n            path[2],\\n            firstHopAmounts[0]\\n        );\\n\\n        uint256 pathCount = 0;\\n        for (uint256 i = 0; i < 2; i++) {\\n            for (uint256 j = 0; j < 2; j++) {\\n                poolPaths[pathCount] = new IUniswapV3Pool[](2);\\n                IUniswapV3Pool[] memory currentPath = poolPaths[pathCount];\\n                currentPath[0] = firstHopTopPools[i];\\n                currentPath[1] = secondHopTopPools[j];\\n                pathCount++;\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns top 0-2 pools and corresponding output amounts based on swaping `inputAmount`.\\n    /// Addresses in `topPools` can be zero addresses when there are pool isn't available.\\n    function _getTopTwoPools(\\n        IUniswapV3QuoterV2 quoter,\\n        IUniswapV3Factory factory,\\n        IERC20TokenV06 inputToken,\\n        IERC20TokenV06 outputToken,\\n        uint256 inputAmount\\n    ) private returns (IUniswapV3Pool[2] memory topPools, uint256[2] memory outputAmounts) {\\n        IERC20TokenV06[] memory path = new IERC20TokenV06[](2);\\n        path[0] = inputToken;\\n        path[1] = outputToken;\\n\\n        uint24[4] memory validPoolFees = [uint24(0.0001e6), uint24(0.0005e6), uint24(0.003e6), uint24(0.01e6)];\\n        for (uint256 i = 0; i < validPoolFees.length; ++i) {\\n            IUniswapV3Pool pool = factory.getPool(inputToken, outputToken, validPoolFees[i]);\\n            if (!_isValidPool(pool)) {\\n                continue;\\n            }\\n\\n            IUniswapV3Pool[] memory poolPath = new IUniswapV3Pool[](1);\\n            poolPath[0] = pool;\\n            bytes memory uniswapPath = _toUniswapPath(path, poolPath);\\n            try quoter.quoteExactInput{gas: QUOTE_GAS}(uniswapPath, inputAmount) returns (\\n                uint256 outputAmount,\\n                uint160[] memory /* sqrtPriceX96AfterList */,\\n                uint32[] memory /* initializedTicksCrossedList */,\\n                uint256 /* gasUsed */\\n            ) {\\n                // Keeping track of the top 2 pools.\\n                if (outputAmount > outputAmounts[0]) {\\n                    outputAmounts[1] = outputAmounts[0];\\n                    topPools[1] = topPools[0];\\n                    outputAmounts[0] = outputAmount;\\n                    topPools[0] = pool;\\n                } else if (outputAmount > outputAmounts[1]) {\\n                    outputAmounts[1] = outputAmount;\\n                    topPools[1] = pool;\\n                }\\n            } catch {}\\n        }\\n    }\\n\\n    function _reverseTokenPath(\\n        IERC20TokenV06[] memory tokenPath\\n    ) private pure returns (IERC20TokenV06[] memory reversed) {\\n        reversed = new IERC20TokenV06[](tokenPath.length);\\n        for (uint256 i = 0; i < tokenPath.length; ++i) {\\n            reversed[i] = tokenPath[tokenPath.length - i - 1];\\n        }\\n    }\\n\\n    function _reversePoolPath(\\n        IUniswapV3Pool[] memory poolPath\\n    ) private pure returns (IUniswapV3Pool[] memory reversed) {\\n        reversed = new IUniswapV3Pool[](poolPath.length);\\n        for (uint256 i = 0; i < poolPath.length; ++i) {\\n            reversed[i] = poolPath[poolPath.length - i - 1];\\n        }\\n    }\\n\\n    function _isValidPool(IUniswapV3Pool pool) private view returns (bool isValid) {\\n        // Check if it has been deployed.\\n        {\\n            uint256 codeSize;\\n            assembly {\\n                codeSize := extcodesize(pool)\\n            }\\n            if (codeSize == 0) {\\n                return false;\\n            }\\n        }\\n        // Must have a balance of both tokens.\\n        if (pool.token0().balanceOf(address(pool)) == 0) {\\n            return false;\\n        }\\n        if (pool.token1().balanceOf(address(pool)) == 0) {\\n            return false;\\n        }\\n        return true;\\n    }\\n\\n    function isValidPoolPath(IUniswapV3Pool[] memory poolPaths) private pure returns (bool) {\\n        for (uint256 i = 0; i < poolPaths.length; i++) {\\n            if (address(poolPaths[i]) == address(0)) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    function _toUniswapPath(\\n        IERC20TokenV06[] memory tokenPath,\\n        IUniswapV3Pool[] memory poolPath\\n    ) private view returns (bytes memory uniswapPath) {\\n        require(\\n            tokenPath.length >= 2 && tokenPath.length == poolPath.length + 1,\\n            \\\"UniswapV3Sampler/invalid path lengths\\\"\\n        );\\n        // Uniswap paths are tightly packed as:\\n        // [token0, token0token1PairFee, token1, token1Token2PairFee, token2, ...]\\n        uniswapPath = new bytes(tokenPath.length * 20 + poolPath.length * 3);\\n        uint256 o;\\n        assembly {\\n            o := add(uniswapPath, 32)\\n        }\\n        for (uint256 i = 0; i < tokenPath.length; ++i) {\\n            if (i > 0) {\\n                uint24 poolFee = poolPath[i - 1].fee();\\n                assembly {\\n                    mstore(o, shl(232, poolFee))\\n                    o := add(o, 3)\\n                }\\n            }\\n            IERC20TokenV06 token = tokenPath[i];\\n            assembly {\\n                mstore(o, shl(96, token))\\n                o := add(o, 20)\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe398d10455d4e94d497eecabd1bf676127fad3e0dcc76a0e1af7cd1aaf368727\",\"license\":\"Apache-2.0\"},\"src/sampler/UtilitySampler.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2021 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../contracts-erc20/v06/LibERC20TokenV06.sol\\\";\\n\\ncontract UtilitySampler {\\n    using LibERC20TokenV06 for IERC20TokenV06;\\n\\n    IERC20TokenV06 private immutable UTILITY_ETH_ADDRESS = IERC20TokenV06(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\n\\n    function getTokenDecimals(IERC20TokenV06[] memory tokens) public view returns (uint256[] memory decimals) {\\n        decimals = new uint256[](tokens.length);\\n        for (uint256 i = 0; i != tokens.length; i++) {\\n            decimals[i] = tokens[i] == UTILITY_ETH_ADDRESS ? 18 : tokens[i].compatDecimals();\\n        }\\n    }\\n\\n    function getBalanceOf(\\n        IERC20TokenV06[] memory tokens,\\n        address account\\n    ) public view returns (uint256[] memory balances) {\\n        balances = new uint256[](tokens.length);\\n        for (uint256 i = 0; i != tokens.length; i++) {\\n            balances[i] = tokens[i] == UTILITY_ETH_ADDRESS ? account.balance : tokens[i].compatBalanceOf(account);\\n        }\\n    }\\n\\n    function getAllowanceOf(\\n        IERC20TokenV06[] memory tokens,\\n        address account,\\n        address spender\\n    ) public view returns (uint256[] memory allowances) {\\n        allowances = new uint256[](tokens.length);\\n        for (uint256 i = 0; i != tokens.length; i++) {\\n            allowances[i] = tokens[i] == UTILITY_ETH_ADDRESS ? 0 : tokens[i].compatAllowance(account, spender);\\n        }\\n    }\\n\\n    function isContract(address account) public view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    function getGasLeft() public returns (uint256) {\\n        return gasleft();\\n    }\\n\\n    function getBlockNumber() public view returns (uint256) {\\n        return block.number;\\n    }\\n}\\n\",\"keccak256\":\"0x15214fc38d1f83cfe1c5d0680a99ebafae70d3e72c6c8cc29e9ec03aa7e17432\",\"license\":\"Apache-2.0\"},\"src/sampler/interfaces/ICurve.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6;\\n\\n// solhint-disable func-name-mixedcase\\ninterface ICurve {\\n    /// @dev Sell `sellAmount` of `fromToken` token and receive `toToken` token.\\n    ///      This function exists on later versions of Curve (USDC/DAI/USDT)\\n    /// @param i The token index being sold.\\n    /// @param j The token index being bought.\\n    /// @param sellAmount The amount of token being bought.\\n    /// @param minBuyAmount The minimum buy amount of the token being bought.\\n    function exchange_underlying(int128 i, int128 j, uint256 sellAmount, uint256 minBuyAmount) external;\\n\\n    /// @dev Get the amount of `toToken` by selling `sellAmount` of `fromToken`\\n    /// @param i The token index being sold.\\n    /// @param j The token index being bought.\\n    /// @param sellAmount The amount of token being bought.\\n    function get_dy_underlying(int128 i, int128 j, uint256 sellAmount) external returns (uint256 dy);\\n\\n    /// @dev Get the amount of `fromToken` by buying `buyAmount` of `toToken`\\n    ///      This function exists on later versions of Curve (USDC/DAI/USDT)\\n    /// @param i The token index being sold.\\n    /// @param j The token index being bought.\\n    /// @param buyAmount The amount of token being bought.\\n    function get_dx_underlying(int128 i, int128 j, uint256 buyAmount) external returns (uint256 dx);\\n\\n    /// @dev Get the underlying token address from the token index\\n    /// @param i The token index.\\n    function underlying_coins(int128 i) external returns (address tokenAddress);\\n}\\n\",\"keccak256\":\"0x5082bb6631d81978ca5c4e5a0b8a32a0d7b44de96ed6dfc53d5b7cfac735c33f\",\"license\":\"Apache-2.0\"},\"src/sampler/interfaces/IMStable.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6;\\n\\ninterface IMStable {\\n    function getSwapOutput(\\n        address _input,\\n        address _output,\\n        uint256 _quantity\\n    ) external view returns (uint256 swapOutput);\\n}\\n\",\"keccak256\":\"0xf2ce8a8ef1004c182566552d2437c72b6a2e282930e8a58835b71ccdbfa79fe0\",\"license\":\"Apache-2.0\"},\"src/sampler/interfaces/IUniswapExchangeQuotes.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6;\\n\\ninterface IUniswapExchangeQuotes {\\n    function getEthToTokenInputPrice(uint256 ethSold) external view returns (uint256 tokensBought);\\n\\n    function getEthToTokenOutputPrice(uint256 tokensBought) external view returns (uint256 ethSold);\\n\\n    function getTokenToEthInputPrice(uint256 tokensSold) external view returns (uint256 ethBought);\\n\\n    function getTokenToEthOutputPrice(uint256 ethBought) external view returns (uint256 tokensSold);\\n}\\n\",\"keccak256\":\"0x1cfc264626526de5bca6c9791043c5e83a5ab71ec43b9d5c5d1b98d399290781\",\"license\":\"Apache-2.0\"},\"src/sampler/interfaces/IUniswapV2Router01.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6;\\n\\ninterface IUniswapV2Router01 {\\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0x37a85539e16bef9325f50b2ee43ef554f9334b014833686018d3e6a363efc325\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101845760003560e01c806368be3cf2116100d6578063b90cd2fb1161007f578063c8c74a3711610059578063c8c74a3714610462578063e78ac04514610482578063fc9fe41b146104a25761018b565b8063b90cd2fb14610402578063bd71ecf614610422578063c8319084146104425761018b565b80638e5a0e07116100b05780638e5a0e07146103935780639209483b146103c25780639bf3ee35146103e25761018b565b806368be3cf214610319578063706e2f9b146103465780638aaf8fdf146103665761018b565b806340bc03ae116101385780635505000a116101125780635505000a146102aa5780635aae4e53146102d957806366a1ac6b146102f95761018b565b806340bc03ae1461025357806342cbb15c1461027357806351be4eaa146102955761018b565b8063252322b311610169578063252322b3146101f357806330d6570d146102135780633105fec1146102335761018b565b80631022742b1461019057806316279055146101c65761018b565b3661018b57005b600080fd5b34801561019c57600080fd5b506101b06101ab366004614d30565b6104c2565b6040516101bd9190615764565b60405180910390f35b3480156101d257600080fd5b506101e66101e13660046149c6565b610661565b6040516101bd9190615777565b3480156101ff57600080fd5b506101b061020e366004614a37565b61066b565b34801561021f57600080fd5b506101b061022e366004614a37565b61088f565b34801561023f57600080fd5b506101b061024e366004614aaa565b610a2f565b34801561025f57600080fd5b506101b061026e366004614fff565b610bdf565b34801561027f57600080fd5b50610288610db9565b6040516101bd9190615a20565b3480156102a157600080fd5b50610288610dbd565b3480156102b657600080fd5b506102ca6102c5366004614e99565b610dc5565b6040516101bd93929190615634565b3480156102e557600080fd5b506102ca6102f4366004614e99565b6110b4565b34801561030557600080fd5b506101b0610314366004614d30565b6113b9565b34801561032557600080fd5b50610339610334366004614b7d565b611480565b6040516101bd91906156d1565b34801561035257600080fd5b506101b0610361366004614c56565b6115e2565b34801561037257600080fd5b50610386610381366004614f02565b6116fc565b6040516101bd9190615588565b34801561039f57600080fd5b506103b36103ae366004614bec565b61189c565b6040516101bd93929190615988565b3480156103ce57600080fd5b506101b06103dd366004614fff565b611bde565b3480156103ee57600080fd5b506102886103fd36600461509b565b611e57565b34801561040e57600080fd5b506101b061041d366004614a37565b611fd3565b34801561042e57600080fd5b506101b061043d366004614c89565b612042565b34801561044e57600080fd5b506101b061045d366004614a37565b612173565b34801561046e57600080fd5b506101b061047d366004614aaa565b61237e565b34801561048e57600080fd5b506101b061049d366004614cce565b612516565b3480156104ae57600080fd5b506103b36104bd366004614bec565b612633565b6060835167ffffffffffffffff811180156104dc57600080fd5b50604051908082528060200260200182016040528015610506578160200160208202803683370190505b50905060005b84518114610659573073ffffffffffffffffffffffffffffffffffffffff16639bf3ee3562030d4087848151811061054057fe5b602002602001015187858151811061055457fe5b6020026020010151876040518563ffffffff1660e01b815260040161057b939291906159de565b60206040518083038187803b15801561059357600080fd5b5086fa935050505080156105e2575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019092526105df9181019061517e565b60015b610636573d808015610610576040519150601f19603f3d011682016040523d82523d6000602084013e610615565b606091505b50600083838151811061062457fe5b60200260200101818152505050610651565b8083838151811061064357fe5b602002602001018181525050505b60010161050c565b509392505050565b803b15155b919050565b60606106778385612a38565b81518067ffffffffffffffff8111801561069057600080fd5b506040519080825280602002602001820160405280156106ba578160200160208202803683370190505b509150600073ffffffffffffffffffffffffffffffffffffffff8616156106ea576106e58787612aab565b6106ed565b60005b9050600073ffffffffffffffffffffffffffffffffffffffff86161561071c576107178887612aab565b61071f565b60005b905060005b8381101561088357600173ffffffffffffffffffffffffffffffffffffffff881661078f5761076e84632640f62c60e01b89858151811061076157fe5b6020026020010151612b50565b87848151811061077a57fe5b6020026020010181935082815250505061084f565b73ffffffffffffffffffffffffffffffffffffffff89166107c25761076e836359e9486260e01b89858151811061076157fe5b60006107dc846359e9486260e01b8a868151811061076157fe5b92509050801561083257610811857f2640f62c0000000000000000000000000000000000000000000000000000000083612b50565b88858151811061081d57fe5b6020026020010181945082815250505061084d565b600087848151811061084057fe5b6020026020010181815250505b505b80158061086f575085828151811061086357fe5b60200260200101516000145b1561087a5750610883565b50600101610724565b50505050949350505050565b606061089b8385612a38565b81518067ffffffffffffffff811180156108b457600080fd5b506040519080825280602002602001820160405280156108de578160200160208202803683370190505b50915060005b81811015610a25578673ffffffffffffffffffffffffffffffffffffffff166372ea9076620c3500888888868151811061091a57fe5b60200260200101516040518563ffffffff1660e01b815260040161094093929190615557565b60206040518083038187803b15801561095857600080fd5b5086fa935050505080156109a7575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019092526109a49181019061517e565b60015b6109e1573d8080156109d5576040519150601f19603f3d011682016040523d82523d6000602084013e6109da565b606091505b5050610a25565b808483815181106109ee57fe5b602002602001018181525050838281518110610a0657fe5b602002602001015160001415610a1c5750610a25565b506001016108e4565b5050949350505050565b80516060908067ffffffffffffffff81118015610a4b57600080fd5b50604051908082528060200260200182016040528015610a75578160200160208202803683370190505b50915060005b81811015610bd6578573ffffffffffffffffffffffffffffffffffffffff1663d06ca61f620249f0868481518110610aaf57fe5b6020026020010151886040518463ffffffff1660e01b8152600401610ad5929190615a29565b60006040518083038187803b158015610aed57600080fd5b5086fa93505050508015610b4157506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610b3e9190810190614e09565b60015b610b7b573d808015610b6f576040519150601f19603f3d011682016040523d82523d6000602084013e610b74565b606091505b5050610bd6565b80600187510381518110610b8b57fe5b6020026020010151848381518110610b9f57fe5b602002602001018181525050838281518110610bb757fe5b602002602001015160001415610bcd5750610bd6565b50600101610a7b565b50509392505050565b80516060908067ffffffffffffffff81118015610bfb57600080fd5b50604051908082528060200260200182016040528015610c25578160200160208202803683370190505b50915060005b81811015610a255760006060886000015173ffffffffffffffffffffffffffffffffffffffff16621e84808a602001518a8a8a8881518110610c6957fe5b6020026020010151604051602401610c8393929190615809565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909416939093179092529051610d0c91906154b2565b6000604051808303818686fa925050503d8060008114610d48576040519150601f19603f3d011682016040523d82523d6000602084013e610d4d565b606091505b509150915060008215610d715781806020019051810190610d6e919061517e565b90505b80868581518110610d7e57fe5b602002602001018181525050858481518110610d9657fe5b602002602001015160001415610dae57505050610a25565b505050600101610c2b565b4390565b60005a905090565b606080606080610ded878787600189510381518110610de057fe5b6020026020010151612c99565b9050845167ffffffffffffffff81118015610e0757600080fd5b50604051908082528060200260200182016040528015610e31578160200160208202803683370190505b509150845167ffffffffffffffff81118015610e4c57600080fd5b50604051908082528060200260200182016040528015610e8057816020015b6060815260200190600190039081610e6b5790505b509350845167ffffffffffffffff81118015610e9b57600080fd5b50604051908082528060200260200182016040528015610ec5578160200160208202803683370190505b50925060005b85518110156110a9576000805b835181101561103b57610efd848281518110610ef057fe5b6020026020010151612cfe565b610f0657611033565b6060610f258a868481518110610f1857fe5b6020026020010151612d6e565b90508a73ffffffffffffffffffffffffffffffffffffffff1663cdca1753620aae60838c8881518110610f5457fe5b60200260200101516040518463ffffffff1660e01b8152600401610f79929190615782565b600060405180830381600088803b158015610f9357600080fd5b5087f193505050508015610fe757506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610fe49190810190615196565b60015b610ff057611031565b83871161102c57839650848c898151811061100757fe5b6020026020010181905250808b898151811061101f57fe5b6020026020010181815250505b505050505b505b600101610ed8565b5080611088576040518060200160405280600081525086838151811061105d57fe5b6020026020010181905250600085838151811061107657fe5b602002602001018181525050506110a9565b8084838151811061109557fe5b602090810291909101015250600101610ecb565b505093509350939050565b6060806060806110c386612ef9565b905060606110dc88838860018a510381518110610de057fe5b9050855167ffffffffffffffff811180156110f657600080fd5b50604051908082528060200260200182016040528015611120578160200160208202803683370190505b509250855167ffffffffffffffff8111801561113b57600080fd5b5060405190808252806020026020018201604052801561116f57816020015b606081526020019060019003908161115a5790505b509450855167ffffffffffffffff8111801561118a57600080fd5b506040519080825280602002602001820160405280156111b4578160200160208202803683370190505b50935060005b86518110156113ad576000805b835181101561133f576111df848281518110610ef057fe5b6111e857611337565b60606111fa86868481518110610f1857fe5b90508b73ffffffffffffffffffffffffffffffffffffffff16632f80bb1d620aae60838d888151811061122957fe5b60200260200101516040518463ffffffff1660e01b815260040161124e929190615782565b600060405180830381600088803b15801561126857600080fd5b5087f1935050505080156112bc57506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526112b99190810190615196565b60015b6112c557611335565b8615806112d25750838710155b15611330578396506112ff8f6112fa8b89815181106112ed57fe5b6020026020010151612f9f565b612d6e565b8d898151811061130b57fe5b6020026020010181905250808c898151811061132357fe5b6020026020010181815250505b505050505b505b6001016111c7565b508061138c576040518060200160405280600081525087838151811061136157fe5b6020026020010181905250600086838151811061137a57fe5b602002602001018181525050506113ad565b8085838151811061139957fe5b6020908102919091010152506001016111ba565b50505093509350939050565b60606113c68484846104c2565b905060005b8451811015610659578181815181106113e057fe5b60200260200101516000146114785761145f8282815181106113fe57fe5b602002602001015186838151811061141257fe5b6020026020010151606001516fffffffffffffffffffffffffffffffff1687848151811061143c57fe5b6020026020010151604001516fffffffffffffffffffffffffffffffff16613045565b82828151811061146b57fe5b6020026020010181815250505b6001016113cb565b60608167ffffffffffffffff8111801561149957600080fd5b506040519080825280602002602001820160405280156114d357816020015b6114c0614504565b8152602001906001900390816114b85790505b50905060005b8083146115db5760018282815181106114ee57fe5b60209081029190910181015191151591015283838281811061150c57fe5b905060200281019061151e9190615a8c565b1515905061152b576115d3565b3084848381811061153857fe5b905060200281019061154a9190615a8c565b6040516115589291906154a2565b6000604051808303816000865af19150503d8060008114611595576040519150601f19603f3d011682016040523d82523d6000602084013e61159a565b606091505b508383815181106115a757fe5b60200260200101516020018484815181106115be57fe5b60209081029190910101519190915290151590525b6001016114d9565b5092915050565b6060815167ffffffffffffffff811180156115fc57600080fd5b50604051908082528060200260200182016040528015611626578160200160208202803683370190505b50905060005b825181146116f6577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1683828151811061167757fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16146116d1576116cc8382815181106116a957fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1661306f565b6116d4565b60125b60ff168282815181106116e357fe5b602090810291909101015260010161162c565b50919050565b6040805160028082526060828101909352816020015b606081526020019060019003908161171257905050905061173161451c565b6117e3858673ffffffffffffffffffffffffffffffffffffffff1663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561177b57600080fd5b505afa15801561178f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b391906149e2565b866000815181106117c057fe5b6020026020010151876001815181106117d557fe5b602002602001015187613141565b5090506000805b600281101561189257600083826002811061180157fe5b60200201516040805160018082528183019092529192508160200160208202803683370190505085848151811061183457fe5b60200260200101819052508085848151811061184c57fe5b602002602001015160008151811061186057fe5b73ffffffffffffffffffffffffffffffffffffffff9092166020928302919091019091015250600191820191016117ea565b5050509392505050565b6118a461453a565b6118ac61453a565b60608367ffffffffffffffff811180156118c557600080fd5b506040519080825280602002602001820160405280156118ef578160200160208202803683370190505b50905060608467ffffffffffffffff8111801561190b57600080fd5b50604051908082528060200260200182016040528015611935578160200160208202803683370190505b50905060005b8751811015611a6557600060603073ffffffffffffffffffffffffffffffffffffffff168a848151811061196b57fe5b602002602001015160405161198091906154b2565b6000604051808303816000865af19150503d80600081146119bd576040519150601f19603f3d011682016040523d82523d6000602084013e6119c2565b606091505b50915091508115611a5b5760606119d9828a6134af565b90508460018a03815181106119ea57fe5b60200260200101518160018b0381518110611a0157fe5b60200260200101511115611a59578388526020880182905260005b89811015611a5757818181518110611a3057fe5b6020026020010151868281518110611a4457fe5b6020908102919091010152600101611a1c565b505b505b505060010161193b565b50806001860381518110611a7557fe5b602002602001015160001415611a8b5750611bd5565b60005b86518110156110a957611ab4878281518110611aa657fe5b6020026020010151836134f9565b600060603073ffffffffffffffffffffffffffffffffffffffff16898481518110611adb57fe5b6020026020010151604051611af091906154b2565b6000604051808303816000865af19150503d8060008114611b2d576040519150601f19603f3d011682016040523d82523d6000602084013e611b32565b606091505b50915091508115611bcb576060611b49828a6134af565b90508560018a0381518110611b5a57fe5b60200260200101518160018b0381518110611b7157fe5b60200260200101511115611bc9578387526020870182905260005b89811015611bc757818181518110611ba057fe5b6020026020010151878281518110611bb457fe5b6020908102919091010152600101611b8c565b505b505b5050600101611a8e565b93509350939050565b60408401516060907fffffffff0000000000000000000000000000000000000000000000000000000016611c78576040805160608101909152611c719080611c2a868960808401615827565b60405160208183030381529060405281526020018688604051602001611c51929190615827565b6040516020818303038152906040528152602001613544815250836136db565b9050611e4f565b81518067ffffffffffffffff81118015611c9157600080fd5b50604051908082528060200260200182016040528015611cbb578160200160208202803683370190505b50915060005b81811015610a255760006060886000015173ffffffffffffffffffffffffffffffffffffffff16621e84808a604001518a8a8a8881518110611cff57fe5b6020026020010151604051602401611d1993929190615809565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909416939093179092529051611da291906154b2565b6000604051808303818686fa925050503d8060008114611dde576040519150601f19603f3d011682016040523d82523d6000602084013e611de3565b606091505b509150915060008215611e075781806020019051810190611e04919061517e565b90505b80868581518110611e1457fe5b602002602001018181525050858481518110611e2c57fe5b602002602001015160001415611e4457505050610a25565b505050600101611cc1565b949350505050565b60008083516003811115611e6757fe5b1480611e7f5750600183516003811115611e7d57fe5b145b80611e9e575060408401516fffffffffffffffffffffffffffffffff16155b80611ebd575060608401516fffffffffffffffffffffffffffffffff16155b15611eca57506000611fcc565b611ed2614554565b6000808473ffffffffffffffffffffffffffffffffffffffff16631fb0979588886040518363ffffffff1660e01b8152600401611f109291906159c1565b60a06040518083038186803b158015611f2857600080fd5b505afa158015611f3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f6091906150db565b91945092509050600183602001516004811115611f7957fe5b141580611f84575080155b80611fa45750865173ffffffffffffffffffffffffffffffffffffffff16155b15611fb55760009350505050611fcc565b506fffffffffffffffffffffffffffffffff169150505b9392505050565b6040805160608181019092526120399080611ff28689608084016154ef565b604051602081830303815290604052815260200186886040516020016120199291906154ef565b60405160208183030381529060405281526020016138ee815250836136db565b95945050505050565b6060825167ffffffffffffffff8111801561205c57600080fd5b50604051908082528060200260200182016040528015612086578160200160208202803683370190505b50905060005b835181146115db577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168482815181106120d757fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff161461213b576121368385838151811061210a57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16613a2090919063ffffffff16565b612154565b8273ffffffffffffffffffffffffffffffffffffffff16315b82828151811061216057fe5b602090810291909101015260010161208c565b606061217f8385612a38565b81518067ffffffffffffffff8111801561219857600080fd5b506040519080825280602002602001820160405280156121c2578160200160208202803683370190505b509150600073ffffffffffffffffffffffffffffffffffffffff8616156121f2576121ed8787612aab565b6121f5565b60005b9050600073ffffffffffffffffffffffffffffffffffffffff8616156122245761221f8887612aab565b612227565b60005b905060005b8381101561088357600173ffffffffffffffffffffffffffffffffffffffff881661228a57612269846395b68fe760e01b89858151811061076157fe5b87848151811061227557fe5b6020026020010181935082815250505061234a565b73ffffffffffffffffffffffffffffffffffffffff89166122bd576122698363cd7724c360e01b89858151811061076157fe5b60006122d7856395b68fe760e01b8a868151811061076157fe5b92509050801561232d5761230c847fcd7724c30000000000000000000000000000000000000000000000000000000083612b50565b88858151811061231857fe5b60200260200101819450828152505050612348565b600087848151811061233b57fe5b6020026020010181815250505b505b80158061236a575085828151811061235e57fe5b60200260200101516000145b156123755750610883565b5060010161222c565b80516060908067ffffffffffffffff8111801561239a57600080fd5b506040519080825280602002602001820160405280156123c4578160200160208202803683370190505b50915060005b81811015610bd6578573ffffffffffffffffffffffffffffffffffffffff16631f00ca74620249f08684815181106123fe57fe5b6020026020010151886040518463ffffffff1660e01b8152600401612424929190615a29565b60006040518083038187803b15801561243c57600080fd5b5086fa9350505050801561249057506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261248d9190810190614e09565b60015b6124be573d808015610b6f576040519150601f19603f3d011682016040523d82523d6000602084013e610b74565b806000815181106124cb57fe5b60200260200101518483815181106124df57fe5b6020026020010181815250508382815181106124f757fe5b60200260200101516000141561250d5750610bd6565b506001016123ca565b6060835167ffffffffffffffff8111801561253057600080fd5b5060405190808252806020026020018201604052801561255a578160200160208202803683370190505b50905060005b84518114610659577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168582815181106125ab57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16146126115761260c84848784815181106125df57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16613b429092919063ffffffff16565b612614565b60005b82828151811061262057fe5b6020908102919091010152600101612560565b61263b61453a565b61264361453a565b60608367ffffffffffffffff8111801561265c57600080fd5b50604051908082528060200260200182016040528015612686578160200160208202803683370190505b50905060005b848110156126d4577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8282815181106126c157fe5b602090810291909101015260010161268c565b5060608467ffffffffffffffff811180156126ee57600080fd5b50604051908082528060200260200182016040528015612718578160200160208202803683370190505b50905060005b85811015612766577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82828151811061275357fe5b602090810291909101015260010161271e565b5060005b86518110156128a657600060603073ffffffffffffffffffffffffffffffffffffffff1689848151811061279a57fe5b60200260200101516040516127af91906154b2565b6000604051808303816000865af19150503d80600081146127ec576040519150601f19603f3d011682016040523d82523d6000602084013e6127f1565b606091505b5091509150811561289c576060612808828a6134af565b905060008160018b038151811061281b57fe5b6020026020010151905060008111801561284a57508560018b038151811061283f57fe5b602002602001015181105b15612899578488526020880183905260005b8a8110156128975782818151811061287057fe5b602002602001015187828151811061288457fe5b602090810291909101015260010161285c565b505b50505b505060010161276a565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8160018703815181106128d757fe5b602002602001015114156128eb5750611bd5565b60005b875181146110a957612905888281518110611aa657fe5b600060603073ffffffffffffffffffffffffffffffffffffffff168a848151811061292c57fe5b602002602001015160405161294191906154b2565b6000604051808303816000865af19150503d806000811461297e576040519150601f19603f3d011682016040523d82523d6000602084013e612983565b606091505b50915091508115612a2e57606061299a828a6134af565b905060008160018b03815181106129ad57fe5b602002602001015190506000811180156129dc57508660018b03815181106129d157fe5b602002602001015181105b15612a2b578489526020890183905260005b8a811015612a2957828181518110612a0257fe5b6020026020010151888281518110612a1657fe5b60209081029190910101526001016129ee565b505b50505b50506001016128ee565b8073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612aa7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a9e9061583f565b60405180910390fd5b5050565b6040517f06f2bf6200000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff8416906306f2bf6290612b009085906004016154ce565b60206040518083038186803b158015612b1857600080fd5b505afa158015612b2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fcc91906149e2565b60008073ffffffffffffffffffffffffffffffffffffffff8516612b7357612c91565b60608573ffffffffffffffffffffffffffffffffffffffff16620249f08686604051602401612ba29190615a20565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909416939093179092529051612c2b91906154b2565b6000604051808303818686fa925050503d8060008114612c67576040519150601f19603f3d011682016040523d82523d6000602084013e612c6c565b606091505b5090925090508115612c8f5780806020019051810190612c8c919061517e565b92505b505b935093915050565b6060825160021415612cb757612cb08484846116fc565b9050611fcc565b825160031415612ccc57612cb0848484613c70565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a9e906158f9565b6000805b8251811015612d6557600073ffffffffffffffffffffffffffffffffffffffff16838281518110612d2f57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff161415612d5d576000915050610666565b600101612d02565b50600192915050565b60606002835110158015612d86575081516001018351145b612dbc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a9e9061589c565b815160030283516014020167ffffffffffffffff81118015612ddd57600080fd5b506040519080825280601f01601f191660200182016040528015612e08576020820181803683370190505b5090506020810160005b8451811015612ef1578015612ec4576000846001830381518110612e3257fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1663ddca3f436040518163ffffffff1660e01b815260040160206040518083038186803b158015612e7f57600080fd5b505afa158015612e93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eb7919061515b565b60e81b8352506003909101905b6000858281518110612ed257fe5b602090810291909101015160601b835250601490910190600101612e12565b505092915050565b6060815167ffffffffffffffff81118015612f1357600080fd5b50604051908082528060200260200182016040528015612f3d578160200160208202803683370190505b50905060005b82518110156116f657826001828551030381518110612f5e57fe5b6020026020010151828281518110612f7257fe5b73ffffffffffffffffffffffffffffffffffffffff90921660209283029190910190910152600101612f43565b6060815167ffffffffffffffff81118015612fb957600080fd5b50604051908082528060200260200182016040528015612fe3578160200160208202803683370190505b50905060005b82518110156116f65782600182855103038151811061300457fe5b602002602001015182828151811061301857fe5b73ffffffffffffffffffffffffffffffffffffffff90921660209283029190910190910152600101612fe9565b6000611e4f83613069613059826001613edf565b6130638887613f03565b90613f34565b90613f50565b600060129050600060608373ffffffffffffffffffffffffffffffffffffffff166040518060400160405280600481526020017f313ce567000000000000000000000000000000000000000000000000000000008152506040516130d391906154b2565b600060405180830381855afa9150503d806000811461310e576040519150601f19603f3d011682016040523d82523d6000602084013e613113565b606091505b509150915081801561312757506020815110155b1561313a57613137816000613f7a565b92505b5050919050565b61314961451c565b61315161451c565b6040805160028082526060808301845292602083019080368337019050509050858160008151811061317f57fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505084816001815181106131c757fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050613209614576565b5060408051608081018252606481526101f46020820152610bb891810191909152612710606082015260005b60048110156134a25760008973ffffffffffffffffffffffffffffffffffffffff16631698ee828a8a86866004811061326a57fe5b60200201516040518463ffffffff1660e01b815260040161328d939291906157a4565b60206040518083038186803b1580156132a557600080fd5b505afa1580156132b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132dd91906149e2565b90506132e881613f86565b6132f2575061349a565b60408051600180825281830190925260609160208083019080368337019050509050818160008151811061332257fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060606133688683612d6e565b90508c73ffffffffffffffffffffffffffffffffffffffff1663cdca1753620aae60838c6040518463ffffffff1660e01b81526004016133a9929190615782565b600060405180830381600088803b1580156133c357600080fd5b5087f19350505050801561341757506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526134149190810190615196565b60015b61342057613496565b8a51841115613461578a516020808d01919091528c5173ffffffffffffffffffffffffffffffffffffffff908116918e0191909152848c5287168c52613491565b60208b0151841115613491576020808c0185905273ffffffffffffffffffffffffffffffffffffffff8816908d01525b505050505b5050505b600101613235565b5050509550959350505050565b815160609060206002840102810390826134ca8684846141c6565b90506134d9816000602061425d565b808060200190518101906134ed9190614e09565b93505050505b92915050565b60005b815181101561353f576000600182845103036020028451039050600083838151811061352457fe5b602090810291909101015191850191909152506001016134fc565b505050565b60008061354f614594565b858060200190518101906135639190614f64565b9150915060008580602001905181019061357d9190614f48565b905060006060307f40bc03ae000000000000000000000000000000000000000000000000000000008587866135b18c614268565b6040516024016135c49493929190615956565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090941693909317909252905161364d91906154b2565b600060405180830381855afa9150503d8060008114613688576040519150601f19603f3d011682016040523d82523d6000602084013e61368d565b606091505b5091509150816136a557600095505050505050611fcc565b808060200190518101906136b99190614e09565b6000815181106136c557fe5b6020026020010151955050505050509392505050565b6060815167ffffffffffffffff811180156136f557600080fd5b5060405190808252806020026020018201604052801561371f578160200160208202803683370190505b509050815160001415613731576134f3565b6000613762846000015185602001518560008151811061374d57fe5b6020026020010151876040015163ffffffff16565b90508061376f57506134f3565b600061378c8560200151866000015184886040015163ffffffff16565b90508061379a5750506134f3565b60005b84518110156138e5576000805b600581101561388e576137d18784815181106137c257fe5b602002602001015185876142a9565b9450846137dd5761388e565b6137ec612715612710876142a9565b9450846137f85761388e565b600061381589602001518a60000151888c6040015163ffffffff16565b905080613822575061388e565b80945087848151811061383157fe5b602002602001015185106138855787848151811061384b57fe5b602002602001015161271089868151811061386257fe5b60200260200101518703028161387457fe5b04925060058311613885575061388e565b506001016137aa565b5080158061389c5750600581115b156138a757506138e5565b6138c58683815181106138b657fe5b602002602001015184866142a9565b8583815181106138d157fe5b60209081029190910101525060010161379d565b50505092915050565b60008060008580602001905181019061390791906149fe565b9150915060008580602001905181019061392191906149e2565b9050306330d6570d8385846139358a614268565b6040518563ffffffff1660e01b81526004016139549493929190615516565b60006040518083038186803b15801561396c57600080fd5b505afa9250505080156139bf57506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526139bc9190810190614e09565b60015b613a00573d8080156139ed576040519150601f19603f3d011682016040523d82523d6000602084013e6139f2565b606091505b506000945050505050611fcc565b80600081518110613a0d57fe5b6020026020010151945050505050611fcc565b60008060608473ffffffffffffffffffffffffffffffffffffffff166370a0823160e01b85604051602401613a5591906154ce565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909416939093179092529051613ade91906154b2565b600060405180830381855afa9150503d8060008114613b19576040519150601f19603f3d011682016040523d82523d6000602084013e613b1e565b606091505b5091509150818015613b3257506020815110155b15612ef157612039816000613f7a565b60008060608573ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e60e01b8686604051602401613b799291906154ef565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909416939093179092529051613c0291906154b2565b600060405180830381855afa9150503d8060008114613c3d576040519150601f19603f3d011682016040523d82523d6000602084013e613c42565b606091505b5091509150818015613c5657506020815110155b15610bd657613c66816000613f7a565b9695505050505050565b606060008473ffffffffffffffffffffffffffffffffffffffff1663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b158015613cba57600080fd5b505afa158015613cce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613cf291906149e2565b60408051600480825260a08201909252919250816020015b6060815260200190600190039081613d0a579050509150613d2961451c565b613d3161451c565b613d66878488600081518110613d4357fe5b602002602001015189600181518110613d5857fe5b602002602001015189613141565b91509150613d7261451c565b613db8888589600181518110613d8457fe5b60200260200101518a600281518110613d9957fe5b602002602001015186600060028110613dae57fe5b6020020151613141565b5090506000805b6002811015613ed25760005b6002811015613ec957604080516002808252606082018352909160208301908036833701905050888481518110613dfe57fe5b60200260200101819052506060888481518110613e1757fe5b60200260200101519050868360028110613e2d57fe5b602002015181600081518110613e3f57fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050848260028110613e8557fe5b602002015181600181518110613e9757fe5b73ffffffffffffffffffffffffffffffffffffffff909216602092830291909101909101525060019283019201613dcb565b50600101613dbf565b5050505050509392505050565b600082821115613efd57613efd613ef860028585614301565b6143a6565b50900390565b600082613f12575060006134f3565b82820282848281613f1f57fe5b0414611fcc57611fcc613ef860018686614301565b600082820183811015611fcc57611fcc613ef860008686614301565b600081613f6657613f66613ef860038585614301565b6000828481613f7157fe5b04949350505050565b6000611fcc83836143ae565b6000813b80613f99576000915050610666565b508173ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015613fe057600080fd5b505afa158015613ff4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061401891906149e2565b73ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b815260040161405091906154ce565b60206040518083038186803b15801561406857600080fd5b505afa15801561407c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140a0919061517e565b6140ac57506000610666565b8173ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156140f257600080fd5b505afa158015614106573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061412a91906149e2565b73ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b815260040161416291906154ce565b60206040518083038186803b15801561417a57600080fd5b505afa15801561418e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141b2919061517e565b6141be57506000610666565b506001919050565b6060818311156141df576141df613ef8600085856143d8565b83518211156141f8576141f8613ef860018487516143d8565b82820367ffffffffffffffff8111801561421157600080fd5b506040519080825280601f01601f19166020018201604052801561423c576020820181803683370190505b509050611fcc61424b826143f7565b84614255876143f7565b0183516143fd565b61353f8383836144dd565b60408051600180825281830190925260609160208083019080368337019050509050818160008151811061429857fe5b602002602001018181525050919050565b60008315806142b6575081155b806142bf575082155b156142cc57506000611fcc565b838202828582816142d957fe5b04146142e9576000915050611fcc565b83600185038201816142f757fe5b0495945050505050565b606063e946c1bb60e01b848484604051602401614320939291906157d9565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915290509392505050565b805160208201fd5b600081602001835110156143cf576143cf613ef860058551856020016143d8565b50016020015190565b6060632800659560e01b848484604051602401614320939291906157fb565b60200190565b6020811015614444578151835160208390036101000a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018019909216911617835261353f565b828214156144515761353f565b8282111561448b5760208103905080820181840181515b82851015614483578451865260209586019590940193614468565b90525061353f565b60208103905080820181840183515b818612156144d457825182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0928301929091019061449a565b85525050505050565b81602001835110156144fc576144fc613ef860058551856020016143d8565b910160200152565b60408051808201909152606081526000602082015290565b60405180604001604052806002906020820280368337509192915050565b604051806040016040528060008152602001606081525090565b6040805160608101909152600080825260208201908152600060209091015290565b60405180608001604052806004906020820280368337509192915050565b604080516060810182526000808252602082018190529181019190915290565b80356134f381615b86565b6000601f83818401126145d0578182fd5b82356145e36145de82615b1d565b615af6565b818152925060208084019085810160005b84811015614694578135880189603f82011261460f57600080fd5b8381013567ffffffffffffffff81111561462857600080fd5b614657857fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08a84011601615af6565b81815260408c8184860101111561466d57600080fd5b828185018884013750600091810186019190915285525092820192908201906001016145f4565b50505050505092915050565b600082601f8301126146b0578081fd5b81356146be6145de82615b1d565b8181529150602080830190848101818402860182018710156146df57600080fd5b60005b848110156147075781356146f581615b86565b845292820192908201906001016146e2565b505050505092915050565b600082601f830112614722578081fd5b81356147306145de82615b1d565b818152915060208083019084810160808085028701830188101561475357600080fd5b60005b85811015614694576147688984614935565b85529383019391810191600101614756565b600082601f83011261478a578081fd5b81356147986145de82615b1d565b8181529150602080830190848101818402860182018710156147b957600080fd5b60005b84811015614707578135845292820192908201906001016147bc565b600082601f8301126147e8578081fd5b81516147f66145de82615b1d565b81815291506020808301908481018184028601820187101561481757600080fd5b6000805b8581101561469457825163ffffffff81168114614836578283fd5b8552938301939183019160010161481b565b600061018080838503121561485b578182fd5b61486481615af6565b91505061487183836145b4565b815261488083602084016145b4565b60208201526148928360408401614998565b60408201526148a48360608401614998565b60608201526148b68360808401614998565b60808201526148c88360a084016145b4565b60a08201526148da8360c084016145b4565b60c08201526148ec8360e084016145b4565b60e0820152610100614900848285016145b4565b90820152610120828101359082015261014061491e848285016149ae565b818301525061016080830135818301525092915050565b600060808284031215614946578081fd5b6149506080615af6565b905081356004811061496157600080fd5b8152602082013560ff8116811461497757600080fd5b80602083015250604082013560408201526060820135606082015292915050565b80356134f381615be8565b80516134f381615b86565b803567ffffffffffffffff811681146134f357600080fd5b6000602082840312156149d7578081fd5b8135611fcc81615b86565b6000602082840312156149f3578081fd5b8151611fcc81615b86565b60008060408385031215614a10578081fd5b8251614a1b81615b86565b6020840151909250614a2c81615b86565b809150509250929050565b60008060008060808587031215614a4c578182fd5b8435614a5781615b86565b93506020850135614a6781615b86565b92506040850135614a7781615b86565b9150606085013567ffffffffffffffff811115614a92578182fd5b614a9e8782880161477a565b91505092959194509250565b600080600060608486031215614abe578081fd5b8335614ac981615b86565b925060208481013567ffffffffffffffff80821115614ae6578384fd5b818701915087601f830112614af9578384fd5b8135614b076145de82615b1d565b81815284810190848601868402860187018c1015614b23578788fd5b8795505b83861015614b4d57614b398c826145b4565b835260019590950194918601918601614b27565b50965050506040870135925080831115614b65578384fd5b5050614b738682870161477a565b9150509250925092565b60008060208385031215614b8f578182fd5b823567ffffffffffffffff80821115614ba6578384fd5b818501915085601f830112614bb9578384fd5b813581811115614bc7578485fd5b8660208083028501011115614bda578485fd5b60209290920196919550909350505050565b600080600060608486031215614c00578081fd5b833567ffffffffffffffff80821115614c17578283fd5b614c23878388016145bf565b94506020860135915080821115614c38578283fd5b50614c45868287016145bf565b925050604084013590509250925092565b600060208284031215614c67578081fd5b813567ffffffffffffffff811115614c7d578182fd5b611e4f848285016146a0565b60008060408385031215614c9b578182fd5b823567ffffffffffffffff811115614cb1578283fd5b614cbd858286016146a0565b9250506020830135614a2c81615b86565b600080600060608486031215614ce2578081fd5b833567ffffffffffffffff811115614cf8578182fd5b614d04868287016146a0565b9350506020840135614d1581615b86565b91506040840135614d2581615b86565b809150509250925092565b600080600060608486031215614d44578081fd5b833567ffffffffffffffff80821115614d5b578283fd5b818601915086601f830112614d6e578283fd5b8135614d7c6145de82615b1d565b80828252602080830192508086016101808c838288028a01011115614d9f578889fd5b8897505b85881015614dcb57614db58d83614848565b8552600197909701969382019390810190614da3565b50919850890135945050505080821115614de3578283fd5b50614df086828701614712565b925050614e0085604086016145b4565b90509250925092565b60006020808385031215614e1b578182fd5b825167ffffffffffffffff811115614e31578283fd5b8301601f81018513614e41578283fd5b8051614e4f6145de82615b1d565b8181528381019083850185840285018601891015614e6b578687fd5b8694505b83851015614e8d578051835260019490940193918501918501614e6f565b50979650505050505050565b600080600060608486031215614ead578081fd5b8335614eb881615b86565b9250602084013567ffffffffffffffff80821115614ed4578283fd5b614ee0878388016146a0565b93506040860135915080821115614ef5578283fd5b50614b738682870161477a565b600080600060608486031215614f16578081fd5b8335614f2181615b86565b9250602084013567ffffffffffffffff811115614f3c578182fd5b614c45868287016146a0565b600060208284031215614f59578081fd5b8151611fcc81615bd9565b6000808284036080811215614f77578283fd5b8351614f8281615bd9565b925060607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe082011215614fb3578182fd5b50614fbe6060615af6565b6020840151614fcc81615b86565b81526040840151614fdc81615bab565b60208201526060840151614fef81615bab565b6040820152919491935090915050565b60008060008084860360c0811215615015578283fd5b6060811215615022578283fd5b5061502d6060615af6565b853561503881615b86565b8152602086013561504881615bab565b6020820152604086013561505b81615bab565b60408201529350606085013561507081615bd9565b9250608085013561508081615bd9565b915060a085013567ffffffffffffffff811115614a92578182fd5b600080600061022084860312156150b0578081fd5b6150ba8585614848565b92506150ca856101808601614935565b9150610200840135614d2581615b86565b600080600083850360a08112156150f0578182fd5b60608112156150fd578182fd5b506151086060615af6565b8451815260208501516005811061511d578283fd5b6020820152604085015161513081615be8565b6040820152606085015190935061514681615be8565b60808501519092508015158114614d25578182fd5b60006020828403121561516c578081fd5b815162ffffff81168114611fcc578182fd5b60006020828403121561518f578081fd5b5051919050565b600080600080608085870312156151ab578182fd5b8451935060208086015167ffffffffffffffff808211156151ca578485fd5b818801915088601f8301126151dd578485fd5b81516151eb6145de82615b1d565b81815284810190848601868402860187018d1015615207578889fd5b8895505b838610156152315761521d8d826149a3565b83526001959095019491860191860161520b565b5060408b0151909850945050508083111561524a578485fd5b5050615258878288016147d8565b606096909601519497939650505050565b73ffffffffffffffffffffffffffffffffffffffff169052565b6000815180845260208085019450808401835b838110156152b257815187529582019590820190600101615296565b509495945050505050565b600081518084526152d5816020860160208601615b56565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b805173ffffffffffffffffffffffffffffffffffffffff1682526020808201517fffffffff000000000000000000000000000000000000000000000000000000009081169184019190915260409182015116910152565b600081518352602082015160406020850152611e4f60408501826152bd565b615388828251615269565b602081015161539a6020840182615269565b5060408101516153ad604084018261547e565b5060608101516153c0606084018261547e565b5060808101516153d3608084018261547e565b5060a08101516153e660a0840182615269565b5060c08101516153f960c0840182615269565b5060e081015161540c60e0840182615269565b506101008082015161542082850182615269565b505061012081810151908301526101408082015161544082850182615494565b505061016090810151910152565b80516004811061545a57fe5b825260208181015160ff169083015260408082015190830152606090810151910152565b6fffffffffffffffffffffffffffffffff169052565b67ffffffffffffffff169052565b6000828483379101908152919050565b600082516154c4818460208701615b56565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b600073ffffffffffffffffffffffffffffffffffffffff8087168352808616602084015280851660408401525060806060830152613c666080830184615283565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b6000602080830181845280855180835260408601915060408482028701019250838701855b82811015615627578785037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0018452815180518087529087019087870190895b81811015615611576155ff8451615b3d565b835292890192918901916001016155ed565b50909650505092850192908501906001016155ad565b5092979650505050505050565b60006060820160608352808651808352608085019150602092506080838202860101838901855b838110156156a7577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff808884030185526156958383516152bd565b9486019492509085019060010161565b565b5050858103848701526156ba8189615283565b93505050508281036040840152613c668185615283565b60208082528251828201819052600091906040908185019080840286018301878501865b83811015615756577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc089840301855281518051878552615737888601826152bd565b91890151151594890194909452948701949250908601906001016156f5565b509098975050505050505050565b600060208252611fcc6020830184615283565b901515815260200190565b60006040825261579560408301856152bd565b90508260208301529392505050565b73ffffffffffffffffffffffffffffffffffffffff938416815291909216602082015262ffffff909116604082015260600190565b60608101600485106157e757fe5b938152602081019290925260409091015290565b60608101600885106157e757fe5b600f93840b81529190920b6020820152604081019190915260600190565b600f83900b815260808101611fcc6020830184615307565b60208082526025908201527f455243323042726964676553616d706c65722f494e56414c49445f544f4b454e60408201527f5f50414952000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526025908201527f556e6973776170563353616d706c65722f696e76616c69642070617468206c6560408201527f6e67746873000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602e908201527f556e6973776170563353616d706c65722f756e737570706f7274656420746f6b60408201527f656e2070617468206c656e677468000000000000000000000000000000000000606082015260800190565b60006159628287615307565b84600f0b606083015283600f0b608083015260c060a0830152613c6660c0830184615283565b60006060825261599b606083018661535e565b82810360208401526159ad818661535e565b90508281036040840152613c668185615283565b61020081016159d0828561537d565b611fcc61018083018461544e565b61022081016159ed828661537d565b6159fb61018083018561544e565b73ffffffffffffffffffffffffffffffffffffffff8316610200830152949350505050565b90815260200190565b60006040820184835260206040818501528185518084526060860191508287019350845b81811015615a7f57845173ffffffffffffffffffffffffffffffffffffffff1683529383019391830191600101615a4d565b5090979650505050505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112615ac0578283fd5b83018035915067ffffffffffffffff821115615ada578283fd5b602001915036819003821315615aef57600080fd5b9250929050565b60405181810167ffffffffffffffff81118282101715615b1557600080fd5b604052919050565b600067ffffffffffffffff821115615b33578081fd5b5060209081020190565b73ffffffffffffffffffffffffffffffffffffffff1690565b60005b83811015615b71578181015183820152602001615b59565b83811115615b80576000848401525b50505050565b73ffffffffffffffffffffffffffffffffffffffff81168114615ba857600080fd5b50565b7fffffffff0000000000000000000000000000000000000000000000000000000081168114615ba857600080fd5b80600f0b8114615ba857600080fd5b6fffffffffffffffffffffffffffffffff81168114615ba857600080fdfea2646970667358221220f6b8952979f44a5d4e508cbe208c1db405f78f096b81846685d6c7202af7eeb864736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "batchCall(bytes[])": {
        "details": "Call multiple public functions on this contract in a single transaction.",
        "params": {
          "callDatas": "ABI-encoded call data for each function call."
        },
        "returns": {
          "callResults": "ABI-encoded results data for each call."
        }
      },
      "getLimitOrderFillableMakerAssetAmounts((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256)[],(uint8,uint8,bytes32,bytes32)[],address)": {
        "details": "Queries the fillable taker asset amounts of native orders.      Effectively ignores orders that have empty signatures or",
        "params": {
          "exchange": "The V4 exchange.",
          "orderSignatures": "Signatures for each respective order in `orders`.",
          "orders": "Native orders to query."
        },
        "returns": {
          "orderFillableMakerAssetAmounts": "How much maker asset can be filled         by each order in `orders`."
        }
      },
      "getLimitOrderFillableTakerAmount((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256),(uint8,uint8,bytes32,bytes32),address)": {
        "details": "Get the fillable taker amount of an order, taking into account      order state, maker fees, and maker balances."
      },
      "getLimitOrderFillableTakerAssetAmounts((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256)[],(uint8,uint8,bytes32,bytes32)[],address)": {
        "details": "Queries the fillable taker asset amounts of native orders.      Effectively ignores orders that have empty signatures or      maker/taker asset amounts (returning 0).",
        "params": {
          "exchange": "The V4 exchange.",
          "orderSignatures": "Signatures for each respective order in `orders`.",
          "orders": "Native limit orders to query."
        },
        "returns": {
          "orderFillableTakerAssetAmounts": "How much taker asset can be filled         by each order in `orders`."
        }
      },
      "sampleBuysFromCurve((address,bytes4,bytes4),int128,int128,uint256[])": {
        "details": "Sample buy quotes from Curve.",
        "params": {
          "curveInfo": "Curve information specific to this token pair.",
          "fromTokenIdx": "Index of the taker token (what to sell).",
          "makerTokenAmounts": "Maker token buy amount for each sample.",
          "toTokenIdx": "Index of the maker token (what to buy)."
        },
        "returns": {
          "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
        }
      },
      "sampleBuysFromMStable(address,address,address,uint256[])": {
        "details": "Sample buy quotes from MStable contract",
        "params": {
          "makerToken": "Address of the maker token (what to buy).",
          "makerTokenAmounts": "Maker token buy amount for each sample.",
          "router": "Address of the mStable contract",
          "takerToken": "Address of the taker token (what to sell)."
        },
        "returns": {
          "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
        }
      },
      "sampleBuysFromUniswap(address,address,address,uint256[])": {
        "details": "Sample buy quotes from Uniswap.",
        "params": {
          "makerToken": "Address of the maker token (what to buy).",
          "makerTokenAmounts": "Maker token sell amount for each sample.",
          "takerToken": "Address of the taker token (what to sell)."
        },
        "returns": {
          "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
        }
      },
      "sampleBuysFromUniswapV2(address,address[],uint256[])": {
        "details": "Sample buy quotes from UniswapV2.",
        "params": {
          "makerTokenAmounts": "Maker token buy amount for each sample.",
          "path": "Token route. Should be takerToken -> makerToken.",
          "router": "Router to look up tokens and amounts"
        },
        "returns": {
          "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
        }
      },
      "sampleBuysFromUniswapV3(address,address[],uint256[])": {
        "details": "Sample buy quotes from UniswapV3.",
        "params": {
          "makerTokenAmounts": "Maker token buy amount for each sample.",
          "path": "Token route. Should be takerToken -> makerToken (at most two hops).",
          "quoter": "UniswapV3 Quoter contract."
        },
        "returns": {
          "takerTokenAmounts": "Taker amounts sold at each maker token amount.",
          "uniswapGasUsed": "Estimated amount of gas used",
          "uniswapPaths": "The encoded uniswap path for each sample."
        }
      },
      "sampleSellsFromCurve((address,bytes4,bytes4),int128,int128,uint256[])": {
        "details": "Sample sell quotes from Curve.",
        "params": {
          "curveInfo": "Curve information specific to this token pair.",
          "fromTokenIdx": "Index of the taker token (what to sell).",
          "takerTokenAmounts": "Taker token sell amount for each sample.",
          "toTokenIdx": "Index of the maker token (what to buy)."
        },
        "returns": {
          "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
        }
      },
      "sampleSellsFromMStable(address,address,address,uint256[])": {
        "details": "Sample sell quotes from the mStable contract",
        "params": {
          "makerToken": "Address of the maker token (what to buy).",
          "router": "Address of the mStable contract",
          "takerToken": "Address of the taker token (what to sell).",
          "takerTokenAmounts": "Taker token sell amount for each sample."
        },
        "returns": {
          "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
        }
      },
      "sampleSellsFromUniswap(address,address,address,uint256[])": {
        "details": "Sample sell quotes from Uniswap.",
        "params": {
          "makerToken": "Address of the maker token (what to buy).",
          "router": "Address of the Uniswap Router",
          "takerToken": "Address of the taker token (what to sell).",
          "takerTokenAmounts": "Taker token sell amount for each sample."
        },
        "returns": {
          "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
        }
      },
      "sampleSellsFromUniswapV2(address,address[],uint256[])": {
        "details": "Sample sell quotes from UniswapV2.",
        "params": {
          "path": "Token route. Should be takerToken -> makerToken",
          "router": "Router to look up tokens and amounts",
          "takerTokenAmounts": "Taker token sell amount for each sample."
        },
        "returns": {
          "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
        }
      },
      "sampleSellsFromUniswapV3(address,address[],uint256[])": {
        "details": "Sample sell quotes from UniswapV3.",
        "params": {
          "path": "Token route. Should be takerToken -> makerToken (at most two hops).",
          "quoter": "UniswapV3 Quoter contract.",
          "takerTokenAmounts": "Taker token sell amount for each sample."
        },
        "returns": {
          "makerTokenAmounts": "Maker amounts bought at each taker token amount.",
          "uniswapGasUsed": "Estimated amount of gas used",
          "uniswapPaths": "The encoded uniswap path for each sample."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}