{
  "address": "0x5A72Cdf747AFe153129d26e28929227365b7FE12",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "initializeCaller_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "ethRecipient",
          "type": "address"
        }
      ],
      "name": "die",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBootstrapper",
      "outputs": [
        {
          "internalType": "address",
          "name": "bootstrapper",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initializeCaller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "contract ZeroEx",
          "name": "zeroEx",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "contract SimpleFunctionRegistryFeature",
              "name": "registry",
              "type": "address"
            },
            {
              "internalType": "contract OwnableFeature",
              "name": "ownable",
              "type": "address"
            },
            {
              "internalType": "contract TransformERC20Feature",
              "name": "transformERC20",
              "type": "address"
            },
            {
              "internalType": "contract MetaTransactionsFeature",
              "name": "metaTransactions",
              "type": "address"
            },
            {
              "internalType": "contract NativeOrdersFeature",
              "name": "nativeOrders",
              "type": "address"
            },
            {
              "internalType": "contract OtcOrdersFeature",
              "name": "otcOrders",
              "type": "address"
            }
          ],
          "internalType": "struct FullMigration.Features",
          "name": "features",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "transformerDeployer",
              "type": "address"
            }
          ],
          "internalType": "struct FullMigration.MigrateOpts",
          "name": "migrateOpts",
          "type": "tuple"
        }
      ],
      "name": "migrateZeroEx",
      "outputs": [
        {
          "internalType": "contract ZeroEx",
          "name": "_zeroEx",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7c5e54b10636fad9bcd2305e89b670bc70b13cc9ae0b2737229dfcaa2bd47d2c",
  "receipt": {
    "to": null,
    "from": "0x560215A59247d47Bd949786DE7A7561bcc1E43ED",
    "contractAddress": "0x5A72Cdf747AFe153129d26e28929227365b7FE12",
    "transactionIndex": 0,
    "gasUsed": "1240831",
    "logsBloom": "0x
    "blockHash": "0xa29f1c77a51154bc3b618a1e0a86884a2626fe87b1803d9c523ae0acfac115c7",
    "transactionHash": "0x7c5e54b10636fad9bcd2305e89b670bc70b13cc9ae0b2737229dfcaa2bd47d2c",
    "logs": [],
    "blockNumber": 9477394,
    "cumulativeGasUsed": "1240831",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x560215A59247d47Bd949786DE7A7561bcc1E43ED"
  ],
  "numDeployments": 1,
  "solcInputHash": "d824bfd18a929a7d770611c578d2def3",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"initializeCaller_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"ethRecipient\",\"type\":\"address\"}],\"name\":\"die\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBootstrapper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"bootstrapper\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeCaller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"contract ZeroEx\",\"name\":\"zeroEx\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract SimpleFunctionRegistryFeature\",\"name\":\"registry\",\"type\":\"address\"},{\"internalType\":\"contract OwnableFeature\",\"name\":\"ownable\",\"type\":\"address\"},{\"internalType\":\"contract TransformERC20Feature\",\"name\":\"transformERC20\",\"type\":\"address\"},{\"internalType\":\"contract MetaTransactionsFeature\",\"name\":\"metaTransactions\",\"type\":\"address\"},{\"internalType\":\"contract NativeOrdersFeature\",\"name\":\"nativeOrders\",\"type\":\"address\"},{\"internalType\":\"contract OtcOrdersFeature\",\"name\":\"otcOrders\",\"type\":\"address\"}],\"internalType\":\"struct FullMigration.Features\",\"name\":\"features\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"transformerDeployer\",\"type\":\"address\"}],\"internalType\":\"struct FullMigration.MigrateOpts\",\"name\":\"migrateOpts\",\"type\":\"tuple\"}],\"name\":\"migrateZeroEx\",\"outputs\":[{\"internalType\":\"contract ZeroEx\",\"name\":\"_zeroEx\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"A contract for deploying and configuring the full ZeroEx contract.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Instantiate this contract and set the allowed caller of `initializeZeroEx()`      to `initializeCaller`.\",\"params\":{\"initializeCaller_\":\"The allowed caller of `initializeZeroEx()`.\"}},\"die(address)\":{\"details\":\"Destroy this contract. Only callable from ourselves (from `initializeZeroEx()`).\",\"params\":{\"ethRecipient\":\"Receiver of any ETH in this contract.\"}},\"getBootstrapper()\":{\"details\":\"Retrieve the bootstrapper address to use when constructing `ZeroEx`.\",\"returns\":{\"bootstrapper\":\"The bootstrapper address.\"}},\"migrateZeroEx(address,address,(address,address,address,address,address,address),(address))\":{\"details\":\"Initialize the `ZeroEx` contract with the full feature set,      transfer ownership to `owner`, then self-destruct.\",\"params\":{\"features\":\"Features to add to the proxy.\",\"migrateOpts\":\"Parameters needed to initialize features.\",\"owner\":\"The owner of the contract.\",\"zeroEx\":\"The instance of the ZeroEx contract. ZeroEx should        been constructed with this contract as the bootstrapper.\"},\"returns\":{\"_zeroEx\":\"The configured ZeroEx contract. Same as the `zeroEx` parameter.\"}}},\"stateVariables\":{\"_initialMigration\":{\"details\":\"The initial migration contract.\"},\"initializeCaller\":{\"details\":\"The allowed caller of `initializeZeroEx()`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/zero-ex/migrations/FullMigration.sol\":\"FullMigration\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"src/contracts-erc20/v06/IERC20TokenV06.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\ninterface IERC20TokenV06 {\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @dev send `value` token to `to` from `msg.sender`\\n    /// @param to The address of the recipient\\n    /// @param value The amount of token to be transferred\\n    /// @return True if transfer was successful\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\\n    /// @param from The address of the sender\\n    /// @param to The address of the recipient\\n    /// @param value The amount of token to be transferred\\n    /// @return True if transfer was successful\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n\\n    /// @dev `msg.sender` approves `spender` to spend `value` tokens\\n    /// @param spender The address of the account able to transfer the tokens\\n    /// @param value The amount of wei to be approved for transfer\\n    /// @return Always true if the call has enough gas to complete execution\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /// @dev Query total supply of token\\n    /// @return Total supply of token\\n    function totalSupply() external view returns (uint256);\\n\\n    /// @dev Get the balance of `owner`.\\n    /// @param owner The address from which the balance will be retrieved\\n    /// @return Balance of owner\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    /// @dev Get the allowance for `spender` to spend from `owner`.\\n    /// @param owner The address of the account owning tokens\\n    /// @param spender The address of the account able to transfer the tokens\\n    /// @return Amount of remaining tokens allowed to spent\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /// @dev Get the number of decimals this token has.\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x738fc3ee22931305f16e783b286180c32f6c6390ebbeb86b8b28b4f2715e9805\",\"license\":\"Apache-2.0\"},\"src/contracts-erc20/v06/IEtherTokenV06.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\nimport \\\"./IERC20TokenV06.sol\\\";\\n\\ninterface IEtherTokenV06 is IERC20TokenV06 {\\n    /// @dev Wrap ether.\\n    function deposit() external payable;\\n\\n    /// @dev Unwrap ether.\\n    function withdraw(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x23b6a0e4f6dbed58ab37e6450e0789b6fc30c63ea51670f1924ee4a4d15a9102\",\"license\":\"Apache-2.0\"},\"src/contracts-erc20/v06/LibERC20TokenV06.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\nimport \\\"../../contracts-utils/v06/errors/LibRichErrorsV06.sol\\\";\\nimport \\\"../../contracts-utils/v06/LibBytesV06.sol\\\";\\nimport \\\"./IERC20TokenV06.sol\\\";\\n\\nlibrary LibERC20TokenV06 {\\n    bytes private constant DECIMALS_CALL_DATA = hex\\\"313ce567\\\";\\n\\n    /// @dev Calls `IERC20TokenV06(token).approve()`.\\n    ///      Reverts if the return data is invalid or the call reverts.\\n    /// @param token The address of the token contract.\\n    /// @param spender The address that receives an allowance.\\n    /// @param allowance The allowance to set.\\n    function compatApprove(IERC20TokenV06 token, address spender, uint256 allowance) internal {\\n        bytes memory callData = abi.encodeWithSelector(token.approve.selector, spender, allowance);\\n        _callWithOptionalBooleanResult(address(token), callData);\\n    }\\n\\n    /// @dev Calls `IERC20TokenV06(token).approve()` and sets the allowance to the\\n    ///      maximum if the current approval is not already >= an amount.\\n    ///      Reverts if the return data is invalid or the call reverts.\\n    /// @param token The address of the token contract.\\n    /// @param spender The address that receives an allowance.\\n    /// @param amount The minimum allowance needed.\\n    function approveIfBelow(IERC20TokenV06 token, address spender, uint256 amount) internal {\\n        if (token.allowance(address(this), spender) < amount) {\\n            compatApprove(token, spender, uint256(-1));\\n        }\\n    }\\n\\n    /// @dev Calls `IERC20TokenV06(token).transfer()`.\\n    ///      Reverts if the return data is invalid or the call reverts.\\n    /// @param token The address of the token contract.\\n    /// @param to The address that receives the tokens\\n    /// @param amount Number of tokens to transfer.\\n    function compatTransfer(IERC20TokenV06 token, address to, uint256 amount) internal {\\n        bytes memory callData = abi.encodeWithSelector(token.transfer.selector, to, amount);\\n        _callWithOptionalBooleanResult(address(token), callData);\\n    }\\n\\n    /// @dev Calls `IERC20TokenV06(token).transferFrom()`.\\n    ///      Reverts if the return data is invalid or the call reverts.\\n    /// @param token The address of the token contract.\\n    /// @param from The owner of the tokens.\\n    /// @param to The address that receives the tokens\\n    /// @param amount Number of tokens to transfer.\\n    function compatTransferFrom(IERC20TokenV06 token, address from, address to, uint256 amount) internal {\\n        bytes memory callData = abi.encodeWithSelector(token.transferFrom.selector, from, to, amount);\\n        _callWithOptionalBooleanResult(address(token), callData);\\n    }\\n\\n    /// @dev Retrieves the number of decimals for a token.\\n    ///      Returns `18` if the call reverts.\\n    /// @param token The address of the token contract.\\n    /// @return tokenDecimals The number of decimals places for the token.\\n    function compatDecimals(IERC20TokenV06 token) internal view returns (uint8 tokenDecimals) {\\n        tokenDecimals = 18;\\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(DECIMALS_CALL_DATA);\\n        if (didSucceed && resultData.length >= 32) {\\n            tokenDecimals = uint8(LibBytesV06.readUint256(resultData, 0));\\n        }\\n    }\\n\\n    /// @dev Retrieves the allowance for a token, owner, and spender.\\n    ///      Returns `0` if the call reverts.\\n    /// @param token The address of the token contract.\\n    /// @param owner The owner of the tokens.\\n    /// @param spender The address the spender.\\n    /// @return allowance_ The allowance for a token, owner, and spender.\\n    function compatAllowance(\\n        IERC20TokenV06 token,\\n        address owner,\\n        address spender\\n    ) internal view returns (uint256 allowance_) {\\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\\n            abi.encodeWithSelector(token.allowance.selector, owner, spender)\\n        );\\n        if (didSucceed && resultData.length >= 32) {\\n            allowance_ = LibBytesV06.readUint256(resultData, 0);\\n        }\\n    }\\n\\n    /// @dev Retrieves the balance for a token owner.\\n    ///      Returns `0` if the call reverts.\\n    /// @param token The address of the token contract.\\n    /// @param owner The owner of the tokens.\\n    /// @return balance The token balance of an owner.\\n    function compatBalanceOf(IERC20TokenV06 token, address owner) internal view returns (uint256 balance) {\\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\\n            abi.encodeWithSelector(token.balanceOf.selector, owner)\\n        );\\n        if (didSucceed && resultData.length >= 32) {\\n            balance = LibBytesV06.readUint256(resultData, 0);\\n        }\\n    }\\n\\n    /// @dev Executes a call on address `target` with calldata `callData`\\n    ///      and asserts that either nothing was returned or a single boolean\\n    ///      was returned equal to `true`.\\n    /// @param target The call target.\\n    /// @param callData The abi-encoded call data.\\n    function _callWithOptionalBooleanResult(address target, bytes memory callData) private {\\n        (bool didSucceed, bytes memory resultData) = target.call(callData);\\n        // Revert if the call reverted.\\n        if (!didSucceed) {\\n            LibRichErrorsV06.rrevert(resultData);\\n        }\\n        // If we get back 0 returndata, this may be a non-standard ERC-20 that\\n        // does not return a boolean. Check that it at least contains code.\\n        if (resultData.length == 0) {\\n            uint256 size;\\n            assembly {\\n                size := extcodesize(target)\\n            }\\n            require(size > 0, \\\"invalid token address, contains no code\\\");\\n            return;\\n        }\\n        // If we get back at least 32 bytes, we know the target address\\n        // contains code, and we assume it is a token that returned a boolean\\n        // success value, which must be true.\\n        if (resultData.length >= 32) {\\n            uint256 result = LibBytesV06.readUint256(resultData, 0);\\n            if (result == 1) {\\n                return;\\n            } else {\\n                LibRichErrorsV06.rrevert(resultData);\\n            }\\n        }\\n        // If 0 < returndatasize < 32, the target is a contract, but not a\\n        // valid token.\\n        LibRichErrorsV06.rrevert(resultData);\\n    }\\n}\\n\",\"keccak256\":\"0xa904656f8c2774bde8392caa9f9cce0c0ede27efa42a106968a7106be3ea3a50\",\"license\":\"Apache-2.0\"},\"src/contracts-utils/v06/AuthorizableV06.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\nimport \\\"./interfaces/IAuthorizableV06.sol\\\";\\nimport \\\"./errors/LibRichErrorsV06.sol\\\";\\nimport \\\"./errors/LibAuthorizableRichErrorsV06.sol\\\";\\nimport \\\"./OwnableV06.sol\\\";\\n\\ncontract AuthorizableV06 is OwnableV06, IAuthorizableV06 {\\n    /// @dev Only authorized addresses can invoke functions with this modifier.\\n    modifier onlyAuthorized() {\\n        _assertSenderIsAuthorized();\\n        _;\\n    }\\n\\n    // @dev Whether an address is authorized to call privileged functions.\\n    // @param 0 Address to query.\\n    // @return 0 Whether the address is authorized.\\n    mapping(address => bool) public override authorized;\\n    // @dev Whether an address is authorized to call privileged functions.\\n    // @param 0 Index of authorized address.\\n    // @return 0 Authorized address.\\n    address[] public override authorities;\\n\\n    /// @dev Initializes the `owner` address.\\n    constructor() public OwnableV06() {}\\n\\n    /// @dev Authorizes an address.\\n    /// @param target Address to authorize.\\n    function addAuthorizedAddress(address target) external override onlyOwner {\\n        _addAuthorizedAddress(target);\\n    }\\n\\n    /// @dev Removes authorizion of an address.\\n    /// @param target Address to remove authorization from.\\n    function removeAuthorizedAddress(address target) external override onlyOwner {\\n        if (!authorized[target]) {\\n            LibRichErrorsV06.rrevert(LibAuthorizableRichErrorsV06.TargetNotAuthorizedError(target));\\n        }\\n        for (uint256 i = 0; i < authorities.length; i++) {\\n            if (authorities[i] == target) {\\n                _removeAuthorizedAddressAtIndex(target, i);\\n                break;\\n            }\\n        }\\n    }\\n\\n    /// @dev Removes authorizion of an address.\\n    /// @param target Address to remove authorization from.\\n    /// @param index Index of target in authorities array.\\n    function removeAuthorizedAddressAtIndex(address target, uint256 index) external override onlyOwner {\\n        _removeAuthorizedAddressAtIndex(target, index);\\n    }\\n\\n    /// @dev Gets all authorized addresses.\\n    /// @return Array of authorized addresses.\\n    function getAuthorizedAddresses() external view override returns (address[] memory) {\\n        return authorities;\\n    }\\n\\n    /// @dev Reverts if msg.sender is not authorized.\\n    function _assertSenderIsAuthorized() internal view {\\n        if (!authorized[msg.sender]) {\\n            LibRichErrorsV06.rrevert(LibAuthorizableRichErrorsV06.SenderNotAuthorizedError(msg.sender));\\n        }\\n    }\\n\\n    /// @dev Authorizes an address.\\n    /// @param target Address to authorize.\\n    function _addAuthorizedAddress(address target) internal {\\n        // Ensure that the target is not the zero address.\\n        if (target == address(0)) {\\n            LibRichErrorsV06.rrevert(LibAuthorizableRichErrorsV06.ZeroCantBeAuthorizedError());\\n        }\\n\\n        // Ensure that the target is not already authorized.\\n        if (authorized[target]) {\\n            LibRichErrorsV06.rrevert(LibAuthorizableRichErrorsV06.TargetAlreadyAuthorizedError(target));\\n        }\\n\\n        authorized[target] = true;\\n        authorities.push(target);\\n        emit AuthorizedAddressAdded(target, msg.sender);\\n    }\\n\\n    /// @dev Removes authorizion of an address.\\n    /// @param target Address to remove authorization from.\\n    /// @param index Index of target in authorities array.\\n    function _removeAuthorizedAddressAtIndex(address target, uint256 index) internal {\\n        if (!authorized[target]) {\\n            LibRichErrorsV06.rrevert(LibAuthorizableRichErrorsV06.TargetNotAuthorizedError(target));\\n        }\\n        if (index >= authorities.length) {\\n            LibRichErrorsV06.rrevert(LibAuthorizableRichErrorsV06.IndexOutOfBoundsError(index, authorities.length));\\n        }\\n        if (authorities[index] != target) {\\n            LibRichErrorsV06.rrevert(\\n                LibAuthorizableRichErrorsV06.AuthorizedAddressMismatchError(authorities[index], target)\\n            );\\n        }\\n\\n        delete authorized[target];\\n        authorities[index] = authorities[authorities.length - 1];\\n        authorities.pop();\\n        emit AuthorizedAddressRemoved(target, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0xc4064d220e1e8ef7a2258855ef2bfbd0841126f715c033fd08661e970f77f863\",\"license\":\"Apache-2.0\"},\"src/contracts-utils/v06/LibBytesV06.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\nimport \\\"./errors/LibBytesRichErrorsV06.sol\\\";\\nimport \\\"./errors/LibRichErrorsV06.sol\\\";\\n\\nlibrary LibBytesV06 {\\n    using LibBytesV06 for bytes;\\n\\n    /// @dev Gets the memory address for a byte array.\\n    /// @param input Byte array to lookup.\\n    /// @return memoryAddress Memory address of byte array. This\\n    ///         points to the header of the byte array which contains\\n    ///         the length.\\n    function rawAddress(bytes memory input) internal pure returns (uint256 memoryAddress) {\\n        assembly {\\n            memoryAddress := input\\n        }\\n        return memoryAddress;\\n    }\\n\\n    /// @dev Gets the memory address for the contents of a byte array.\\n    /// @param input Byte array to lookup.\\n    /// @return memoryAddress Memory address of the contents of the byte array.\\n    function contentAddress(bytes memory input) internal pure returns (uint256 memoryAddress) {\\n        assembly {\\n            memoryAddress := add(input, 32)\\n        }\\n        return memoryAddress;\\n    }\\n\\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\\n    /// @param dest memory address to copy bytes to.\\n    /// @param source memory address to copy bytes from.\\n    /// @param length number of bytes to copy.\\n    function memCopy(uint256 dest, uint256 source, uint256 length) internal pure {\\n        if (length < 32) {\\n            // Handle a partial word by reading destination and masking\\n            // off the bits we are interested in.\\n            // This correctly handles overlap, zero lengths and source == dest\\n            assembly {\\n                let mask := sub(exp(256, sub(32, length)), 1)\\n                let s := and(mload(source), not(mask))\\n                let d := and(mload(dest), mask)\\n                mstore(dest, or(s, d))\\n            }\\n        } else {\\n            // Skip the O(length) loop when source == dest.\\n            if (source == dest) {\\n                return;\\n            }\\n\\n            // For large copies we copy whole words at a time. The final\\n            // word is aligned to the end of the range (instead of after the\\n            // previous) to handle partial words. So a copy will look like this:\\n            //\\n            //  ####\\n            //      ####\\n            //          ####\\n            //            ####\\n            //\\n            // We handle overlap in the source and destination range by\\n            // changing the copying direction. This prevents us from\\n            // overwriting parts of source that we still need to copy.\\n            //\\n            // This correctly handles source == dest\\n            //\\n            if (source > dest) {\\n                assembly {\\n                    // We subtract 32 from `sEnd` and `dEnd` because it\\n                    // is easier to compare with in the loop, and these\\n                    // are also the addresses we need for copying the\\n                    // last bytes.\\n                    length := sub(length, 32)\\n                    let sEnd := add(source, length)\\n                    let dEnd := add(dest, length)\\n\\n                    // Remember the last 32 bytes of source\\n                    // This needs to be done here and not after the loop\\n                    // because we may have overwritten the last bytes in\\n                    // source already due to overlap.\\n                    let last := mload(sEnd)\\n\\n                    // Copy whole words front to back\\n                    // Note: the first check is always true,\\n                    // this could have been a do-while loop.\\n                    for {\\n\\n                    } lt(source, sEnd) {\\n\\n                    } {\\n                        mstore(dest, mload(source))\\n                        source := add(source, 32)\\n                        dest := add(dest, 32)\\n                    }\\n\\n                    // Write the last 32 bytes\\n                    mstore(dEnd, last)\\n                }\\n            } else {\\n                assembly {\\n                    // We subtract 32 from `sEnd` and `dEnd` because those\\n                    // are the starting points when copying a word at the end.\\n                    length := sub(length, 32)\\n                    let sEnd := add(source, length)\\n                    let dEnd := add(dest, length)\\n\\n                    // Remember the first 32 bytes of source\\n                    // This needs to be done here and not after the loop\\n                    // because we may have overwritten the first bytes in\\n                    // source already due to overlap.\\n                    let first := mload(source)\\n\\n                    // Copy whole words back to front\\n                    // We use a signed comparisson here to allow dEnd to become\\n                    // negative (happens when source and dest < 32). Valid\\n                    // addresses in local memory will never be larger than\\n                    // 2**255, so they can be safely re-interpreted as signed.\\n                    // Note: the first check is always true,\\n                    // this could have been a do-while loop.\\n                    for {\\n\\n                    } slt(dest, dEnd) {\\n\\n                    } {\\n                        mstore(dEnd, mload(sEnd))\\n                        sEnd := sub(sEnd, 32)\\n                        dEnd := sub(dEnd, 32)\\n                    }\\n\\n                    // Write the first 32 bytes\\n                    mstore(dest, first)\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns a slices from a byte array.\\n    /// @param b The byte array to take a slice from.\\n    /// @param from The starting index for the slice (inclusive).\\n    /// @param to The final index for the slice (exclusive).\\n    /// @return result The slice containing bytes at indices [from, to)\\n    function slice(bytes memory b, uint256 from, uint256 to) internal pure returns (bytes memory result) {\\n        // Ensure that the from and to positions are valid positions for a slice within\\n        // the byte array that is being used.\\n        if (from > to) {\\n            LibRichErrorsV06.rrevert(\\n                LibBytesRichErrorsV06.InvalidByteOperationError(\\n                    LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\\n                    from,\\n                    to\\n                )\\n            );\\n        }\\n        if (to > b.length) {\\n            LibRichErrorsV06.rrevert(\\n                LibBytesRichErrorsV06.InvalidByteOperationError(\\n                    LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\\n                    to,\\n                    b.length\\n                )\\n            );\\n        }\\n\\n        // Create a new bytes structure and copy contents\\n        result = new bytes(to - from);\\n        memCopy(result.contentAddress(), b.contentAddress() + from, result.length);\\n        return result;\\n    }\\n\\n    /// @dev Returns a slice from a byte array without preserving the input.\\n    ///      When `from == 0`, the original array will match the slice.\\n    ///      In other cases its state will be corrupted.\\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\\n    /// @param from The starting index for the slice (inclusive).\\n    /// @param to The final index for the slice (exclusive).\\n    /// @return result The slice containing bytes at indices [from, to)\\n    function sliceDestructive(bytes memory b, uint256 from, uint256 to) internal pure returns (bytes memory result) {\\n        // Ensure that the from and to positions are valid positions for a slice within\\n        // the byte array that is being used.\\n        if (from > to) {\\n            LibRichErrorsV06.rrevert(\\n                LibBytesRichErrorsV06.InvalidByteOperationError(\\n                    LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\\n                    from,\\n                    to\\n                )\\n            );\\n        }\\n        if (to > b.length) {\\n            LibRichErrorsV06.rrevert(\\n                LibBytesRichErrorsV06.InvalidByteOperationError(\\n                    LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\\n                    to,\\n                    b.length\\n                )\\n            );\\n        }\\n\\n        // Create a new bytes structure around [from, to) in-place.\\n        assembly {\\n            result := add(b, from)\\n            mstore(result, sub(to, from))\\n        }\\n        return result;\\n    }\\n\\n    /// @dev Pops the last byte off of a byte array by modifying its length.\\n    /// @param b Byte array that will be modified.\\n    /// @return result The byte that was popped off.\\n    function popLastByte(bytes memory b) internal pure returns (bytes1 result) {\\n        if (b.length == 0) {\\n            LibRichErrorsV06.rrevert(\\n                LibBytesRichErrorsV06.InvalidByteOperationError(\\n                    LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanZeroRequired,\\n                    b.length,\\n                    0\\n                )\\n            );\\n        }\\n\\n        // Store last byte.\\n        result = b[b.length - 1];\\n\\n        assembly {\\n            // Decrement length of byte array.\\n            let newLen := sub(mload(b), 1)\\n            mstore(b, newLen)\\n        }\\n        return result;\\n    }\\n\\n    /// @dev Tests equality of two byte arrays.\\n    /// @param lhs First byte array to compare.\\n    /// @param rhs Second byte array to compare.\\n    /// @return equal True if arrays are the same. False otherwise.\\n    function equals(bytes memory lhs, bytes memory rhs) internal pure returns (bool equal) {\\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\\n        // We early exit on unequal lengths, but keccak would also correctly\\n        // handle this.\\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\\n    }\\n\\n    /// @dev Reads an address from a position in a byte array.\\n    /// @param b Byte array containing an address.\\n    /// @param index Index in byte array of address.\\n    /// @return result address from byte array.\\n    function readAddress(bytes memory b, uint256 index) internal pure returns (address result) {\\n        if (b.length < index + 20) {\\n            LibRichErrorsV06.rrevert(\\n                LibBytesRichErrorsV06.InvalidByteOperationError(\\n                    LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\\n                    b.length,\\n                    index + 20 // 20 is length of address\\n                )\\n            );\\n        }\\n\\n        // Add offset to index:\\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\\n        index += 20;\\n\\n        // Read address from array memory\\n        assembly {\\n            // 1. Add index to address of bytes array\\n            // 2. Load 32-byte word from memory\\n            // 3. Apply 20-byte mask to obtain address\\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\\n        }\\n        return result;\\n    }\\n\\n    /// @dev Writes an address into a specific position in a byte array.\\n    /// @param b Byte array to insert address into.\\n    /// @param index Index in byte array of address.\\n    /// @param input Address to put into byte array.\\n    function writeAddress(bytes memory b, uint256 index, address input) internal pure {\\n        if (b.length < index + 20) {\\n            LibRichErrorsV06.rrevert(\\n                LibBytesRichErrorsV06.InvalidByteOperationError(\\n                    LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\\n                    b.length,\\n                    index + 20 // 20 is length of address\\n                )\\n            );\\n        }\\n\\n        // Add offset to index:\\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\\n        index += 20;\\n\\n        // Store address into array memory\\n        assembly {\\n            // The address occupies 20 bytes and mstore stores 32 bytes.\\n            // First fetch the 32-byte word where we'll be storing the address, then\\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\\n\\n            // 1. Add index to address of bytes array\\n            // 2. Load 32-byte word from memory\\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\\n            let neighbors := and(\\n                mload(add(b, index)),\\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\\n            )\\n\\n            // Make sure input address is clean.\\n            // (Solidity does not guarantee this)\\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\\n\\n            // Store the neighbors and address into memory\\n            mstore(add(b, index), xor(input, neighbors))\\n        }\\n    }\\n\\n    /// @dev Reads a bytes32 value from a position in a byte array.\\n    /// @param b Byte array containing a bytes32 value.\\n    /// @param index Index in byte array of bytes32 value.\\n    /// @return result bytes32 value from byte array.\\n    function readBytes32(bytes memory b, uint256 index) internal pure returns (bytes32 result) {\\n        if (b.length < index + 32) {\\n            LibRichErrorsV06.rrevert(\\n                LibBytesRichErrorsV06.InvalidByteOperationError(\\n                    LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\\n                    b.length,\\n                    index + 32\\n                )\\n            );\\n        }\\n\\n        // Arrays are prefixed by a 256 bit length parameter\\n        index += 32;\\n\\n        // Read the bytes32 from array memory\\n        assembly {\\n            result := mload(add(b, index))\\n        }\\n        return result;\\n    }\\n\\n    /// @dev Writes a bytes32 into a specific position in a byte array.\\n    /// @param b Byte array to insert <input> into.\\n    /// @param index Index in byte array of <input>.\\n    /// @param input bytes32 to put into byte array.\\n    function writeBytes32(bytes memory b, uint256 index, bytes32 input) internal pure {\\n        if (b.length < index + 32) {\\n            LibRichErrorsV06.rrevert(\\n                LibBytesRichErrorsV06.InvalidByteOperationError(\\n                    LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\\n                    b.length,\\n                    index + 32\\n                )\\n            );\\n        }\\n\\n        // Arrays are prefixed by a 256 bit length parameter\\n        index += 32;\\n\\n        // Read the bytes32 from array memory\\n        assembly {\\n            mstore(add(b, index), input)\\n        }\\n    }\\n\\n    /// @dev Reads a uint256 value from a position in a byte array.\\n    /// @param b Byte array containing a uint256 value.\\n    /// @param index Index in byte array of uint256 value.\\n    /// @return result uint256 value from byte array.\\n    function readUint256(bytes memory b, uint256 index) internal pure returns (uint256 result) {\\n        result = uint256(readBytes32(b, index));\\n        return result;\\n    }\\n\\n    /// @dev Writes a uint256 into a specific position in a byte array.\\n    /// @param b Byte array to insert <input> into.\\n    /// @param index Index in byte array of <input>.\\n    /// @param input uint256 to put into byte array.\\n    function writeUint256(bytes memory b, uint256 index, uint256 input) internal pure {\\n        writeBytes32(b, index, bytes32(input));\\n    }\\n\\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\\n    /// @param b Byte array containing a bytes4 value.\\n    /// @param index Index in byte array of bytes4 value.\\n    /// @return result bytes4 value from byte array.\\n    function readBytes4(bytes memory b, uint256 index) internal pure returns (bytes4 result) {\\n        if (b.length < index + 4) {\\n            LibRichErrorsV06.rrevert(\\n                LibBytesRichErrorsV06.InvalidByteOperationError(\\n                    LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,\\n                    b.length,\\n                    index + 4\\n                )\\n            );\\n        }\\n\\n        // Arrays are prefixed by a 32 byte length field\\n        index += 32;\\n\\n        // Read the bytes4 from array memory\\n        assembly {\\n            result := mload(add(b, index))\\n            // Solidity does not require us to clean the trailing bytes.\\n            // We do it anyway\\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\\n        }\\n        return result;\\n    }\\n\\n    /// @dev Writes a new length to a byte array.\\n    ///      Decreasing length will lead to removing the corresponding lower order bytes from the byte array.\\n    ///      Increasing length may lead to appending adjacent in-memory bytes to the end of the byte array.\\n    /// @param b Bytes array to write new length to.\\n    /// @param length New length of byte array.\\n    function writeLength(bytes memory b, uint256 length) internal pure {\\n        assembly {\\n            mstore(b, length)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4627b090ebd8db251e6cea36597c906bd4f82c219059395eaf7263067666b856\",\"license\":\"Apache-2.0\"},\"src/contracts-utils/v06/LibMathV06.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2019 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\nimport \\\"./LibSafeMathV06.sol\\\";\\nimport \\\"./errors/LibRichErrorsV06.sol\\\";\\nimport \\\"./errors/LibMathRichErrorsV06.sol\\\";\\n\\nlibrary LibMathV06 {\\n    using LibSafeMathV06 for uint256;\\n\\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\\n    ///      Reverts if rounding error is >= 0.1%\\n    /// @param numerator Numerator.\\n    /// @param denominator Denominator.\\n    /// @param target Value to calculate partial of.\\n    /// @return partialAmount Partial value of target rounded down.\\n    function safeGetPartialAmountFloor(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 target\\n    ) internal pure returns (uint256 partialAmount) {\\n        if (isRoundingErrorFloor(numerator, denominator, target)) {\\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.RoundingError(numerator, denominator, target));\\n        }\\n\\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\\n        return partialAmount;\\n    }\\n\\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\\n    ///      Reverts if rounding error is >= 0.1%\\n    /// @param numerator Numerator.\\n    /// @param denominator Denominator.\\n    /// @param target Value to calculate partial of.\\n    /// @return partialAmount Partial value of target rounded up.\\n    function safeGetPartialAmountCeil(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 target\\n    ) internal pure returns (uint256 partialAmount) {\\n        if (isRoundingErrorCeil(numerator, denominator, target)) {\\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.RoundingError(numerator, denominator, target));\\n        }\\n\\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\\n        //       ceil(a / b) = floor((a + b - 1) / b)\\n        // To implement `ceil(a / b)` using safeDiv.\\n        partialAmount = numerator.safeMul(target).safeAdd(denominator.safeSub(1)).safeDiv(denominator);\\n\\n        return partialAmount;\\n    }\\n\\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\\n    /// @param numerator Numerator.\\n    /// @param denominator Denominator.\\n    /// @param target Value to calculate partial of.\\n    /// @return partialAmount Partial value of target rounded down.\\n    function getPartialAmountFloor(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 target\\n    ) internal pure returns (uint256 partialAmount) {\\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\\n        return partialAmount;\\n    }\\n\\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\\n    /// @param numerator Numerator.\\n    /// @param denominator Denominator.\\n    /// @param target Value to calculate partial of.\\n    /// @return partialAmount Partial value of target rounded up.\\n    function getPartialAmountCeil(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 target\\n    ) internal pure returns (uint256 partialAmount) {\\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\\n        //       ceil(a / b) = floor((a + b - 1) / b)\\n        // To implement `ceil(a / b)` using safeDiv.\\n        partialAmount = numerator.safeMul(target).safeAdd(denominator.safeSub(1)).safeDiv(denominator);\\n\\n        return partialAmount;\\n    }\\n\\n    /// @dev Checks if rounding error >= 0.1% when rounding down.\\n    /// @param numerator Numerator.\\n    /// @param denominator Denominator.\\n    /// @param target Value to multiply with numerator/denominator.\\n    /// @return isError Rounding error is present.\\n    function isRoundingErrorFloor(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 target\\n    ) internal pure returns (bool isError) {\\n        if (denominator == 0) {\\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.DivisionByZeroError());\\n        }\\n\\n        // The absolute rounding error is the difference between the rounded\\n        // value and the ideal value. The relative rounding error is the\\n        // absolute rounding error divided by the absolute value of the\\n        // ideal value. This is undefined when the ideal value is zero.\\n        //\\n        // The ideal value is `numerator * target / denominator`.\\n        // Let's call `numerator * target % denominator` the remainder.\\n        // The absolute error is `remainder / denominator`.\\n        //\\n        // When the ideal value is zero, we require the absolute error to\\n        // be zero. Fortunately, this is always the case. The ideal value is\\n        // zero iff `numerator == 0` and/or `target == 0`. In this case the\\n        // remainder and absolute error are also zero.\\n        if (target == 0 || numerator == 0) {\\n            return false;\\n        }\\n\\n        // Otherwise, we want the relative rounding error to be strictly\\n        // less than 0.1%.\\n        // The relative error is `remainder / (numerator * target)`.\\n        // We want the relative error less than 1 / 1000:\\n        //        remainder / (numerator * denominator)  <  1 / 1000\\n        // or equivalently:\\n        //        1000 * remainder  <  numerator * target\\n        // so we have a rounding error iff:\\n        //        1000 * remainder  >=  numerator * target\\n        uint256 remainder = mulmod(target, numerator, denominator);\\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\\n        return isError;\\n    }\\n\\n    /// @dev Checks if rounding error >= 0.1% when rounding up.\\n    /// @param numerator Numerator.\\n    /// @param denominator Denominator.\\n    /// @param target Value to multiply with numerator/denominator.\\n    /// @return isError Rounding error is present.\\n    function isRoundingErrorCeil(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 target\\n    ) internal pure returns (bool isError) {\\n        if (denominator == 0) {\\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.DivisionByZeroError());\\n        }\\n\\n        // See the comments in `isRoundingError`.\\n        if (target == 0 || numerator == 0) {\\n            // When either is zero, the ideal value and rounded value are zero\\n            // and there is no rounding error. (Although the relative error\\n            // is undefined.)\\n            return false;\\n        }\\n        // Compute remainder as before\\n        uint256 remainder = mulmod(target, numerator, denominator);\\n        remainder = denominator.safeSub(remainder) % denominator;\\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\\n        return isError;\\n    }\\n}\\n\",\"keccak256\":\"0x90f967c24663ba10b4660a9d800648dbfdb9bcfd2f7be4a361ff01f8d9d6a399\",\"license\":\"Apache-2.0\"},\"src/contracts-utils/v06/LibSafeMathV06.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\nimport \\\"./errors/LibRichErrorsV06.sol\\\";\\nimport \\\"./errors/LibSafeMathRichErrorsV06.sol\\\";\\n\\nlibrary LibSafeMathV06 {\\n    function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        if (c / a != b) {\\n            LibRichErrorsV06.rrevert(\\n                LibSafeMathRichErrorsV06.Uint256BinOpError(\\n                    LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\\n                    a,\\n                    b\\n                )\\n            );\\n        }\\n        return c;\\n    }\\n\\n    function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            LibRichErrorsV06.rrevert(\\n                LibSafeMathRichErrorsV06.Uint256BinOpError(\\n                    LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\\n                    a,\\n                    b\\n                )\\n            );\\n        }\\n        uint256 c = a / b;\\n        return c;\\n    }\\n\\n    function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b > a) {\\n            LibRichErrorsV06.rrevert(\\n                LibSafeMathRichErrorsV06.Uint256BinOpError(\\n                    LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\\n                    a,\\n                    b\\n                )\\n            );\\n        }\\n        return a - b;\\n    }\\n\\n    function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        if (c < a) {\\n            LibRichErrorsV06.rrevert(\\n                LibSafeMathRichErrorsV06.Uint256BinOpError(\\n                    LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\\n                    a,\\n                    b\\n                )\\n            );\\n        }\\n        return c;\\n    }\\n\\n    function max256(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    function min256(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    function safeMul128(uint128 a, uint128 b) internal pure returns (uint128) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint128 c = a * b;\\n        if (c / a != b) {\\n            LibRichErrorsV06.rrevert(\\n                LibSafeMathRichErrorsV06.Uint256BinOpError(\\n                    LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\\n                    a,\\n                    b\\n                )\\n            );\\n        }\\n        return c;\\n    }\\n\\n    function safeDiv128(uint128 a, uint128 b) internal pure returns (uint128) {\\n        if (b == 0) {\\n            LibRichErrorsV06.rrevert(\\n                LibSafeMathRichErrorsV06.Uint256BinOpError(\\n                    LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\\n                    a,\\n                    b\\n                )\\n            );\\n        }\\n        uint128 c = a / b;\\n        return c;\\n    }\\n\\n    function safeSub128(uint128 a, uint128 b) internal pure returns (uint128) {\\n        if (b > a) {\\n            LibRichErrorsV06.rrevert(\\n                LibSafeMathRichErrorsV06.Uint256BinOpError(\\n                    LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\\n                    a,\\n                    b\\n                )\\n            );\\n        }\\n        return a - b;\\n    }\\n\\n    function safeAdd128(uint128 a, uint128 b) internal pure returns (uint128) {\\n        uint128 c = a + b;\\n        if (c < a) {\\n            LibRichErrorsV06.rrevert(\\n                LibSafeMathRichErrorsV06.Uint256BinOpError(\\n                    LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\\n                    a,\\n                    b\\n                )\\n            );\\n        }\\n        return c;\\n    }\\n\\n    function max128(uint128 a, uint128 b) internal pure returns (uint128) {\\n        return a >= b ? a : b;\\n    }\\n\\n    function min128(uint128 a, uint128 b) internal pure returns (uint128) {\\n        return a < b ? a : b;\\n    }\\n\\n    function safeDowncastToUint128(uint256 a) internal pure returns (uint128) {\\n        if (a > type(uint128).max) {\\n            LibRichErrorsV06.rrevert(\\n                LibSafeMathRichErrorsV06.Uint256DowncastError(\\n                    LibSafeMathRichErrorsV06.DowncastErrorCodes.VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128,\\n                    a\\n                )\\n            );\\n        }\\n        return uint128(a);\\n    }\\n}\\n\",\"keccak256\":\"0xf41503c5323320d0d4a8de4afddbc41c9e0fa205b8b0ee317bd4d98b411bb3ea\",\"license\":\"Apache-2.0\"},\"src/contracts-utils/v06/OwnableV06.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2019 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\nimport \\\"./interfaces/IOwnableV06.sol\\\";\\nimport \\\"./errors/LibRichErrorsV06.sol\\\";\\nimport \\\"./errors/LibOwnableRichErrorsV06.sol\\\";\\n\\ncontract OwnableV06 is IOwnableV06 {\\n    /// @dev The owner of this contract.\\n    /// @return 0 The owner address.\\n    address public override owner;\\n\\n    constructor() public {\\n        owner = msg.sender;\\n    }\\n\\n    modifier onlyOwner() {\\n        _assertSenderIsOwner();\\n        _;\\n    }\\n\\n    /// @dev Change the owner of this contract.\\n    /// @param newOwner New owner address.\\n    function transferOwnership(address newOwner) public override onlyOwner {\\n        if (newOwner == address(0)) {\\n            LibRichErrorsV06.rrevert(LibOwnableRichErrorsV06.TransferOwnerToZeroError());\\n        } else {\\n            owner = newOwner;\\n            emit OwnershipTransferred(msg.sender, newOwner);\\n        }\\n    }\\n\\n    function _assertSenderIsOwner() internal view {\\n        if (msg.sender != owner) {\\n            LibRichErrorsV06.rrevert(LibOwnableRichErrorsV06.OnlyOwnerError(msg.sender, owner));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1698236a38bc5794a5c4243ebc0597f8fc4c3a52d3226aaed5c0cfc9aaa44dd1\",\"license\":\"Apache-2.0\"},\"src/contracts-utils/v06/errors/LibAuthorizableRichErrorsV06.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\nlibrary LibAuthorizableRichErrorsV06 {\\n    // bytes4(keccak256(\\\"AuthorizedAddressMismatchError(address,address)\\\"))\\n    bytes4 internal constant AUTHORIZED_ADDRESS_MISMATCH_ERROR_SELECTOR = 0x140a84db;\\n\\n    // bytes4(keccak256(\\\"IndexOutOfBoundsError(uint256,uint256)\\\"))\\n    bytes4 internal constant INDEX_OUT_OF_BOUNDS_ERROR_SELECTOR = 0xe9f83771;\\n\\n    // bytes4(keccak256(\\\"SenderNotAuthorizedError(address)\\\"))\\n    bytes4 internal constant SENDER_NOT_AUTHORIZED_ERROR_SELECTOR = 0xb65a25b9;\\n\\n    // bytes4(keccak256(\\\"TargetAlreadyAuthorizedError(address)\\\"))\\n    bytes4 internal constant TARGET_ALREADY_AUTHORIZED_ERROR_SELECTOR = 0xde16f1a0;\\n\\n    // bytes4(keccak256(\\\"TargetNotAuthorizedError(address)\\\"))\\n    bytes4 internal constant TARGET_NOT_AUTHORIZED_ERROR_SELECTOR = 0xeb5108a2;\\n\\n    // bytes4(keccak256(\\\"ZeroCantBeAuthorizedError()\\\"))\\n    bytes internal constant ZERO_CANT_BE_AUTHORIZED_ERROR_BYTES = hex\\\"57654fe4\\\";\\n\\n    function AuthorizedAddressMismatchError(address authorized, address target) internal pure returns (bytes memory) {\\n        return abi.encodeWithSelector(AUTHORIZED_ADDRESS_MISMATCH_ERROR_SELECTOR, authorized, target);\\n    }\\n\\n    function IndexOutOfBoundsError(uint256 index, uint256 length) internal pure returns (bytes memory) {\\n        return abi.encodeWithSelector(INDEX_OUT_OF_BOUNDS_ERROR_SELECTOR, index, length);\\n    }\\n\\n    function SenderNotAuthorizedError(address sender) internal pure returns (bytes memory) {\\n        return abi.encodeWithSelector(SENDER_NOT_AUTHORIZED_ERROR_SELECTOR, sender);\\n    }\\n\\n    function TargetAlreadyAuthorizedError(address target) internal pure returns (bytes memory) {\\n        return abi.encodeWithSelector(TARGET_ALREADY_AUTHORIZED_ERROR_SELECTOR, target);\\n    }\\n\\n    function TargetNotAuthorizedError(address target) internal pure returns (bytes memory) {\\n        return abi.encodeWithSelector(TARGET_NOT_AUTHORIZED_ERROR_SELECTOR, target);\\n    }\\n\\n    function ZeroCantBeAuthorizedError() internal pure returns (bytes memory) {\\n        return ZERO_CANT_BE_AUTHORIZED_ERROR_BYTES;\\n    }\\n}\\n\",\"keccak256\":\"0x1d0d31f9c72307de21b7a959eadebb837fa2fff86ff48d2edbd40525b5fc698e\",\"license\":\"Apache-2.0\"},\"src/contracts-utils/v06/errors/LibBytesRichErrorsV06.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\nlibrary LibBytesRichErrorsV06 {\\n    enum InvalidByteOperationErrorCodes {\\n        FromLessThanOrEqualsToRequired,\\n        ToLessThanOrEqualsLengthRequired,\\n        LengthGreaterThanZeroRequired,\\n        LengthGreaterThanOrEqualsFourRequired,\\n        LengthGreaterThanOrEqualsTwentyRequired,\\n        LengthGreaterThanOrEqualsThirtyTwoRequired,\\n        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\\n        DestinationLengthGreaterThanOrEqualSourceLengthRequired\\n    }\\n\\n    // bytes4(keccak256(\\\"InvalidByteOperationError(uint8,uint256,uint256)\\\"))\\n    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR = 0x28006595;\\n\\n    function InvalidByteOperationError(\\n        InvalidByteOperationErrorCodes errorCode,\\n        uint256 offset,\\n        uint256 required\\n    ) internal pure returns (bytes memory) {\\n        return abi.encodeWithSelector(INVALID_BYTE_OPERATION_ERROR_SELECTOR, errorCode, offset, required);\\n    }\\n}\\n\",\"keccak256\":\"0x53f172b5aaf453b6372471ab3918bb0c1611ff38c8ad30f1a955f2453fa499c3\",\"license\":\"Apache-2.0\"},\"src/contracts-utils/v06/errors/LibMathRichErrorsV06.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\nlibrary LibMathRichErrorsV06 {\\n    // bytes4(keccak256(\\\"DivisionByZeroError()\\\"))\\n    bytes internal constant DIVISION_BY_ZERO_ERROR = hex\\\"a791837c\\\";\\n\\n    // bytes4(keccak256(\\\"RoundingError(uint256,uint256,uint256)\\\"))\\n    bytes4 internal constant ROUNDING_ERROR_SELECTOR = 0x339f3de2;\\n\\n    function DivisionByZeroError() internal pure returns (bytes memory) {\\n        return DIVISION_BY_ZERO_ERROR;\\n    }\\n\\n    function RoundingError(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 target\\n    ) internal pure returns (bytes memory) {\\n        return abi.encodeWithSelector(ROUNDING_ERROR_SELECTOR, numerator, denominator, target);\\n    }\\n}\\n\",\"keccak256\":\"0x351f2d05a070f1de7c57d2f246c9e8cea8c15037cdbe228aec6948cca02641c3\",\"license\":\"Apache-2.0\"},\"src/contracts-utils/v06/errors/LibOwnableRichErrorsV06.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\npragma solidity ^0.6.5;\\n\\nlibrary LibOwnableRichErrorsV06 {\\n    // bytes4(keccak256(\\\"OnlyOwnerError(address,address)\\\"))\\n    bytes4 internal constant ONLY_OWNER_ERROR_SELECTOR = 0x1de45ad1;\\n\\n    // bytes4(keccak256(\\\"TransferOwnerToZeroError()\\\"))\\n    bytes internal constant TRANSFER_OWNER_TO_ZERO_ERROR_BYTES = hex\\\"e69edc3e\\\";\\n\\n    function OnlyOwnerError(address sender, address owner) internal pure returns (bytes memory) {\\n        return abi.encodeWithSelector(ONLY_OWNER_ERROR_SELECTOR, sender, owner);\\n    }\\n\\n    function TransferOwnerToZeroError() internal pure returns (bytes memory) {\\n        return TRANSFER_OWNER_TO_ZERO_ERROR_BYTES;\\n    }\\n}\\n\",\"keccak256\":\"0xf591ef7df451ae8cb859a67ef9a89c8cae00bbe4d27cb746e8fcbdf1c689e25e\",\"license\":\"Apache-2.0\"},\"src/contracts-utils/v06/errors/LibRichErrorsV06.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\nlibrary LibRichErrorsV06 {\\n    // bytes4(keccak256(\\\"Error(string)\\\"))\\n    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\\n\\n    /// @dev ABI encode a standard, string revert error payload.\\n    ///      This is the same payload that would be included by a `revert(string)`\\n    ///      solidity statement. It has the function signature `Error(string)`.\\n    /// @param message The error string.\\n    /// @return The ABI encoded error.\\n    function StandardError(string memory message) internal pure returns (bytes memory) {\\n        return abi.encodeWithSelector(STANDARD_ERROR_SELECTOR, bytes(message));\\n    }\\n\\n    /// @dev Reverts an encoded rich revert reason `errorData`.\\n    /// @param errorData ABI encoded error data.\\n    function rrevert(bytes memory errorData) internal pure {\\n        assembly {\\n            revert(add(errorData, 0x20), mload(errorData))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x94011e576f60b0c5490c9424503a7ef0c9ebb57d1d9573372c87da0ede38f674\",\"license\":\"Apache-2.0\"},\"src/contracts-utils/v06/errors/LibSafeMathRichErrorsV06.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\nlibrary LibSafeMathRichErrorsV06 {\\n    // bytes4(keccak256(\\\"Uint256BinOpError(uint8,uint256,uint256)\\\"))\\n    bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR = 0xe946c1bb;\\n\\n    // bytes4(keccak256(\\\"Uint256DowncastError(uint8,uint256)\\\"))\\n    bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR = 0xc996af7b;\\n\\n    enum BinOpErrorCodes {\\n        ADDITION_OVERFLOW,\\n        MULTIPLICATION_OVERFLOW,\\n        SUBTRACTION_UNDERFLOW,\\n        DIVISION_BY_ZERO\\n    }\\n\\n    enum DowncastErrorCodes {\\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT32,\\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT64,\\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT96,\\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128\\n    }\\n\\n    function Uint256BinOpError(BinOpErrorCodes errorCode, uint256 a, uint256 b) internal pure returns (bytes memory) {\\n        return abi.encodeWithSelector(UINT256_BINOP_ERROR_SELECTOR, errorCode, a, b);\\n    }\\n\\n    function Uint256DowncastError(DowncastErrorCodes errorCode, uint256 a) internal pure returns (bytes memory) {\\n        return abi.encodeWithSelector(UINT256_DOWNCAST_ERROR_SELECTOR, errorCode, a);\\n    }\\n}\\n\",\"keccak256\":\"0xfb01cc2d90995a03f1f72b00226e089d1bf2acf36fe2c115b08ccf048e26cf6b\",\"license\":\"Apache-2.0\"},\"src/contracts-utils/v06/interfaces/IAuthorizableV06.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\nimport \\\"./IOwnableV06.sol\\\";\\n\\ninterface IAuthorizableV06 is IOwnableV06 {\\n    // Event logged when a new address is authorized.\\n    event AuthorizedAddressAdded(address indexed target, address indexed caller);\\n\\n    // Event logged when a currently authorized address is unauthorized.\\n    event AuthorizedAddressRemoved(address indexed target, address indexed caller);\\n\\n    /// @dev Authorizes an address.\\n    /// @param target Address to authorize.\\n    function addAuthorizedAddress(address target) external;\\n\\n    /// @dev Removes authorizion of an address.\\n    /// @param target Address to remove authorization from.\\n    function removeAuthorizedAddress(address target) external;\\n\\n    /// @dev Removes authorizion of an address.\\n    /// @param target Address to remove authorization from.\\n    /// @param index Index of target in authorities array.\\n    function removeAuthorizedAddressAtIndex(address target, uint256 index) external;\\n\\n    /// @dev Gets all authorized addresses.\\n    /// @return authorizedAddresses Array of authorized addresses.\\n    function getAuthorizedAddresses() external view returns (address[] memory authorizedAddresses);\\n\\n    /// @dev Whether an adderss is authorized to call privileged functions.\\n    /// @param addr Address to query.\\n    /// @return isAuthorized Whether the address is authorized.\\n    function authorized(address addr) external view returns (bool isAuthorized);\\n\\n    /// @dev All addresseses authorized to call privileged functions.\\n    /// @param idx Index of authorized address.\\n    /// @return addr Authorized address.\\n    function authorities(uint256 idx) external view returns (address addr);\\n}\\n\",\"keccak256\":\"0xb46e1771c41a58c8dc9ae28b35128f6f6d6efaa959709577c047610e43d9b152\",\"license\":\"Apache-2.0\"},\"src/contracts-utils/v06/interfaces/IOwnableV06.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\ninterface IOwnableV06 {\\n    /// @dev Emitted by Ownable when ownership is transferred.\\n    /// @param previousOwner The previous owner of the contract.\\n    /// @param newOwner The new owner of the contract.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @dev Transfers ownership of the contract to a new address.\\n    /// @param newOwner The address that will become the owner.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @dev The owner of this contract.\\n    /// @return ownerAddress The owner address.\\n    function owner() external view returns (address ownerAddress);\\n}\\n\",\"keccak256\":\"0xeece431192381bde56ade8a936295e85a842a222c46c4df5d9e457aeb25b6fb8\",\"license\":\"Apache-2.0\"},\"src/zero-ex/ZeroEx.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../contracts-utils/v06/LibBytesV06.sol\\\";\\nimport \\\"./migrations/LibBootstrap.sol\\\";\\nimport \\\"./features/BootstrapFeature.sol\\\";\\nimport \\\"./storage/LibProxyStorage.sol\\\";\\nimport \\\"./errors/LibProxyRichErrors.sol\\\";\\n\\n\\n/// @dev An extensible proxy contract that serves as a universal entry point for\\n///      interacting with the 0x protocol.\\ncontract ZeroEx {\\n    // solhint-disable separate-by-one-line-in-contract,indent,var-name-mixedcase\\n    using LibBytesV06 for bytes;\\n\\n    /// @dev Construct this contract and register the `BootstrapFeature` feature.\\n    ///      After constructing this contract, `bootstrap()` should be called\\n    ///      by `bootstrap()` to seed the initial feature set.\\n    /// @param bootstrapper Who can call `bootstrap()`.\\n    constructor(address bootstrapper) public {\\n        // Temporarily create and register the bootstrap feature.\\n        // It will deregister itself after `bootstrap()` has been called.\\n        BootstrapFeature bootstrap = new BootstrapFeature(bootstrapper);\\n        LibProxyStorage.getStorage().impls[bootstrap.bootstrap.selector] =\\n            address(bootstrap);\\n    }\\n\\n    // solhint-disable state-visibility\\n\\n    /// @dev Forwards calls to the appropriate implementation contract.\\n    fallback() external payable {\\n        bytes4 selector = msg.data.readBytes4(0);\\n        address impl = getFunctionImplementation(selector);\\n        if (impl == address(0)) {\\n            _revertWithData(LibProxyRichErrors.NotImplementedError(selector));\\n        }\\n\\n        (bool success, bytes memory resultData) = impl.delegatecall(msg.data);\\n        if (!success) {\\n            _revertWithData(resultData);\\n        }\\n        _returnWithData(resultData);\\n    }\\n\\n    /// @dev Fallback for just receiving ether.\\n    receive() external payable {}\\n\\n    // solhint-enable state-visibility\\n\\n    /// @dev Get the implementation contract of a registered function.\\n    /// @param selector The function selector.\\n    /// @return impl The implementation contract address.\\n    function getFunctionImplementation(bytes4 selector)\\n        public\\n        view\\n        returns (address impl)\\n    {\\n        return LibProxyStorage.getStorage().impls[selector];\\n    }\\n\\n    /// @dev Revert with arbitrary bytes.\\n    /// @param data Revert data.\\n    function _revertWithData(bytes memory data) private pure {\\n        assembly { revert(add(data, 32), mload(data)) }\\n    }\\n\\n    /// @dev Return with arbitrary bytes.\\n    /// @param data Return data.\\n    function _returnWithData(bytes memory data) private pure {\\n        assembly { return(add(data, 32), mload(data)) }\\n    }\\n}\\n\",\"keccak256\":\"0x93b1082a7a8444f8b6e1087e6df4321aa86fe1b18990e9540d58d6462d64e338\",\"license\":\"Apache-2.0\"},\"src/zero-ex/errors/LibCommonRichErrors.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\n\\nlibrary LibCommonRichErrors {\\n\\n    // solhint-disable func-name-mixedcase\\n\\n    function OnlyCallableBySelfError(address sender)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"OnlyCallableBySelfError(address)\\\")),\\n            sender\\n        );\\n    }\\n\\n    function IllegalReentrancyError(bytes4 selector, uint256 reentrancyFlags)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"IllegalReentrancyError(bytes4,uint256)\\\")),\\n            selector,\\n            reentrancyFlags\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x73c4cc0dc27c71e96f5c5262ba349e39cda3051698c772f01f23b7c089762ebe\",\"license\":\"Apache-2.0\"},\"src/zero-ex/errors/LibMetaTransactionsRichErrors.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\n\\nlibrary LibMetaTransactionsRichErrors {\\n\\n    // solhint-disable func-name-mixedcase\\n\\n    function InvalidMetaTransactionsArrayLengthsError(\\n        uint256 mtxCount,\\n        uint256 signatureCount\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"InvalidMetaTransactionsArrayLengthsError(uint256,uint256)\\\")),\\n            mtxCount,\\n            signatureCount\\n        );\\n    }\\n\\n    function MetaTransactionUnsupportedFunctionError(\\n        bytes32 mtxHash,\\n        bytes4 selector\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"MetaTransactionUnsupportedFunctionError(bytes32,bytes4)\\\")),\\n            mtxHash,\\n            selector\\n        );\\n    }\\n\\n    function MetaTransactionWrongSenderError(\\n        bytes32 mtxHash,\\n        address sender,\\n        address expectedSender\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"MetaTransactionWrongSenderError(bytes32,address,address)\\\")),\\n            mtxHash,\\n            sender,\\n            expectedSender\\n        );\\n    }\\n\\n    function MetaTransactionExpiredError(\\n        bytes32 mtxHash,\\n        uint256 time,\\n        uint256 expirationTime\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"MetaTransactionExpiredError(bytes32,uint256,uint256)\\\")),\\n            mtxHash,\\n            time,\\n            expirationTime\\n        );\\n    }\\n\\n    function MetaTransactionGasPriceError(\\n        bytes32 mtxHash,\\n        uint256 gasPrice,\\n        uint256 minGasPrice,\\n        uint256 maxGasPrice\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"MetaTransactionGasPriceError(bytes32,uint256,uint256,uint256)\\\")),\\n            mtxHash,\\n            gasPrice,\\n            minGasPrice,\\n            maxGasPrice\\n        );\\n    }\\n\\n    function MetaTransactionInsufficientEthError(\\n        bytes32 mtxHash,\\n        uint256 ethBalance,\\n        uint256 ethRequired\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"MetaTransactionInsufficientEthError(bytes32,uint256,uint256)\\\")),\\n            mtxHash,\\n            ethBalance,\\n            ethRequired\\n        );\\n    }\\n\\n    function MetaTransactionInvalidSignatureError(\\n        bytes32 mtxHash,\\n        bytes memory signature,\\n        bytes memory errData\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"MetaTransactionInvalidSignatureError(bytes32,bytes,bytes)\\\")),\\n            mtxHash,\\n            signature,\\n            errData\\n        );\\n    }\\n\\n    function MetaTransactionAlreadyExecutedError(\\n        bytes32 mtxHash,\\n        uint256 executedBlockNumber\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"MetaTransactionAlreadyExecutedError(bytes32,uint256)\\\")),\\n            mtxHash,\\n            executedBlockNumber\\n        );\\n    }\\n\\n    function MetaTransactionCallFailedError(\\n        bytes32 mtxHash,\\n        bytes memory callData,\\n        bytes memory returnData\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"MetaTransactionCallFailedError(bytes32,bytes,bytes)\\\")),\\n            mtxHash,\\n            callData,\\n            returnData\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x2a33be3f58a24489704dbaadba07b270231462f74fbd3bf113087128abfc8f7d\",\"license\":\"Apache-2.0\"},\"src/zero-ex/errors/LibNativeOrdersRichErrors.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\n\\nlibrary LibNativeOrdersRichErrors {\\n\\n    // solhint-disable func-name-mixedcase\\n\\n    function ProtocolFeeRefundFailed(\\n        address receiver,\\n        uint256 refundAmount\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"ProtocolFeeRefundFailed(address,uint256)\\\")),\\n            receiver,\\n            refundAmount\\n        );\\n    }\\n\\n    function OrderNotFillableByOriginError(\\n        bytes32 orderHash,\\n        address txOrigin,\\n        address orderTxOrigin\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"OrderNotFillableByOriginError(bytes32,address,address)\\\")),\\n            orderHash,\\n            txOrigin,\\n            orderTxOrigin\\n        );\\n    }\\n\\n    function OrderNotFillableError(\\n        bytes32 orderHash,\\n        uint8 orderStatus\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"OrderNotFillableError(bytes32,uint8)\\\")),\\n            orderHash,\\n            orderStatus\\n        );\\n    }\\n\\n    function OrderNotSignedByMakerError(\\n        bytes32 orderHash,\\n        address signer,\\n        address maker\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"OrderNotSignedByMakerError(bytes32,address,address)\\\")),\\n            orderHash,\\n            signer,\\n            maker\\n        );\\n    }\\n\\n    function InvalidSignerError(\\n        address maker,\\n        address signer\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"InvalidSignerError(address,address)\\\")),\\n            maker,\\n            signer\\n        );\\n    }\\n\\n    function OrderNotFillableBySenderError(\\n        bytes32 orderHash,\\n        address sender,\\n        address orderSender\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"OrderNotFillableBySenderError(bytes32,address,address)\\\")),\\n            orderHash,\\n            sender,\\n            orderSender\\n        );\\n    }\\n\\n    function OrderNotFillableByTakerError(\\n        bytes32 orderHash,\\n        address taker,\\n        address orderTaker\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"OrderNotFillableByTakerError(bytes32,address,address)\\\")),\\n            orderHash,\\n            taker,\\n            orderTaker\\n        );\\n    }\\n\\n    function CancelSaltTooLowError(\\n        uint256 minValidSalt,\\n        uint256 oldMinValidSalt\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"CancelSaltTooLowError(uint256,uint256)\\\")),\\n            minValidSalt,\\n            oldMinValidSalt\\n        );\\n    }\\n\\n    function FillOrKillFailedError(\\n        bytes32 orderHash,\\n        uint256 takerTokenFilledAmount,\\n        uint256 takerTokenFillAmount\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"FillOrKillFailedError(bytes32,uint256,uint256)\\\")),\\n            orderHash,\\n            takerTokenFilledAmount,\\n            takerTokenFillAmount\\n        );\\n    }\\n\\n    function OnlyOrderMakerAllowed(\\n        bytes32 orderHash,\\n        address sender,\\n        address maker\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"OnlyOrderMakerAllowed(bytes32,address,address)\\\")),\\n            orderHash,\\n            sender,\\n            maker\\n        );\\n    }\\n\\n    function BatchFillIncompleteError(\\n        bytes32 orderHash,\\n        uint256 takerTokenFilledAmount,\\n        uint256 takerTokenFillAmount\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"BatchFillIncompleteError(bytes32,uint256,uint256)\\\")),\\n            orderHash,\\n            takerTokenFilledAmount,\\n            takerTokenFillAmount\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xac30e78055912f30d30bffcb75fd26a9801230f3fdeb22514d6fefec3e4487be\",\"license\":\"Apache-2.0\"},\"src/zero-ex/errors/LibOwnableRichErrors.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\n\\nlibrary LibOwnableRichErrors {\\n\\n    // solhint-disable func-name-mixedcase\\n\\n    function OnlyOwnerError(\\n        address sender,\\n        address owner\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"OnlyOwnerError(address,address)\\\")),\\n            sender,\\n            owner\\n        );\\n    }\\n\\n    function TransferOwnerToZeroError()\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"TransferOwnerToZeroError()\\\"))\\n        );\\n    }\\n\\n    function MigrateCallFailedError(address target, bytes memory resultData)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"MigrateCallFailedError(address,bytes)\\\")),\\n            target,\\n            resultData\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xddddbadb4349323acf3e8570c21d117ead3113a1b3869b3fa7ad123a22e9bad9\",\"license\":\"Apache-2.0\"},\"src/zero-ex/errors/LibProxyRichErrors.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\n\\nlibrary LibProxyRichErrors {\\n\\n    // solhint-disable func-name-mixedcase\\n\\n    function NotImplementedError(bytes4 selector)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"NotImplementedError(bytes4)\\\")),\\n            selector\\n        );\\n    }\\n\\n    function InvalidBootstrapCallerError(address actual, address expected)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"InvalidBootstrapCallerError(address,address)\\\")),\\n            actual,\\n            expected\\n        );\\n    }\\n\\n    function InvalidDieCallerError(address actual, address expected)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"InvalidDieCallerError(address,address)\\\")),\\n            actual,\\n            expected\\n        );\\n    }\\n\\n    function BootstrapCallFailedError(address target, bytes memory resultData)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"BootstrapCallFailedError(address,bytes)\\\")),\\n            target,\\n            resultData\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x3fd860fed46fbac099e6a47d3a09f92605c4079985a3b98fe6b2e22ca5bf15c2\",\"license\":\"Apache-2.0\"},\"src/zero-ex/errors/LibSignatureRichErrors.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\n\\nlibrary LibSignatureRichErrors {\\n\\n    enum SignatureValidationErrorCodes {\\n        ALWAYS_INVALID,\\n        INVALID_LENGTH,\\n        UNSUPPORTED,\\n        ILLEGAL,\\n        WRONG_SIGNER,\\n        BAD_SIGNATURE_DATA\\n    }\\n\\n    // solhint-disable func-name-mixedcase\\n\\n    function SignatureValidationError(\\n        SignatureValidationErrorCodes code,\\n        bytes32 hash,\\n        address signerAddress,\\n        bytes memory signature\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"SignatureValidationError(uint8,bytes32,address,bytes)\\\")),\\n            code,\\n            hash,\\n            signerAddress,\\n            signature\\n        );\\n    }\\n\\n    function SignatureValidationError(\\n        SignatureValidationErrorCodes code,\\n        bytes32 hash\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"SignatureValidationError(uint8,bytes32)\\\")),\\n            code,\\n            hash\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xed5ce173a4def5baf4c7b1ca44e9a7060b80fc1de95203410cc4a0ccbc12eda4\",\"license\":\"Apache-2.0\"},\"src/zero-ex/errors/LibSimpleFunctionRegistryRichErrors.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\n\\nlibrary LibSimpleFunctionRegistryRichErrors {\\n\\n    // solhint-disable func-name-mixedcase\\n\\n    function NotInRollbackHistoryError(bytes4 selector, address targetImpl)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"NotInRollbackHistoryError(bytes4,address)\\\")),\\n            selector,\\n            targetImpl\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x325b9bdf721ce8b7d200d35730ccad494c4c33dd5ccc77dcef0026780712056f\",\"license\":\"Apache-2.0\"},\"src/zero-ex/errors/LibTransformERC20RichErrors.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\n\\nlibrary LibTransformERC20RichErrors {\\n\\n    // solhint-disable func-name-mixedcase,separate-by-one-line-in-contract\\n\\n    function InsufficientEthAttachedError(\\n        uint256 ethAttached,\\n        uint256 ethNeeded\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"InsufficientEthAttachedError(uint256,uint256)\\\")),\\n            ethAttached,\\n            ethNeeded\\n        );\\n    }\\n\\n    function IncompleteTransformERC20Error(\\n        address outputToken,\\n        uint256 outputTokenAmount,\\n        uint256 minOutputTokenAmount\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"IncompleteTransformERC20Error(address,uint256,uint256)\\\")),\\n            outputToken,\\n            outputTokenAmount,\\n            minOutputTokenAmount\\n        );\\n    }\\n\\n    function NegativeTransformERC20OutputError(\\n        address outputToken,\\n        uint256 outputTokenLostAmount\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"NegativeTransformERC20OutputError(address,uint256)\\\")),\\n            outputToken,\\n            outputTokenLostAmount\\n        );\\n    }\\n\\n    function TransformerFailedError(\\n        address transformer,\\n        bytes memory transformerData,\\n        bytes memory resultData\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"TransformerFailedError(address,bytes,bytes)\\\")),\\n            transformer,\\n            transformerData,\\n            resultData\\n        );\\n    }\\n\\n    // Common Transformer errors ///////////////////////////////////////////////\\n\\n    function OnlyCallableByDeployerError(\\n        address caller,\\n        address deployer\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"OnlyCallableByDeployerError(address,address)\\\")),\\n            caller,\\n            deployer\\n        );\\n    }\\n\\n    function InvalidExecutionContextError(\\n        address actualContext,\\n        address expectedContext\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"InvalidExecutionContextError(address,address)\\\")),\\n            actualContext,\\n            expectedContext\\n        );\\n    }\\n\\n    enum InvalidTransformDataErrorCode {\\n        INVALID_TOKENS,\\n        INVALID_ARRAY_LENGTH\\n    }\\n\\n    function InvalidTransformDataError(\\n        InvalidTransformDataErrorCode errorCode,\\n        bytes memory transformData\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"InvalidTransformDataError(uint8,bytes)\\\")),\\n            errorCode,\\n            transformData\\n        );\\n    }\\n\\n    // FillQuoteTransformer errors /////////////////////////////////////////////\\n\\n    function IncompleteFillSellQuoteError(\\n        address sellToken,\\n        uint256 soldAmount,\\n        uint256 sellAmount\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"IncompleteFillSellQuoteError(address,uint256,uint256)\\\")),\\n            sellToken,\\n            soldAmount,\\n            sellAmount\\n        );\\n    }\\n\\n    function IncompleteFillBuyQuoteError(\\n        address buyToken,\\n        uint256 boughtAmount,\\n        uint256 buyAmount\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"IncompleteFillBuyQuoteError(address,uint256,uint256)\\\")),\\n            buyToken,\\n            boughtAmount,\\n            buyAmount\\n        );\\n    }\\n\\n    function InsufficientTakerTokenError(\\n        uint256 tokenBalance,\\n        uint256 tokensNeeded\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"InsufficientTakerTokenError(uint256,uint256)\\\")),\\n            tokenBalance,\\n            tokensNeeded\\n        );\\n    }\\n\\n    function InsufficientProtocolFeeError(\\n        uint256 ethBalance,\\n        uint256 ethNeeded\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"InsufficientProtocolFeeError(uint256,uint256)\\\")),\\n            ethBalance,\\n            ethNeeded\\n        );\\n    }\\n\\n    function InvalidERC20AssetDataError(\\n        bytes memory assetData\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"InvalidERC20AssetDataError(bytes)\\\")),\\n            assetData\\n        );\\n    }\\n\\n    function InvalidTakerFeeTokenError(\\n        address token\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"InvalidTakerFeeTokenError(address)\\\")),\\n            token\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xed7510c65a5cba0e6b168efdb8a6faa6b196e9dbf4d333a3f8539a1b6e3a8a4f\",\"license\":\"Apache-2.0\"},\"src/zero-ex/errors/LibWalletRichErrors.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\n\\nlibrary LibWalletRichErrors {\\n\\n    // solhint-disable func-name-mixedcase\\n\\n    function WalletExecuteCallFailedError(\\n        address wallet,\\n        address callTarget,\\n        bytes memory callData,\\n        uint256 callValue,\\n        bytes memory errorData\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"WalletExecuteCallFailedError(address,address,bytes,uint256,bytes)\\\")),\\n            wallet,\\n            callTarget,\\n            callData,\\n            callValue,\\n            errorData\\n        );\\n    }\\n\\n    function WalletExecuteDelegateCallFailedError(\\n        address wallet,\\n        address callTarget,\\n        bytes memory callData,\\n        bytes memory errorData\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"WalletExecuteDelegateCallFailedError(address,address,bytes,bytes)\\\")),\\n            wallet,\\n            callTarget,\\n            callData,\\n            errorData\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xbbab69f73dfbe769bed55e4918293f86216a85277a117010aa24228712a1c78c\",\"license\":\"Apache-2.0\"},\"src/zero-ex/external/FeeCollector.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../contracts-erc20/v06/IEtherTokenV06.sol\\\";\\nimport \\\"../../contracts-utils/v06/AuthorizableV06.sol\\\";\\nimport \\\"../vendor/v3/IStaking.sol\\\";\\n\\n/// @dev The collector contract for protocol fees\\ncontract FeeCollector is AuthorizableV06 {\\n    /// @dev Allow ether transfers to the collector.\\n    receive() external payable { }\\n\\n    constructor() public {\\n        _addAuthorizedAddress(msg.sender);\\n    }\\n\\n    /// @dev   Approve the staking contract and join a pool. Only an authority\\n    ///        can call this.\\n    /// @param weth The WETH contract.\\n    /// @param staking The staking contract.\\n    /// @param poolId The pool ID this contract is collecting fees for.\\n    function initialize(\\n        IEtherTokenV06 weth,\\n        IStaking staking,\\n        bytes32 poolId\\n    )\\n        external\\n        onlyAuthorized\\n    {\\n        weth.approve(address(staking), type(uint256).max);\\n        staking.joinStakingPoolAsMaker(poolId);\\n    }\\n\\n    /// @dev Convert all held ether to WETH. Only an authority can call this.\\n    /// @param weth The WETH contract.\\n    function convertToWeth(\\n        IEtherTokenV06 weth\\n    )\\n        external\\n        onlyAuthorized\\n    {\\n        if (address(this).balance > 0) {\\n            weth.deposit{value: address(this).balance}();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc85bb864144539a49dc59a252c30d8a2766867195be00190e395abdbc3e4eae5\",\"license\":\"Apache-2.0\"},\"src/zero-ex/external/FeeCollectorController.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../contracts-erc20/v06/IEtherTokenV06.sol\\\";\\nimport \\\"../vendor/v3/IStaking.sol\\\";\\nimport \\\"./FeeCollector.sol\\\";\\nimport \\\"./LibFeeCollector.sol\\\";\\n\\n\\n/// @dev A contract that manages `FeeCollector` contracts.\\ncontract FeeCollectorController {\\n\\n    /// @dev Hash of the fee collector init code.\\n    bytes32 public immutable FEE_COLLECTOR_INIT_CODE_HASH;\\n    /// @dev The WETH contract.\\n    IEtherTokenV06 private immutable WETH;\\n    /// @dev The staking contract.\\n    IStaking private immutable STAKING;\\n\\n    constructor(\\n        IEtherTokenV06 weth,\\n        IStaking staking\\n    )\\n        public\\n    {\\n        FEE_COLLECTOR_INIT_CODE_HASH = keccak256(type(FeeCollector).creationCode);\\n        WETH = weth;\\n        STAKING = staking;\\n    }\\n\\n    /// @dev Deploy (if needed) a `FeeCollector` contract for `poolId`\\n    ///      and wrap its ETH into WETH. Anyone may call this.\\n    /// @param poolId The pool ID associated with the staking pool.\\n    /// @return feeCollector The `FeeCollector` contract instance.\\n    function prepareFeeCollectorToPayFees(bytes32 poolId)\\n        external\\n        returns (FeeCollector feeCollector)\\n    {\\n        feeCollector = getFeeCollector(poolId);\\n        uint256 codeSize;\\n        assembly {\\n            codeSize := extcodesize(feeCollector)\\n        }\\n\\n        if (codeSize == 0) {\\n            // Create and initialize the contract if necessary.\\n            new FeeCollector{salt: bytes32(poolId)}();\\n            feeCollector.initialize(WETH, STAKING, poolId);\\n        }\\n\\n        if (address(feeCollector).balance > 1) {\\n            feeCollector.convertToWeth(WETH);\\n        }\\n\\n        return feeCollector;\\n    }\\n\\n    /// @dev Get the `FeeCollector` contract for a given pool ID. The contract\\n    ///      will not actually exist until `prepareFeeCollectorToPayFees()`\\n    ///      has been called once.\\n    /// @param poolId The pool ID associated with the staking pool.\\n    /// @return feeCollector The `FeeCollector` contract instance.\\n    function getFeeCollector(bytes32 poolId)\\n        public\\n        view\\n        returns (FeeCollector feeCollector)\\n    {\\n        return FeeCollector(LibFeeCollector.getFeeCollectorAddress(\\n            address(this),\\n            FEE_COLLECTOR_INIT_CODE_HASH,\\n            poolId\\n        ));\\n    }\\n}\\n\",\"keccak256\":\"0x59dae380ab5b40bd88b39c5ca197afe04f23992f19c469b5fccd3cac1c498f8c\",\"license\":\"Apache-2.0\"},\"src/zero-ex/external/FlashWallet.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../contracts-utils/v06/errors/LibRichErrorsV06.sol\\\";\\nimport \\\"../../contracts-utils/v06/errors/LibOwnableRichErrorsV06.sol\\\";\\nimport \\\"../errors/LibWalletRichErrors.sol\\\";\\nimport \\\"./IFlashWallet.sol\\\";\\n\\n\\n/// @dev A contract that can execute arbitrary calls from its owner.\\ncontract FlashWallet is\\n    IFlashWallet\\n{\\n    // solhint-disable no-unused-vars,indent,no-empty-blocks\\n    using LibRichErrorsV06 for bytes;\\n\\n    // solhint-disable\\n    /// @dev Store the owner/deployer as an immutable to make this contract stateless.\\n    address public override immutable owner;\\n    // solhint-enable\\n\\n    constructor() public {\\n        // The deployer is the owner.\\n        owner = msg.sender;\\n    }\\n\\n    /// @dev Allows only the (immutable) owner to call a function.\\n    modifier onlyOwner() virtual {\\n        if (msg.sender != owner) {\\n            LibOwnableRichErrorsV06.OnlyOwnerError(\\n                msg.sender,\\n                owner\\n            ).rrevert();\\n        }\\n        _;\\n    }\\n\\n    /// @dev Execute an arbitrary call. Only an authority can call this.\\n    /// @param target The call target.\\n    /// @param callData The call data.\\n    /// @param value Ether to attach to the call.\\n    /// @return resultData The data returned by the call.\\n    function executeCall(\\n        address payable target,\\n        bytes calldata callData,\\n        uint256 value\\n    )\\n        external\\n        payable\\n        override\\n        onlyOwner\\n        returns (bytes memory resultData)\\n    {\\n        bool success;\\n        (success, resultData) = target.call{value: value}(callData);\\n        if (!success) {\\n            LibWalletRichErrors\\n                .WalletExecuteCallFailedError(\\n                    address(this),\\n                    target,\\n                    callData,\\n                    value,\\n                    resultData\\n                )\\n                .rrevert();\\n        }\\n    }\\n\\n    /// @dev Execute an arbitrary delegatecall, in the context of this puppet.\\n    ///      Only an authority can call this.\\n    /// @param target The call target.\\n    /// @param callData The call data.\\n    /// @return resultData The data returned by the call.\\n    function executeDelegateCall(\\n        address payable target,\\n        bytes calldata callData\\n    )\\n        external\\n        payable\\n        override\\n        onlyOwner\\n        returns (bytes memory resultData)\\n    {\\n        bool success;\\n        (success, resultData) = target.delegatecall(callData);\\n        if (!success) {\\n            LibWalletRichErrors\\n                .WalletExecuteDelegateCallFailedError(\\n                    address(this),\\n                    target,\\n                    callData,\\n                    resultData\\n                )\\n                .rrevert();\\n        }\\n    }\\n\\n    // solhint-disable\\n    /// @dev Allows this contract to receive ether.\\n    receive() external override payable {}\\n    // solhint-enable\\n\\n    /// @dev Signal support for receiving ERC1155 tokens.\\n    /// @param interfaceID The interface ID, as per ERC-165 rules.\\n    /// @return hasSupport `true` if this contract supports an ERC-165 interface.\\n    function supportsInterface(bytes4 interfaceID)\\n        external\\n        pure\\n        returns (bool hasSupport)\\n    {\\n        return  interfaceID == this.supportsInterface.selector ||\\n                interfaceID == this.onERC1155Received.selector ^ this.onERC1155BatchReceived.selector ||\\n                interfaceID == this.tokenFallback.selector;\\n    }\\n\\n    ///  @dev Allow this contract to receive ERC1155 tokens.\\n    ///  @return success  `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n    function onERC1155Received(\\n        address, // operator,\\n        address, // from,\\n        uint256, // id,\\n        uint256, // value,\\n        bytes calldata //data\\n    )\\n        external\\n        pure\\n        returns (bytes4 success)\\n    {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    ///  @dev Allow this contract to receive ERC1155 tokens.\\n    ///  @return success  `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n    function onERC1155BatchReceived(\\n        address, // operator,\\n        address, // from,\\n        uint256[] calldata, // ids,\\n        uint256[] calldata, // values,\\n        bytes calldata // data\\n    )\\n        external\\n        pure\\n        returns (bytes4 success)\\n    {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n\\n    /// @dev Allows this contract to receive ERC223 tokens.\\n    function tokenFallback(\\n        address, // from,\\n        uint256, // value,\\n        bytes calldata // value\\n    )\\n        external\\n        pure\\n    {}\\n}\\n\",\"keccak256\":\"0xcdd9ca01f17c13f8f82a3b866fd1d3cbd5777c4f6934b103b4369bc68cbd3d18\",\"license\":\"Apache-2.0\"},\"src/zero-ex/external/IFlashWallet.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../contracts-utils/v06/interfaces/IOwnableV06.sol\\\";\\n\\n\\n/// @dev A contract that can execute arbitrary calls from its owner.\\ninterface IFlashWallet {\\n\\n    /// @dev Execute an arbitrary call. Only an authority can call this.\\n    /// @param target The call target.\\n    /// @param callData The call data.\\n    /// @param value Ether to attach to the call.\\n    /// @return resultData The data returned by the call.\\n    function executeCall(\\n        address payable target,\\n        bytes calldata callData,\\n        uint256 value\\n    )\\n        external\\n        payable\\n        returns (bytes memory resultData);\\n\\n    /// @dev Execute an arbitrary delegatecall, in the context of this puppet.\\n    ///      Only an authority can call this.\\n    /// @param target The call target.\\n    /// @param callData The call data.\\n    /// @return resultData The data returned by the call.\\n    function executeDelegateCall(\\n        address payable target,\\n        bytes calldata callData\\n    )\\n        external\\n        payable\\n        returns (bytes memory resultData);\\n\\n    /// @dev Allows the puppet to receive ETH.\\n    receive() external payable;\\n\\n    /// @dev Fetch the immutable owner/deployer of this contract.\\n    /// @return owner_ The immutable owner/deployer/\\n    function owner() external view returns (address owner_);\\n}\\n\",\"keccak256\":\"0x6964f58bfc4485061b987f633f9af53fb08db34755032a6fad26e3abb6e6b4bc\",\"license\":\"Apache-2.0\"},\"src/zero-ex/external/LibFeeCollector.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\n\\n/// @dev Helpers for computing `FeeCollector` contract addresses.\\nlibrary LibFeeCollector {\\n\\n    /// @dev Compute the CREATE2 address for a fee collector.\\n    /// @param controller The address of the `FeeCollectorController` contract.\\n    /// @param initCodeHash The init code hash of the `FeeCollector` contract.\\n    /// @param poolId The fee collector's pool ID.\\n    function getFeeCollectorAddress(address controller, bytes32 initCodeHash, bytes32 poolId)\\n        internal\\n        pure\\n        returns (address payable feeCollectorAddress)\\n    {\\n        // Compute the CREATE2 address for the fee collector.\\n        return address(uint256(keccak256(abi.encodePacked(\\n            byte(0xff),\\n            controller,\\n            poolId, // pool ID is salt\\n            initCodeHash\\n        ))));\\n    }\\n}\\n\",\"keccak256\":\"0x90f75b8bcb0b2401b01d95ebac6cf76008379055437587af9546c17bde391978\",\"license\":\"Apache-2.0\"},\"src/zero-ex/features/BootstrapFeature.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../contracts-utils/v06/errors/LibRichErrorsV06.sol\\\";\\nimport \\\"../migrations/LibBootstrap.sol\\\";\\nimport \\\"../storage/LibProxyStorage.sol\\\";\\nimport \\\"./interfaces/IBootstrapFeature.sol\\\";\\n\\n\\n/// @dev Detachable `bootstrap()` feature.\\ncontract BootstrapFeature is\\n    IBootstrapFeature\\n{\\n    // solhint-disable state-visibility,indent\\n    /// @dev The ZeroEx contract.\\n    ///      This has to be immutable to persist across delegatecalls.\\n    address immutable private _deployer;\\n    /// @dev The implementation address of this contract.\\n    ///      This has to be immutable to persist across delegatecalls.\\n    address immutable private _implementation;\\n    /// @dev The deployer.\\n    ///      This has to be immutable to persist across delegatecalls.\\n    address immutable private _bootstrapCaller;\\n    // solhint-enable state-visibility,indent\\n\\n    using LibRichErrorsV06 for bytes;\\n\\n    /// @dev Construct this contract and set the bootstrap migration contract.\\n    ///      After constructing this contract, `bootstrap()` should be called\\n    ///      to seed the initial feature set.\\n    /// @param bootstrapCaller The allowed caller of `bootstrap()`.\\n    constructor(address bootstrapCaller) public {\\n        _deployer = msg.sender;\\n        _implementation = address(this);\\n        _bootstrapCaller = bootstrapCaller;\\n    }\\n\\n    /// @dev Bootstrap the initial feature set of this contract by delegatecalling\\n    ///      into `target`. Before exiting the `bootstrap()` function will\\n    ///      deregister itself from the proxy to prevent being called again.\\n    /// @param target The bootstrapper contract address.\\n    /// @param callData The call data to execute on `target`.\\n    function bootstrap(address target, bytes calldata callData) external override {\\n        // Only the bootstrap caller can call this function.\\n        if (msg.sender != _bootstrapCaller) {\\n            LibProxyRichErrors.InvalidBootstrapCallerError(\\n                msg.sender,\\n                _bootstrapCaller\\n            ).rrevert();\\n        }\\n        // Deregister.\\n        LibProxyStorage.getStorage().impls[this.bootstrap.selector] = address(0);\\n        // Self-destruct.\\n        BootstrapFeature(_implementation).die();\\n        // Call the bootstrapper.\\n        LibBootstrap.delegatecallBootstrapFunction(target, callData);\\n    }\\n\\n    /// @dev Self-destructs this contract.\\n    ///      Can only be called by the deployer.\\n    function die() external {\\n        assert(address(this) == _implementation);\\n        if (msg.sender != _deployer) {\\n            LibProxyRichErrors.InvalidDieCallerError(msg.sender, _deployer).rrevert();\\n        }\\n        selfdestruct(msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x2a94d337d709a2f2e2aee2d85aea82dd1844db5790490036d9bd885bd4e9326c\",\"license\":\"Apache-2.0\"},\"src/zero-ex/features/MetaTransactionsFeature.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../contracts-utils/v06/errors/LibRichErrorsV06.sol\\\";\\nimport \\\"../../contracts-utils/v06/LibBytesV06.sol\\\";\\nimport \\\"../../contracts-utils/v06/LibSafeMathV06.sol\\\";\\nimport \\\"../errors/LibMetaTransactionsRichErrors.sol\\\";\\nimport \\\"../fixins/FixinCommon.sol\\\";\\nimport \\\"../fixins/FixinReentrancyGuard.sol\\\";\\nimport \\\"../fixins/FixinTokenSpender.sol\\\";\\nimport \\\"../fixins/FixinEIP712.sol\\\";\\nimport \\\"../migrations/LibMigrate.sol\\\";\\nimport \\\"../storage/LibMetaTransactionsStorage.sol\\\";\\nimport \\\"./interfaces/IFeature.sol\\\";\\nimport \\\"./interfaces/IMetaTransactionsFeature.sol\\\";\\nimport \\\"./interfaces/INativeOrdersFeature.sol\\\";\\nimport \\\"./interfaces/ITransformERC20Feature.sol\\\";\\nimport \\\"./libs/LibSignature.sol\\\";\\n\\n/// @dev MetaTransactions feature.\\ncontract MetaTransactionsFeature is\\n    IFeature,\\n    IMetaTransactionsFeature,\\n    FixinCommon,\\n    FixinReentrancyGuard,\\n    FixinEIP712,\\n    FixinTokenSpender\\n{\\n    using LibBytesV06 for bytes;\\n    using LibRichErrorsV06 for bytes;\\n\\n    /// @dev Describes the state of a meta transaction.\\n    struct ExecuteState {\\n        // Sender of the meta-transaction.\\n        address sender;\\n        // Hash of the meta-transaction data.\\n        bytes32 hash;\\n        // The meta-transaction data.\\n        MetaTransactionData mtx;\\n        // The meta-transaction signature (by `mtx.signer`).\\n        LibSignature.Signature signature;\\n        // The selector of the function being called.\\n        bytes4 selector;\\n        // The ETH balance of this contract before performing the call.\\n        uint256 selfBalance;\\n        // The block number at which the meta-transaction was executed.\\n        uint256 executedBlockNumber;\\n    }\\n\\n    /// @dev Arguments for a `TransformERC20.transformERC20()` call.\\n    struct ExternalTransformERC20Args {\\n        IERC20TokenV06 inputToken;\\n        IERC20TokenV06 outputToken;\\n        uint256 inputTokenAmount;\\n        uint256 minOutputTokenAmount;\\n        ITransformERC20Feature.Transformation[] transformations;\\n    }\\n\\n    /// @dev Name of this feature.\\n    string public constant override FEATURE_NAME = \\\"MetaTransactions\\\";\\n    /// @dev Version of this feature.\\n    uint256 public immutable override FEATURE_VERSION = _encodeVersion(1, 2, 1);\\n    /// @dev EIP712 typehash of the `MetaTransactionData` struct.\\n    bytes32 public immutable MTX_EIP712_TYPEHASH = keccak256(\\n        \\\"MetaTransactionData(\\\"\\n            \\\"address signer,\\\"\\n            \\\"address sender,\\\"\\n            \\\"uint256 minGasPrice,\\\"\\n            \\\"uint256 maxGasPrice,\\\"\\n            \\\"uint256 expirationTimeSeconds,\\\"\\n            \\\"uint256 salt,\\\"\\n            \\\"bytes callData,\\\"\\n            \\\"uint256 value,\\\"\\n            \\\"address feeToken,\\\"\\n            \\\"uint256 feeAmount\\\"\\n        \\\")\\\"\\n    );\\n\\n    /// @dev Refunds up to `msg.value` leftover ETH at the end of the call.\\n    modifier refundsAttachedEth() {\\n        _;\\n        uint256 remainingBalance =\\n            LibSafeMathV06.min256(msg.value, address(this).balance);\\n        if (remainingBalance > 0) {\\n            msg.sender.transfer(remainingBalance);\\n        }\\n    }\\n\\n    /// @dev Ensures that the ETH balance of `this` does not go below the\\n    ///      initial ETH balance before the call (excluding ETH attached to the call).\\n    modifier doesNotReduceEthBalance() {\\n        uint256 initialBalance = address(this).balance - msg.value;\\n        _;\\n        require(\\n            initialBalance <= address(this).balance,\\n            \\\"MetaTransactionsFeature/ETH_LEAK\\\"\\n        );\\n    }\\n\\n    constructor(address zeroExAddress)\\n        public\\n        FixinCommon()\\n        FixinEIP712(zeroExAddress)\\n    {\\n        // solhint-disable-next-line no-empty-blocks\\n    }\\n\\n    /// @dev Initialize and register this feature.\\n    ///      Should be delegatecalled by `Migrate.migrate()`.\\n    /// @return success `LibMigrate.SUCCESS` on success.\\n    function migrate()\\n        external\\n        returns (bytes4 success)\\n    {\\n        _registerFeatureFunction(this.executeMetaTransaction.selector);\\n        _registerFeatureFunction(this.batchExecuteMetaTransactions.selector);\\n        _registerFeatureFunction(this.getMetaTransactionExecutedBlock.selector);\\n        _registerFeatureFunction(this.getMetaTransactionHashExecutedBlock.selector);\\n        _registerFeatureFunction(this.getMetaTransactionHash.selector);\\n        return LibMigrate.MIGRATE_SUCCESS;\\n    }\\n\\n    /// @dev Execute a single meta-transaction.\\n    /// @param mtx The meta-transaction.\\n    /// @param signature The signature by `mtx.signer`.\\n    /// @return returnResult The ABI-encoded result of the underlying call.\\n    function executeMetaTransaction(\\n        MetaTransactionData memory mtx,\\n        LibSignature.Signature memory signature\\n    )\\n        public\\n        payable\\n        override\\n        nonReentrant(REENTRANCY_MTX)\\n        doesNotReduceEthBalance\\n        refundsAttachedEth\\n        returns (bytes memory returnResult)\\n    {\\n        ExecuteState memory state;\\n        state.sender = msg.sender;\\n        state.mtx = mtx;\\n        state.hash = getMetaTransactionHash(mtx);\\n        state.signature = signature;\\n\\n        returnResult = _executeMetaTransactionPrivate(state);\\n    }\\n\\n    /// @dev Execute multiple meta-transactions.\\n    /// @param mtxs The meta-transactions.\\n    /// @param signatures The signature by each respective `mtx.signer`.\\n    /// @return returnResults The ABI-encoded results of the underlying calls.\\n    function batchExecuteMetaTransactions(\\n        MetaTransactionData[] memory mtxs,\\n        LibSignature.Signature[] memory signatures\\n    )\\n        public\\n        payable\\n        override\\n        nonReentrant(REENTRANCY_MTX)\\n        doesNotReduceEthBalance\\n        refundsAttachedEth\\n        returns (bytes[] memory returnResults)\\n    {\\n        if (mtxs.length != signatures.length) {\\n            LibMetaTransactionsRichErrors.InvalidMetaTransactionsArrayLengthsError(\\n                mtxs.length,\\n                signatures.length\\n            ).rrevert();\\n        }\\n        returnResults = new bytes[](mtxs.length);\\n        for (uint256 i = 0; i < mtxs.length; ++i) {\\n            ExecuteState memory state;\\n            state.sender = msg.sender;\\n            state.mtx = mtxs[i];\\n            state.hash = getMetaTransactionHash(mtxs[i]);\\n            state.signature = signatures[i];\\n\\n            returnResults[i] = _executeMetaTransactionPrivate(state);\\n        }\\n    }\\n\\n    /// @dev Get the block at which a meta-transaction has been executed.\\n    /// @param mtx The meta-transaction.\\n    /// @return blockNumber The block height when the meta-transactioin was executed.\\n    function getMetaTransactionExecutedBlock(MetaTransactionData memory mtx)\\n        public\\n        override\\n        view\\n        returns (uint256 blockNumber)\\n    {\\n        return getMetaTransactionHashExecutedBlock(getMetaTransactionHash(mtx));\\n    }\\n\\n    /// @dev Get the block at which a meta-transaction hash has been executed.\\n    /// @param mtxHash The meta-transaction hash.\\n    /// @return blockNumber The block height when the meta-transactioin was executed.\\n    function getMetaTransactionHashExecutedBlock(bytes32 mtxHash)\\n        public\\n        override\\n        view\\n        returns (uint256 blockNumber)\\n    {\\n        return LibMetaTransactionsStorage.getStorage().mtxHashToExecutedBlockNumber[mtxHash];\\n    }\\n\\n    /// @dev Get the EIP712 hash of a meta-transaction.\\n    /// @param mtx The meta-transaction.\\n    /// @return mtxHash The EIP712 hash of `mtx`.\\n    function getMetaTransactionHash(MetaTransactionData memory mtx)\\n        public\\n        override\\n        view\\n        returns (bytes32 mtxHash)\\n    {\\n        return _getEIP712Hash(keccak256(abi.encode(\\n            MTX_EIP712_TYPEHASH,\\n            mtx.signer,\\n            mtx.sender,\\n            mtx.minGasPrice,\\n            mtx.maxGasPrice,\\n            mtx.expirationTimeSeconds,\\n            mtx.salt,\\n            keccak256(mtx.callData),\\n            mtx.value,\\n            mtx.feeToken,\\n            mtx.feeAmount\\n        )));\\n    }\\n\\n    /// @dev Execute a meta-transaction by `sender`. Low-level, hidden variant.\\n    /// @param state The `ExecuteState` for this metatransaction, with `sender`,\\n    ///              `hash`, `mtx`, and `signature` fields filled.\\n    /// @return returnResult The ABI-encoded result of the underlying call.\\n    function _executeMetaTransactionPrivate(ExecuteState memory state)\\n        private\\n        returns (bytes memory returnResult)\\n    {\\n        _validateMetaTransaction(state);\\n\\n        // Mark the transaction executed by storing the block at which it was executed.\\n        // Currently the block number just indicates that the mtx was executed and\\n        // serves no other purpose from within this contract.\\n        LibMetaTransactionsStorage.getStorage()\\n            .mtxHashToExecutedBlockNumber[state.hash] = block.number;\\n\\n        // Pay the fee to the sender.\\n        if (state.mtx.feeAmount > 0) {\\n            _transferERC20TokensFrom(\\n                state.mtx.feeToken,\\n                state.mtx.signer,\\n                state.sender,\\n                state.mtx.feeAmount\\n            );\\n        }\\n\\n        // Execute the call based on the selector.\\n        state.selector = state.mtx.callData.readBytes4(0);\\n        if (state.selector == ITransformERC20Feature.transformERC20.selector) {\\n            returnResult = _executeTransformERC20Call(state);\\n        } else if (state.selector == INativeOrdersFeature.fillLimitOrder.selector) {\\n            returnResult = _executeFillLimitOrderCall(state);\\n        } else if (state.selector == INativeOrdersFeature.fillRfqOrder.selector) {\\n            returnResult = _executeFillRfqOrderCall(state);\\n        } else {\\n            LibMetaTransactionsRichErrors\\n                .MetaTransactionUnsupportedFunctionError(state.hash, state.selector)\\n                .rrevert();\\n        }\\n        emit MetaTransactionExecuted(\\n            state.hash,\\n            state.selector,\\n            state.mtx.signer,\\n            state.mtx.sender\\n        );\\n    }\\n\\n    /// @dev Validate that a meta-transaction is executable.\\n    function _validateMetaTransaction(ExecuteState memory state)\\n        private\\n        view\\n    {\\n        // Must be from the required sender, if set.\\n        if (state.mtx.sender != address(0) && state.mtx.sender != state.sender) {\\n            LibMetaTransactionsRichErrors\\n                .MetaTransactionWrongSenderError(\\n                    state.hash,\\n                    state.sender,\\n                    state.mtx.sender\\n                ).rrevert();\\n        }\\n        // Must not be expired.\\n        if (state.mtx.expirationTimeSeconds <= block.timestamp) {\\n            LibMetaTransactionsRichErrors\\n                .MetaTransactionExpiredError(\\n                    state.hash,\\n                    block.timestamp,\\n                    state.mtx.expirationTimeSeconds\\n                ).rrevert();\\n        }\\n        // Must have a valid gas price.\\n        if (state.mtx.minGasPrice > tx.gasprice || state.mtx.maxGasPrice < tx.gasprice) {\\n            LibMetaTransactionsRichErrors\\n                .MetaTransactionGasPriceError(\\n                    state.hash,\\n                    tx.gasprice,\\n                    state.mtx.minGasPrice,\\n                    state.mtx.maxGasPrice\\n                ).rrevert();\\n        }\\n        // Must have enough ETH.\\n        state.selfBalance  = address(this).balance;\\n        if (state.mtx.value > state.selfBalance) {\\n            LibMetaTransactionsRichErrors\\n                .MetaTransactionInsufficientEthError(\\n                    state.hash,\\n                    state.selfBalance,\\n                    state.mtx.value\\n                ).rrevert();\\n        }\\n\\n        if (LibSignature.getSignerOfHash(state.hash, state.signature) !=\\n                state.mtx.signer) {\\n            LibSignatureRichErrors.SignatureValidationError(\\n                LibSignatureRichErrors.SignatureValidationErrorCodes.WRONG_SIGNER,\\n                state.hash,\\n                state.mtx.signer,\\n                // TODO: Remove this field from SignatureValidationError\\n                //       when rich reverts are part of the protocol repo.\\n                \\\"\\\"\\n            ).rrevert();\\n        }\\n        // Transaction must not have been already executed.\\n        state.executedBlockNumber = LibMetaTransactionsStorage\\n            .getStorage().mtxHashToExecutedBlockNumber[state.hash];\\n        if (state.executedBlockNumber != 0) {\\n            LibMetaTransactionsRichErrors\\n                .MetaTransactionAlreadyExecutedError(\\n                    state.hash,\\n                    state.executedBlockNumber\\n                ).rrevert();\\n        }\\n    }\\n\\n    /// @dev Execute a `ITransformERC20Feature.transformERC20()` meta-transaction call\\n    ///      by decoding the call args and translating the call to the internal\\n    ///      `ITransformERC20Feature._transformERC20()` variant, where we can override\\n    ///      the taker address.\\n    function _executeTransformERC20Call(ExecuteState memory state)\\n        private\\n        returns (bytes memory returnResult)\\n    {\\n        // HACK(dorothy-zbornak): `abi.decode()` with the individual args\\n        // will cause a stack overflow. But we can prefix the call data with an\\n        // offset to transform it into the encoding for the equivalent single struct arg,\\n        // since decoding a single struct arg consumes far less stack space than\\n        // decoding multiple struct args.\\n\\n        // Where the encoding for multiple args (with the selector ommitted)\\n        // would typically look like:\\n        // | argument                 |  offset |\\n        // |--------------------------|---------|\\n        // | inputToken               |       0 |\\n        // | outputToken              |      32 |\\n        // | inputTokenAmount         |      64 |\\n        // | minOutputTokenAmount     |      96 |\\n        // | transformations (offset) |     128 | = 32\\n        // | transformations (data)   |     160 |\\n\\n        // We will ABI-decode a single struct arg copy with the layout:\\n        // | argument                 |  offset |\\n        // |--------------------------|---------|\\n        // | (arg 1 offset)           |       0 | = 32\\n        // | inputToken               |      32 |\\n        // | outputToken              |      64 |\\n        // | inputTokenAmount         |      96 |\\n        // | minOutputTokenAmount     |     128 |\\n        // | transformations (offset) |     160 | = 32\\n        // | transformations (data)   |     192 |\\n\\n        ExternalTransformERC20Args memory args;\\n        {\\n            bytes memory encodedStructArgs = new bytes(state.mtx.callData.length - 4 + 32);\\n            // Copy the args data from the original, after the new struct offset prefix.\\n            bytes memory fromCallData = state.mtx.callData;\\n            assert(fromCallData.length >= 160);\\n            uint256 fromMem;\\n            uint256 toMem;\\n            assembly {\\n                // Prefix the calldata with a struct offset,\\n                // which points to just one word over.\\n                mstore(add(encodedStructArgs, 32), 32)\\n                // Copy everything after the selector.\\n                fromMem := add(fromCallData, 36)\\n                // Start copying after the struct offset.\\n                toMem := add(encodedStructArgs, 64)\\n            }\\n            LibBytesV06.memCopy(toMem, fromMem, fromCallData.length - 4);\\n            // Decode call args for `ITransformERC20Feature.transformERC20()` as a struct.\\n            args = abi.decode(encodedStructArgs, (ExternalTransformERC20Args));\\n        }\\n        // Call `ITransformERC20Feature._transformERC20()` (internal variant).\\n        return _callSelf(\\n            state.hash,\\n            abi.encodeWithSelector(\\n                ITransformERC20Feature._transformERC20.selector,\\n                ITransformERC20Feature.TransformERC20Args({\\n                    taker: state.mtx.signer, // taker is mtx signer\\n                    inputToken: args.inputToken,\\n                    outputToken: args.outputToken,\\n                    inputTokenAmount: args.inputTokenAmount,\\n                    minOutputTokenAmount: args.minOutputTokenAmount,\\n                    transformations: args.transformations,\\n                    useSelfBalance: false,\\n                    recipient: state.mtx.signer\\n              })\\n            ),\\n            state.mtx.value\\n        );\\n    }\\n\\n    /// @dev Extract arguments from call data by copying everything after the\\n    ///      4-byte selector into a new byte array.\\n    /// @param callData The call data from which arguments are to be extracted.\\n    /// @return args The extracted arguments as a byte array.\\n    function _extractArgumentsFromCallData(\\n        bytes memory callData\\n    )\\n        private\\n        pure\\n        returns (bytes memory args)\\n    {\\n        args = new bytes(callData.length - 4);\\n        uint256 fromMem;\\n        uint256 toMem;\\n\\n        assembly {\\n            fromMem := add(callData, 36) // skip length and 4-byte selector\\n            toMem := add(args, 32)       // write after length prefix\\n        }\\n\\n        LibBytesV06.memCopy(toMem, fromMem, args.length);\\n\\n        return args;\\n    }\\n\\n    /// @dev Execute a `INativeOrdersFeature.fillLimitOrder()` meta-transaction call\\n    ///      by decoding the call args and translating the call to the internal\\n    ///      `INativeOrdersFeature._fillLimitOrder()` variant, where we can override\\n    ///      the taker address.\\n    function _executeFillLimitOrderCall(ExecuteState memory state)\\n        private\\n        returns (bytes memory returnResult)\\n    {\\n        LibNativeOrder.LimitOrder memory order;\\n        LibSignature.Signature memory signature;\\n        uint128 takerTokenFillAmount;\\n\\n        bytes memory args = _extractArgumentsFromCallData(state.mtx.callData);\\n        (order, signature, takerTokenFillAmount) = abi.decode(args, (LibNativeOrder.LimitOrder, LibSignature.Signature, uint128));\\n\\n        return _callSelf(\\n            state.hash,\\n            abi.encodeWithSelector(\\n                INativeOrdersFeature._fillLimitOrder.selector,\\n                order,\\n                signature,\\n                takerTokenFillAmount,\\n                state.mtx.signer, // taker is mtx signer\\n                msg.sender\\n            ),\\n            state.mtx.value\\n        );\\n    }\\n\\n    /// @dev Execute a `INativeOrdersFeature.fillRfqOrder()` meta-transaction call\\n    ///      by decoding the call args and translating the call to the internal\\n    ///      `INativeOrdersFeature._fillRfqOrder()` variant, where we can overrideunimpleme\\n    ///      the taker address.\\n    function _executeFillRfqOrderCall(ExecuteState memory state)\\n        private\\n        returns (bytes memory returnResult)\\n    {\\n        LibNativeOrder.RfqOrder memory order;\\n        LibSignature.Signature memory signature;\\n        uint128 takerTokenFillAmount;\\n\\n        bytes memory args = _extractArgumentsFromCallData(state.mtx.callData);\\n        (order, signature, takerTokenFillAmount) = abi.decode(args, (LibNativeOrder.RfqOrder, LibSignature.Signature, uint128));\\n\\n        return _callSelf(\\n            state.hash,\\n            abi.encodeWithSelector(\\n                INativeOrdersFeature._fillRfqOrder.selector,\\n                order,\\n                signature,\\n                takerTokenFillAmount,\\n                state.mtx.signer, // taker is mtx signer\\n                false,\\n                state.mtx.signer\\n            ),\\n            state.mtx.value\\n        );\\n    }\\n\\n    /// @dev Make an arbitrary internal, meta-transaction call.\\n    ///      Warning: Do not let unadulterated `callData` into this function.\\n    function _callSelf(bytes32 hash, bytes memory callData, uint256 value)\\n        private\\n        returns (bytes memory returnResult)\\n    {\\n        bool success;\\n        (success, returnResult) = address(this).call{value: value}(callData);\\n        if (!success) {\\n            LibMetaTransactionsRichErrors.MetaTransactionCallFailedError(\\n                hash,\\n                callData,\\n                returnResult\\n            ).rrevert();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51af0935ba4304ff4e7f0cc55eda7acae24c72cb0ce2ed7f7ec7fe0e917add26\",\"license\":\"Apache-2.0\"},\"src/zero-ex/features/NativeOrdersFeature.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2021 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../migrations/LibMigrate.sol\\\";\\nimport \\\"./interfaces/IFeature.sol\\\";\\nimport \\\"./interfaces/INativeOrdersFeature.sol\\\";\\nimport \\\"./native_orders/NativeOrdersSettlement.sol\\\";\\n\\n\\n/// @dev Feature for interacting with limit and RFQ orders.\\ncontract NativeOrdersFeature is\\n    IFeature,\\n    NativeOrdersSettlement\\n{\\n    /// @dev Name of this feature.\\n    string public constant override FEATURE_NAME = \\\"LimitOrders\\\";\\n    /// @dev Version of this feature.\\n    uint256 public immutable override FEATURE_VERSION = _encodeVersion(1, 3, 0);\\n\\n    constructor(\\n        address zeroExAddress,\\n        IEtherTokenV06 weth,\\n        IStaking staking,\\n        FeeCollectorController feeCollectorController,\\n        uint32 protocolFeeMultiplier\\n    )\\n        public\\n        NativeOrdersSettlement(\\n            zeroExAddress,\\n            weth,\\n            staking,\\n            feeCollectorController,\\n            protocolFeeMultiplier\\n        )\\n    {\\n        // solhint-disable no-empty-blocks\\n    }\\n\\n    /// @dev Initialize and register this feature.\\n    ///      Should be delegatecalled by `Migrate.migrate()`.\\n    /// @return success `LibMigrate.SUCCESS` on success.\\n    function migrate()\\n        external\\n        returns (bytes4 success)\\n    {\\n        _registerFeatureFunction(this.transferProtocolFeesForPools.selector);\\n        _registerFeatureFunction(this.fillLimitOrder.selector);\\n        _registerFeatureFunction(this.fillRfqOrder.selector);\\n        _registerFeatureFunction(this.fillOrKillLimitOrder.selector);\\n        _registerFeatureFunction(this.fillOrKillRfqOrder.selector);\\n        _registerFeatureFunction(this._fillLimitOrder.selector);\\n        _registerFeatureFunction(this._fillRfqOrder.selector);\\n        _registerFeatureFunction(this.cancelLimitOrder.selector);\\n        _registerFeatureFunction(this.cancelRfqOrder.selector);\\n        _registerFeatureFunction(this.batchCancelLimitOrders.selector);\\n        _registerFeatureFunction(this.batchCancelRfqOrders.selector);\\n        _registerFeatureFunction(this.cancelPairLimitOrders.selector);\\n        _registerFeatureFunction(this.cancelPairLimitOrdersWithSigner.selector);\\n        _registerFeatureFunction(this.batchCancelPairLimitOrders.selector);\\n        _registerFeatureFunction(this.batchCancelPairLimitOrdersWithSigner.selector);\\n        _registerFeatureFunction(this.cancelPairRfqOrders.selector);\\n        _registerFeatureFunction(this.cancelPairRfqOrdersWithSigner.selector);\\n        _registerFeatureFunction(this.batchCancelPairRfqOrders.selector);\\n        _registerFeatureFunction(this.batchCancelPairRfqOrdersWithSigner.selector);\\n        _registerFeatureFunction(this.getLimitOrderInfo.selector);\\n        _registerFeatureFunction(this.getRfqOrderInfo.selector);\\n        _registerFeatureFunction(this.getLimitOrderHash.selector);\\n        _registerFeatureFunction(this.getRfqOrderHash.selector);\\n        _registerFeatureFunction(this.getProtocolFeeMultiplier.selector);\\n        _registerFeatureFunction(this.registerAllowedRfqOrigins.selector);\\n        _registerFeatureFunction(this.getLimitOrderRelevantState.selector);\\n        _registerFeatureFunction(this.getRfqOrderRelevantState.selector);\\n        _registerFeatureFunction(this.batchGetLimitOrderRelevantStates.selector);\\n        _registerFeatureFunction(this.batchGetRfqOrderRelevantStates.selector);\\n        _registerFeatureFunction(this.registerAllowedOrderSigner.selector);\\n        _registerFeatureFunction(this.isValidOrderSigner.selector);\\n        return LibMigrate.MIGRATE_SUCCESS;\\n    }\\n}\\n\",\"keccak256\":\"0x40063545091f3cc5c940da8f3922867f97de1ace44c248ef53339f952f096d1b\",\"license\":\"Apache-2.0\"},\"src/zero-ex/features/OtcOrdersFeature.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2021 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../contracts-erc20/v06/IEtherTokenV06.sol\\\";\\nimport \\\"../../contracts-utils/v06/LibSafeMathV06.sol\\\";\\nimport \\\"../../contracts-utils/v06/LibMathV06.sol\\\";\\nimport \\\"../errors/LibNativeOrdersRichErrors.sol\\\";\\nimport \\\"../fixins/FixinCommon.sol\\\";\\nimport \\\"../fixins/FixinEIP712.sol\\\";\\nimport \\\"../fixins/FixinTokenSpender.sol\\\";\\nimport \\\"../migrations/LibMigrate.sol\\\";\\nimport \\\"../storage/LibNativeOrdersStorage.sol\\\";\\nimport \\\"../storage/LibOtcOrdersStorage.sol\\\";\\nimport \\\"./interfaces/IFeature.sol\\\";\\nimport \\\"./interfaces/IOtcOrdersFeature.sol\\\";\\nimport \\\"./libs/LibNativeOrder.sol\\\";\\nimport \\\"./libs/LibSignature.sol\\\";\\n\\n\\n/// @dev Feature for interacting with OTC orders.\\ncontract OtcOrdersFeature is\\n    IFeature,\\n    IOtcOrdersFeature,\\n    FixinCommon,\\n    FixinEIP712,\\n    FixinTokenSpender\\n{\\n    using LibSafeMathV06 for uint256;\\n    using LibSafeMathV06 for uint128;\\n\\n    /// @dev Name of this feature.\\n    string public constant override FEATURE_NAME = \\\"OtcOrders\\\";\\n    /// @dev Version of this feature.\\n    uint256 public immutable override FEATURE_VERSION = _encodeVersion(1, 0, 0);\\n    /// @dev ETH pseudo-token address.\\n    address constant private ETH_TOKEN_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    /// @dev The WETH token contract.\\n    IEtherTokenV06 private immutable WETH;\\n\\n    constructor(address zeroExAddress, IEtherTokenV06 weth)\\n        public\\n        FixinEIP712(zeroExAddress)\\n    {\\n        WETH = weth;\\n    }\\n\\n    /// @dev Initialize and register this feature.\\n    ///      Should be delegatecalled by `Migrate.migrate()`.\\n    /// @return success `LibMigrate.SUCCESS` on success.\\n    function migrate()\\n        external\\n        returns (bytes4 success)\\n    {\\n        _registerFeatureFunction(this.fillOtcOrder.selector);\\n        _registerFeatureFunction(this.fillOtcOrderForEth.selector);\\n        _registerFeatureFunction(this.fillOtcOrderWithEth.selector);\\n        _registerFeatureFunction(this.fillTakerSignedOtcOrderForEth.selector);\\n        _registerFeatureFunction(this.fillTakerSignedOtcOrder.selector);\\n        _registerFeatureFunction(this.batchFillTakerSignedOtcOrders.selector);\\n        _registerFeatureFunction(this._fillOtcOrder.selector);\\n        _registerFeatureFunction(this.getOtcOrderInfo.selector);\\n        _registerFeatureFunction(this.getOtcOrderHash.selector);\\n        _registerFeatureFunction(this.lastOtcTxOriginNonce.selector);\\n        return LibMigrate.MIGRATE_SUCCESS;\\n    }\\n\\n    /// @dev Fill an OTC order for up to `takerTokenFillAmount` taker tokens.\\n    /// @param order The OTC order.\\n    /// @param makerSignature The order signature from the maker.\\n    /// @param takerTokenFillAmount Maximum taker token amount to fill this\\n    ///        order with.\\n    /// @return takerTokenFilledAmount How much taker token was filled.\\n    /// @return makerTokenFilledAmount How much maker token was filled.\\n    function fillOtcOrder(\\n        LibNativeOrder.OtcOrder memory order,\\n        LibSignature.Signature memory makerSignature,\\n        uint128 takerTokenFillAmount\\n    )\\n        public\\n        override\\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount)\\n    {\\n        LibNativeOrder.OtcOrderInfo memory orderInfo = getOtcOrderInfo(order);\\n        _validateOtcOrder(\\n            order, \\n            orderInfo,\\n            makerSignature,\\n            msg.sender\\n        );\\n        (takerTokenFilledAmount, makerTokenFilledAmount) = _settleOtcOrder(\\n            order,\\n            takerTokenFillAmount,\\n            msg.sender,\\n            msg.sender\\n        );\\n\\n        emit OtcOrderFilled(\\n            orderInfo.orderHash,\\n            order.maker,\\n            msg.sender,\\n            address(order.makerToken),\\n            address(order.takerToken),\\n            makerTokenFilledAmount,\\n            takerTokenFilledAmount\\n        );\\n    }\\n\\n    /// @dev Fill an OTC order for up to `takerTokenFillAmount` taker tokens.\\n    ///      Unwraps bought WETH into ETH. before sending it to \\n    ///      the taker.\\n    /// @param order The OTC order.\\n    /// @param makerSignature The order signature from the maker.\\n    /// @param takerTokenFillAmount Maximum taker token amount to fill this\\n    ///        order with.\\n    /// @return takerTokenFilledAmount How much taker token was filled.\\n    /// @return makerTokenFilledAmount How much maker token was filled.\\n    function fillOtcOrderForEth(\\n        LibNativeOrder.OtcOrder memory order,\\n        LibSignature.Signature memory makerSignature,\\n        uint128 takerTokenFillAmount\\n    )\\n        public\\n        override\\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount)\\n    {\\n        require(\\n            order.makerToken == WETH,\\n            \\\"OtcOrdersFeature::fillOtcOrderForEth/MAKER_TOKEN_NOT_WETH\\\"\\n        );\\n        LibNativeOrder.OtcOrderInfo memory orderInfo = getOtcOrderInfo(order);\\n        _validateOtcOrder(\\n            order, \\n            orderInfo,\\n            makerSignature,\\n            msg.sender\\n        );\\n        (takerTokenFilledAmount, makerTokenFilledAmount) = _settleOtcOrder(\\n            order,\\n            takerTokenFillAmount, \\n            msg.sender,\\n            address(this)\\n        );\\n        // Unwrap WETH\\n        WETH.withdraw(makerTokenFilledAmount);\\n        // Transfer ETH to taker\\n        _transferEth(msg.sender, makerTokenFilledAmount);\\n\\n        emit OtcOrderFilled(\\n            orderInfo.orderHash,\\n            order.maker,\\n            msg.sender,\\n            address(order.makerToken),\\n            address(order.takerToken),\\n            makerTokenFilledAmount,\\n            takerTokenFilledAmount\\n        );\\n    }\\n\\n    /// @dev Fill an OTC order whose taker token is WETH for up\\n    ///      to `msg.value`.\\n    /// @param order The OTC order.\\n    /// @param makerSignature The order signature from the maker.\\n    /// @return takerTokenFilledAmount How much taker token was filled.\\n    /// @return makerTokenFilledAmount How much maker token was filled.\\n    function fillOtcOrderWithEth(\\n        LibNativeOrder.OtcOrder memory order,\\n        LibSignature.Signature memory makerSignature\\n    )\\n        public\\n        override\\n        payable\\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount)\\n    {\\n        if (order.takerToken == WETH) {\\n            // Wrap ETH\\n            WETH.deposit{value: msg.value}();\\n        } else {\\n            require(\\n                address(order.takerToken) == ETH_TOKEN_ADDRESS,\\n                \\\"OtcOrdersFeature::fillOtcOrderWithEth/INVALID_TAKER_TOKEN\\\"\\n            );\\n        }\\n\\n        LibNativeOrder.OtcOrderInfo memory orderInfo = getOtcOrderInfo(order);\\n        _validateOtcOrder(\\n            order, \\n            orderInfo,\\n            makerSignature,\\n            msg.sender\\n        );\\n\\n        (takerTokenFilledAmount, makerTokenFilledAmount) =  _settleOtcOrder(\\n            order,\\n            msg.value.safeDowncastToUint128(),\\n            address(this),\\n            msg.sender\\n        );\\n        if (takerTokenFilledAmount < msg.value) {\\n            uint256 refundAmount = msg.value - uint256(takerTokenFilledAmount);\\n            if (order.takerToken == WETH) {\\n                WETH.withdraw(refundAmount);\\n            }\\n            // Refund unused ETH\\n            _transferEth(msg.sender, refundAmount);\\n        }\\n\\n        emit OtcOrderFilled(\\n            orderInfo.orderHash,\\n            order.maker,\\n            msg.sender,\\n            address(order.makerToken),\\n            address(order.takerToken),\\n            makerTokenFilledAmount,\\n            takerTokenFilledAmount\\n        );\\n    }\\n\\n    /// @dev Fully fill an OTC order. \\\"Meta-transaction\\\" variant,\\n    ///      requires order to be signed by both maker and taker.\\n    /// @param order The OTC order.\\n    /// @param makerSignature The order signature from the maker.\\n    /// @param takerSignature The order signature from the taker.\\n    function fillTakerSignedOtcOrder(\\n        LibNativeOrder.OtcOrder memory order,\\n        LibSignature.Signature memory makerSignature,\\n        LibSignature.Signature memory takerSignature\\n    )\\n        public\\n        override\\n    {\\n        LibNativeOrder.OtcOrderInfo memory orderInfo = getOtcOrderInfo(order);\\n        address taker = LibSignature.getSignerOfHash(orderInfo.orderHash, takerSignature);\\n        \\n        _validateOtcOrder(\\n            order, \\n            orderInfo,\\n            makerSignature,\\n            taker\\n        );\\n        _settleOtcOrder(\\n            order,\\n            order.takerAmount,\\n            taker,\\n            taker\\n        );\\n\\n        emit OtcOrderFilled(\\n            orderInfo.orderHash,\\n            order.maker,\\n            taker,\\n            address(order.makerToken),\\n            address(order.takerToken),\\n            order.makerAmount,\\n            order.takerAmount\\n        );\\n    }\\n\\n    /// @dev Fully fill an OTC order. \\\"Meta-transaction\\\" variant,\\n    ///      requires order to be signed by both maker and taker.\\n    ///      Unwraps bought WETH into ETH. before sending it to \\n    ///      the taker.\\n    /// @param order The OTC order.\\n    /// @param makerSignature The order signature from the maker.\\n    /// @param takerSignature The order signature from the taker.\\n    function fillTakerSignedOtcOrderForEth(\\n        LibNativeOrder.OtcOrder memory order,\\n        LibSignature.Signature memory makerSignature,\\n        LibSignature.Signature memory takerSignature\\n    )\\n        public\\n        override\\n    {\\n        require(\\n            order.makerToken == WETH,\\n            \\\"OtcOrdersFeature::fillTakerSignedOtcOrder/MAKER_TOKEN_NOT_WETH\\\"\\n        );\\n        LibNativeOrder.OtcOrderInfo memory orderInfo = getOtcOrderInfo(order);\\n        address taker = LibSignature.getSignerOfHash(orderInfo.orderHash, takerSignature);\\n        \\n        _validateOtcOrder(\\n            order, \\n            orderInfo,\\n            makerSignature,\\n            taker\\n        );\\n        _settleOtcOrder(\\n            order,\\n            order.takerAmount,\\n            taker,\\n            address(this)\\n        );\\n        // Unwrap WETH\\n        WETH.withdraw(order.makerAmount);\\n        // Transfer ETH to taker\\n        _transferEth(payable(taker), order.makerAmount);\\n\\n        emit OtcOrderFilled(\\n            orderInfo.orderHash,\\n            order.maker,\\n            taker,\\n            address(order.makerToken),\\n            address(order.takerToken),\\n            order.makerAmount,\\n            order.takerAmount\\n        );\\n    }\\n\\n    /// @dev Fills multiple taker-signed OTC orders.\\n    /// @param orders Array of OTC orders.\\n    /// @param makerSignatures Array of maker signatures for each order.\\n    /// @param takerSignatures Array of taker signatures for each order.\\n    /// @param unwrapWeth Array of booleans representing whether or not \\n    ///        to unwrap bought WETH into ETH for each order. Should be set \\n    ///        to false if the maker token is not WETH.\\n    /// @return successes Array of booleans representing whether or not\\n    ///         each order in `orders` was filled successfully.\\n    function batchFillTakerSignedOtcOrders(\\n        LibNativeOrder.OtcOrder[] memory orders,\\n        LibSignature.Signature[] memory makerSignatures,\\n        LibSignature.Signature[] memory takerSignatures,\\n        bool[] memory unwrapWeth\\n    )\\n        public\\n        override\\n        returns (bool[] memory successes)\\n    {\\n        require(\\n            orders.length == makerSignatures.length && \\n            orders.length == takerSignatures.length &&\\n            orders.length == unwrapWeth.length,\\n            \\\"OtcOrdersFeature::batchFillTakerSignedOtcOrders/MISMATCHED_ARRAY_LENGTHS\\\"\\n        );\\n        successes = new bool[](orders.length);\\n        for (uint256 i = 0; i != orders.length; i++) {\\n            bytes4 fnSelector = unwrapWeth[i] \\n                ? this.fillTakerSignedOtcOrderForEth.selector\\n                : this.fillTakerSignedOtcOrder.selector;\\n            // Swallow reverts\\n            (successes[i], ) = _implementation.delegatecall(\\n                abi.encodeWithSelector(\\n                    fnSelector,\\n                    orders[i],\\n                    makerSignatures[i],\\n                    takerSignatures[i]\\n                )\\n            );\\n        }\\n    }\\n\\n    /// @dev Fill an OTC order for up to `takerTokenFillAmount` taker tokens.\\n    ///      Internal variant.\\n    /// @param order The OTC order.\\n    /// @param makerSignature The order signature from the maker.\\n    /// @param takerTokenFillAmount Maximum taker token amount to fill this\\n    ///        order with.\\n    /// @param taker The address to fill the order in the context of.\\n    /// @param useSelfBalance Whether to use the Exchange Proxy's balance\\n    ///        of input tokens.\\n    /// @param recipient The recipient of the bought maker tokens.\\n    /// @return takerTokenFilledAmount How much taker token was filled.\\n    /// @return makerTokenFilledAmount How much maker token was filled.\\n    function _fillOtcOrder(\\n        LibNativeOrder.OtcOrder memory order,\\n        LibSignature.Signature memory makerSignature,\\n        uint128 takerTokenFillAmount,\\n        address taker,\\n        bool useSelfBalance,\\n        address recipient\\n    )\\n        public\\n        override\\n        onlySelf\\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount)\\n    {\\n        LibNativeOrder.OtcOrderInfo memory orderInfo = getOtcOrderInfo(order);\\n        _validateOtcOrder(\\n            order, \\n            orderInfo,\\n            makerSignature,\\n            taker\\n        );\\n        (takerTokenFilledAmount, makerTokenFilledAmount) = _settleOtcOrder(\\n            order,\\n            takerTokenFillAmount,\\n            useSelfBalance ? address(this) : taker,\\n            recipient\\n        );\\n\\n        emit OtcOrderFilled(\\n            orderInfo.orderHash,\\n            order.maker,\\n            taker,\\n            address(order.makerToken),\\n            address(order.takerToken),\\n            makerTokenFilledAmount,\\n            takerTokenFilledAmount\\n        );\\n    }\\n\\n    /// @dev Validates an OTC order, reverting if the order cannot be \\n    ///      filled by the given taker.\\n    /// @param order The OTC order.\\n    /// @param orderInfo Info on the order.\\n    /// @param makerSignature The order signature from the maker.\\n    /// @param taker The order taker.\\n    function _validateOtcOrder(\\n        LibNativeOrder.OtcOrder memory order,\\n        LibNativeOrder.OtcOrderInfo memory orderInfo,\\n        LibSignature.Signature memory makerSignature,\\n        address taker\\n    )\\n        private\\n        view\\n    {\\n        // Must be fillable.\\n        if (orderInfo.status != LibNativeOrder.OrderStatus.FILLABLE) {\\n            LibNativeOrdersRichErrors.OrderNotFillableError(\\n                orderInfo.orderHash,\\n                uint8(orderInfo.status)\\n            ).rrevert();\\n        }\\n\\n        // Must be a valid taker for the order.\\n        if (order.taker != address(0) && order.taker != taker) {\\n            LibNativeOrdersRichErrors.OrderNotFillableByTakerError(\\n                orderInfo.orderHash,\\n                taker,\\n                order.taker\\n            ).rrevert();\\n        }\\n\\n        LibNativeOrdersStorage.Storage storage stor =\\n            LibNativeOrdersStorage.getStorage();\\n\\n        // Must be fillable by the tx.origin.\\n        if (\\n            order.txOrigin != tx.origin &&\\n            !stor.originRegistry[order.txOrigin][tx.origin]\\n        ) {\\n            LibNativeOrdersRichErrors.OrderNotFillableByOriginError(\\n                orderInfo.orderHash,\\n                tx.origin,\\n                order.txOrigin\\n            ).rrevert();\\n        }\\n\\n        // Maker signature must be valid for the order.\\n        address makerSigner = LibSignature.getSignerOfHash(orderInfo.orderHash, makerSignature);\\n        if (\\n            makerSigner != order.maker &&\\n            !stor.orderSignerRegistry[order.maker][makerSigner]\\n        ) {\\n            LibNativeOrdersRichErrors.OrderNotSignedByMakerError(\\n                orderInfo.orderHash,\\n                makerSigner,\\n                order.maker\\n            ).rrevert();\\n        }\\n    }\\n\\n    /// @dev Settle the trade between an OTC order's maker and taker.\\n    /// @param order The OTC order.\\n    /// @param takerTokenFillAmount Maximum taker token amount to fill this\\n    ///        order with.\\n    /// @param payer The address holding the taker tokens.\\n    /// @param recipient The recipient of the maker tokens.\\n    /// @return takerTokenFilledAmount How much taker token was filled.\\n    /// @return makerTokenFilledAmount How much maker token was filled.\\n    function _settleOtcOrder(\\n        LibNativeOrder.OtcOrder memory order,\\n        uint128 takerTokenFillAmount,\\n        address payer,\\n        address recipient\\n    )\\n        private\\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount)\\n    {\\n        {\\n            // Unpack nonce fields\\n            uint64 nonceBucket = uint64(order.expiryAndNonce >> 128);\\n            uint128 nonce = uint128(order.expiryAndNonce);\\n            // Update tx origin nonce for the order\\n            LibOtcOrdersStorage.getStorage().txOriginNonces\\n                [order.txOrigin][nonceBucket] = nonce;\\n        }\\n\\n        if (takerTokenFillAmount == order.takerAmount) {\\n            takerTokenFilledAmount = order.takerAmount;\\n            makerTokenFilledAmount = order.makerAmount;\\n        } else {\\n            // Clamp the taker token fill amount to the fillable amount.\\n            takerTokenFilledAmount = LibSafeMathV06.min128(\\n                takerTokenFillAmount,\\n                order.takerAmount\\n            );\\n            // Compute the maker token amount.\\n            // This should never overflow because the values are all clamped to\\n            // (2^128-1).\\n            makerTokenFilledAmount = uint128(LibMathV06.getPartialAmountFloor(\\n                uint256(takerTokenFilledAmount),\\n                uint256(order.takerAmount),\\n                uint256(order.makerAmount)\\n            ));\\n        }\\n\\n        if (payer == address(this)) {\\n            if (address(order.takerToken) == ETH_TOKEN_ADDRESS) {\\n                // Transfer ETH to the maker.\\n                payable(order.maker).transfer(takerTokenFilledAmount);\\n            } else {\\n                // Transfer this -> maker.\\n                _transferERC20Tokens(\\n                    order.takerToken,\\n                    order.maker,\\n                    takerTokenFilledAmount\\n                );                \\n            }\\n        } else {\\n            // Transfer taker -> maker\\n            _transferERC20TokensFrom(\\n                order.takerToken,\\n                payer,\\n                order.maker,\\n                takerTokenFilledAmount\\n            );\\n        }\\n        // Transfer maker -> recipient.\\n        _transferERC20TokensFrom(\\n            order.makerToken,\\n            order.maker,\\n            recipient,\\n            makerTokenFilledAmount\\n        );\\n    }\\n\\n    /// @dev Get the order info for an OTC order.\\n    /// @param order The OTC order.\\n    /// @return orderInfo Info about the order.\\n    function getOtcOrderInfo(LibNativeOrder.OtcOrder memory order)\\n        public\\n        override\\n        view\\n        returns (LibNativeOrder.OtcOrderInfo memory orderInfo)\\n    {\\n        // compute order hash.\\n        orderInfo.orderHash = getOtcOrderHash(order);\\n\\n        LibOtcOrdersStorage.Storage storage stor =\\n            LibOtcOrdersStorage.getStorage();\\n\\n        // Unpack expiry and nonce fields\\n        uint64 expiry = uint64(order.expiryAndNonce >> 192);\\n        uint64 nonceBucket = uint64(order.expiryAndNonce >> 128);\\n        uint128 nonce = uint128(order.expiryAndNonce);\\n\\n        // check tx origin nonce\\n        uint128 lastNonce = stor.txOriginNonces\\n            [order.txOrigin]\\n            [nonceBucket];\\n        if (nonce <= lastNonce) {\\n            orderInfo.status = LibNativeOrder.OrderStatus.INVALID;\\n            return orderInfo;\\n        }\\n\\n        // Check for expiration.\\n        if (expiry <= uint64(block.timestamp)) {\\n            orderInfo.status = LibNativeOrder.OrderStatus.EXPIRED;\\n            return orderInfo;\\n        }\\n\\n        orderInfo.status = LibNativeOrder.OrderStatus.FILLABLE;\\n        return orderInfo;\\n    }\\n\\n    /// @dev Get the canonical hash of an OTC order.\\n    /// @param order The OTC order.\\n    /// @return orderHash The order hash.\\n    function getOtcOrderHash(LibNativeOrder.OtcOrder memory order)\\n        public\\n        override\\n        view\\n        returns (bytes32 orderHash)\\n    {\\n        return _getEIP712Hash(\\n            LibNativeOrder.getOtcOrderStructHash(order)\\n        );\\n    }\\n\\n    /// @dev Get the last nonce used for a particular\\n    ///      tx.origin address and nonce bucket.\\n    /// @param txOrigin The address.\\n    /// @param nonceBucket The nonce bucket index.\\n    /// @return lastNonce The last nonce value used.\\n    function lastOtcTxOriginNonce(address txOrigin, uint64 nonceBucket)\\n        public\\n        override\\n        view\\n        returns (uint128 lastNonce)\\n    {\\n        LibOtcOrdersStorage.Storage storage stor =\\n            LibOtcOrdersStorage.getStorage();\\n        return stor.txOriginNonces\\n            [txOrigin]\\n            [nonceBucket];\\n    }\\n}\\n\",\"keccak256\":\"0x375ec26e2a2b16fd063f289c4aaaf0124737b65b746a8440d1f053cbed17d4ff\",\"license\":\"Apache-2.0\"},\"src/zero-ex/features/OwnableFeature.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../contracts-utils/v06/errors/LibRichErrorsV06.sol\\\";\\nimport \\\"../fixins/FixinCommon.sol\\\";\\nimport \\\"../errors/LibOwnableRichErrors.sol\\\";\\nimport \\\"../storage/LibOwnableStorage.sol\\\";\\nimport \\\"../migrations/LibBootstrap.sol\\\";\\nimport \\\"../migrations/LibMigrate.sol\\\";\\nimport \\\"./interfaces/IFeature.sol\\\";\\nimport \\\"./interfaces/IOwnableFeature.sol\\\";\\nimport \\\"./SimpleFunctionRegistryFeature.sol\\\";\\n\\n\\n/// @dev Owner management features.\\ncontract OwnableFeature is\\n    IFeature,\\n    IOwnableFeature,\\n    FixinCommon\\n{\\n\\n    /// @dev Name of this feature.\\n    string public constant override FEATURE_NAME = \\\"Ownable\\\";\\n    /// @dev Version of this feature.\\n    uint256 public immutable override FEATURE_VERSION = _encodeVersion(1, 0, 0);\\n\\n    using LibRichErrorsV06 for bytes;\\n\\n    /// @dev Initializes this feature. The intial owner will be set to this (ZeroEx)\\n    ///      to allow the bootstrappers to call `extend()`. Ownership should be\\n    ///      transferred to the real owner by the bootstrapper after\\n    ///      bootstrapping is complete.\\n    /// @return success Magic bytes if successful.\\n    function bootstrap() external returns (bytes4 success) {\\n        // Set the owner to ourselves to allow bootstrappers to call `extend()`.\\n        LibOwnableStorage.getStorage().owner = address(this);\\n\\n        // Register feature functions.\\n        SimpleFunctionRegistryFeature(address(this))._extendSelf(this.transferOwnership.selector, _implementation);\\n        SimpleFunctionRegistryFeature(address(this))._extendSelf(this.owner.selector, _implementation);\\n        SimpleFunctionRegistryFeature(address(this))._extendSelf(this.migrate.selector, _implementation);\\n        return LibBootstrap.BOOTSTRAP_SUCCESS;\\n    }\\n\\n    /// @dev Change the owner of this contract.\\n    ///      Only directly callable by the owner.\\n    /// @param newOwner New owner address.\\n    function transferOwnership(address newOwner)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        LibOwnableStorage.Storage storage proxyStor = LibOwnableStorage.getStorage();\\n\\n        if (newOwner == address(0)) {\\n            LibOwnableRichErrors.TransferOwnerToZeroError().rrevert();\\n        } else {\\n            proxyStor.owner = newOwner;\\n            emit OwnershipTransferred(msg.sender, newOwner);\\n        }\\n    }\\n\\n    /// @dev Execute a migration function in the context of the ZeroEx contract.\\n    ///      The result of the function being called should be the magic bytes\\n    ///      0x2c64c5ef (`keccack('MIGRATE_SUCCESS')`). Only callable by the owner.\\n    ///      Temporarily sets the owner to ourselves so we can perform admin functions.\\n    ///      Before returning, the owner will be set to `newOwner`.\\n    /// @param target The migrator contract address.\\n    /// @param data The call data.\\n    /// @param newOwner The address of the new owner.\\n    function migrate(address target, bytes calldata data, address newOwner)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        if (newOwner == address(0)) {\\n            LibOwnableRichErrors.TransferOwnerToZeroError().rrevert();\\n        }\\n\\n        LibOwnableStorage.Storage storage stor = LibOwnableStorage.getStorage();\\n        // The owner will be temporarily set to `address(this)` inside the call.\\n        stor.owner = address(this);\\n\\n        // Perform the migration.\\n        LibMigrate.delegatecallMigrateFunction(target, data);\\n\\n        // Update the owner.\\n        stor.owner = newOwner;\\n\\n        emit Migrated(msg.sender, target, newOwner);\\n    }\\n\\n    /// @dev Get the owner of this contract.\\n    /// @return owner_ The owner of this contract.\\n    function owner() external override view returns (address owner_) {\\n        return LibOwnableStorage.getStorage().owner;\\n    }\\n}\\n\",\"keccak256\":\"0x7c2fea0b2df889ed24c35296f7a3bf555f389edb1e2f2fe5581a104f985da5cc\",\"license\":\"Apache-2.0\"},\"src/zero-ex/features/SimpleFunctionRegistryFeature.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../contracts-utils/v06/errors/LibRichErrorsV06.sol\\\";\\nimport \\\"../fixins/FixinCommon.sol\\\";\\nimport \\\"../storage/LibProxyStorage.sol\\\";\\nimport \\\"../storage/LibSimpleFunctionRegistryStorage.sol\\\";\\nimport \\\"../errors/LibSimpleFunctionRegistryRichErrors.sol\\\";\\nimport \\\"../migrations/LibBootstrap.sol\\\";\\nimport \\\"./interfaces/IFeature.sol\\\";\\nimport \\\"./interfaces/ISimpleFunctionRegistryFeature.sol\\\";\\n\\n\\n/// @dev Basic registry management features.\\ncontract SimpleFunctionRegistryFeature is\\n    IFeature,\\n    ISimpleFunctionRegistryFeature,\\n    FixinCommon\\n{\\n    /// @dev Name of this feature.\\n    string public constant override FEATURE_NAME = \\\"SimpleFunctionRegistry\\\";\\n    /// @dev Version of this feature.\\n    uint256 public immutable override FEATURE_VERSION = _encodeVersion(1, 0, 0);\\n\\n    using LibRichErrorsV06 for bytes;\\n\\n    /// @dev Initializes this feature, registering its own functions.\\n    /// @return success Magic bytes if successful.\\n    function bootstrap()\\n        external\\n        returns (bytes4 success)\\n    {\\n        // Register the registration functions (inception vibes).\\n        _extend(this.extend.selector, _implementation);\\n        _extend(this._extendSelf.selector, _implementation);\\n        // Register the rollback function.\\n        _extend(this.rollback.selector, _implementation);\\n        // Register getters.\\n        _extend(this.getRollbackLength.selector, _implementation);\\n        _extend(this.getRollbackEntryAtIndex.selector, _implementation);\\n        return LibBootstrap.BOOTSTRAP_SUCCESS;\\n    }\\n\\n    /// @dev Roll back to a prior implementation of a function.\\n    ///      Only directly callable by an authority.\\n    /// @param selector The function selector.\\n    /// @param targetImpl The address of an older implementation of the function.\\n    function rollback(bytes4 selector, address targetImpl)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        (\\n            LibSimpleFunctionRegistryStorage.Storage storage stor,\\n            LibProxyStorage.Storage storage proxyStor\\n        ) = _getStorages();\\n\\n        address currentImpl = proxyStor.impls[selector];\\n        if (currentImpl == targetImpl) {\\n            // Do nothing if already at targetImpl.\\n            return;\\n        }\\n        // Walk history backwards until we find the target implementation.\\n        address[] storage history = stor.implHistory[selector];\\n        uint256 i = history.length;\\n        for (; i > 0; --i) {\\n            address impl = history[i - 1];\\n            history.pop();\\n            if (impl == targetImpl) {\\n                break;\\n            }\\n        }\\n        if (i == 0) {\\n            LibSimpleFunctionRegistryRichErrors.NotInRollbackHistoryError(\\n                selector,\\n                targetImpl\\n            ).rrevert();\\n        }\\n        proxyStor.impls[selector] = targetImpl;\\n        emit ProxyFunctionUpdated(selector, currentImpl, targetImpl);\\n    }\\n\\n    /// @dev Register or replace a function.\\n    ///      Only directly callable by an authority.\\n    /// @param selector The function selector.\\n    /// @param impl The implementation contract for the function.\\n    function extend(bytes4 selector, address impl)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        _extend(selector, impl);\\n    }\\n\\n    /// @dev Register or replace a function.\\n    ///      Only callable from within.\\n    ///      This function is only used during the bootstrap process and\\n    ///      should be deregistered by the deployer after bootstrapping is\\n    ///      complete.\\n    /// @param selector The function selector.\\n    /// @param impl The implementation contract for the function.\\n    function _extendSelf(bytes4 selector, address impl)\\n        external\\n        onlySelf\\n    {\\n        _extend(selector, impl);\\n    }\\n\\n    /// @dev Retrieve the length of the rollback history for a function.\\n    /// @param selector The function selector.\\n    /// @return rollbackLength The number of items in the rollback history for\\n    ///         the function.\\n    function getRollbackLength(bytes4 selector)\\n        external\\n        override\\n        view\\n        returns (uint256 rollbackLength)\\n    {\\n        return LibSimpleFunctionRegistryStorage.getStorage().implHistory[selector].length;\\n    }\\n\\n    /// @dev Retrieve an entry in the rollback history for a function.\\n    /// @param selector The function selector.\\n    /// @param idx The index in the rollback history.\\n    /// @return impl An implementation address for the function at\\n    ///         index `idx`.\\n    function getRollbackEntryAtIndex(bytes4 selector, uint256 idx)\\n        external\\n        override\\n        view\\n        returns (address impl)\\n    {\\n        return LibSimpleFunctionRegistryStorage.getStorage().implHistory[selector][idx];\\n    }\\n\\n    /// @dev Register or replace a function.\\n    /// @param selector The function selector.\\n    /// @param impl The implementation contract for the function.\\n    function _extend(bytes4 selector, address impl)\\n        private\\n    {\\n        (\\n            LibSimpleFunctionRegistryStorage.Storage storage stor,\\n            LibProxyStorage.Storage storage proxyStor\\n        ) = _getStorages();\\n\\n        address oldImpl = proxyStor.impls[selector];\\n        address[] storage history = stor.implHistory[selector];\\n        history.push(oldImpl);\\n        proxyStor.impls[selector] = impl;\\n        emit ProxyFunctionUpdated(selector, oldImpl, impl);\\n    }\\n\\n    /// @dev Get the storage buckets for this feature and the proxy.\\n    /// @return stor Storage bucket for this feature.\\n    /// @return proxyStor age bucket for the proxy.\\n    function _getStorages()\\n        private\\n        pure\\n        returns (\\n            LibSimpleFunctionRegistryStorage.Storage storage stor,\\n            LibProxyStorage.Storage storage proxyStor\\n        )\\n    {\\n        return (\\n            LibSimpleFunctionRegistryStorage.getStorage(),\\n            LibProxyStorage.getStorage()\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xb5ff4e99d3e659c9f952c5db9724c4b91670239f84574d3d40ed908dd480e075\",\"license\":\"Apache-2.0\"},\"src/zero-ex/features/TransformERC20Feature.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../contracts-erc20/v06/IERC20TokenV06.sol\\\";\\nimport \\\"../../contracts-erc20/v06/LibERC20TokenV06.sol\\\";\\nimport \\\"../../contracts-utils/v06/LibBytesV06.sol\\\";\\nimport \\\"../../contracts-utils/v06/errors/LibRichErrorsV06.sol\\\";\\nimport \\\"../../contracts-utils/v06/LibSafeMathV06.sol\\\";\\nimport \\\"../errors/LibTransformERC20RichErrors.sol\\\";\\nimport \\\"../fixins/FixinCommon.sol\\\";\\nimport \\\"../fixins/FixinTokenSpender.sol\\\";\\nimport \\\"../migrations/LibMigrate.sol\\\";\\nimport \\\"../external/IFlashWallet.sol\\\";\\nimport \\\"../external/FlashWallet.sol\\\";\\nimport \\\"../storage/LibTransformERC20Storage.sol\\\";\\nimport \\\"../transformers/IERC20Transformer.sol\\\";\\nimport \\\"../transformers/LibERC20Transformer.sol\\\";\\nimport \\\"./interfaces/IFeature.sol\\\";\\nimport \\\"./interfaces/ITransformERC20Feature.sol\\\";\\n\\n\\n/// @dev Feature to composably transform between ERC20 tokens.\\ncontract TransformERC20Feature is\\n    IFeature,\\n    ITransformERC20Feature,\\n    FixinCommon,\\n    FixinTokenSpender\\n{\\n    using LibSafeMathV06 for uint256;\\n    using LibRichErrorsV06 for bytes;\\n\\n    /// @dev Stack vars for `_transformERC20Private()`.\\n    struct TransformERC20PrivateState {\\n        IFlashWallet wallet;\\n        address transformerDeployer;\\n        uint256 recipientOutputTokenBalanceBefore;\\n        uint256 recipientOutputTokenBalanceAfter;\\n    }\\n\\n    /// @dev Name of this feature.\\n    string public constant override FEATURE_NAME = \\\"TransformERC20\\\";\\n    /// @dev Version of this feature.\\n    uint256 public immutable override FEATURE_VERSION = _encodeVersion(1, 4, 0);\\n\\n    /// @dev Initialize and register this feature.\\n    ///      Should be delegatecalled by `Migrate.migrate()`.\\n    /// @param transformerDeployer The trusted deployer for transformers.\\n    /// @return success `LibMigrate.SUCCESS` on success.\\n    function migrate(address transformerDeployer)\\n        external\\n        returns (bytes4 success)\\n    {\\n        _registerFeatureFunction(this.getTransformerDeployer.selector);\\n        _registerFeatureFunction(this.createTransformWallet.selector);\\n        _registerFeatureFunction(this.getTransformWallet.selector);\\n        _registerFeatureFunction(this.setTransformerDeployer.selector);\\n        _registerFeatureFunction(this.setQuoteSigner.selector);\\n        _registerFeatureFunction(this.getQuoteSigner.selector);\\n        _registerFeatureFunction(this.transformERC20.selector);\\n        _registerFeatureFunction(this._transformERC20.selector);\\n        if (this.getTransformWallet() == IFlashWallet(address(0))) {\\n            // Create the transform wallet if it doesn't exist.\\n            this.createTransformWallet();\\n        }\\n        LibTransformERC20Storage.getStorage().transformerDeployer = transformerDeployer;\\n        return LibMigrate.MIGRATE_SUCCESS;\\n    }\\n\\n    /// @dev Replace the allowed deployer for transformers.\\n    ///      Only callable by the owner.\\n    /// @param transformerDeployer The address of the trusted deployer for transformers.\\n    function setTransformerDeployer(address transformerDeployer)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        LibTransformERC20Storage.getStorage().transformerDeployer = transformerDeployer;\\n        emit TransformerDeployerUpdated(transformerDeployer);\\n    }\\n\\n    /// @dev Replace the optional signer for `transformERC20()` calldata.\\n    ///      Only callable by the owner.\\n    /// @param quoteSigner The address of the new calldata signer.\\n    function setQuoteSigner(address quoteSigner)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        LibTransformERC20Storage.getStorage().quoteSigner = quoteSigner;\\n        emit QuoteSignerUpdated(quoteSigner);\\n    }\\n\\n    /// @dev Return the allowed deployer for transformers.\\n    /// @return deployer The transform deployer address.\\n    function getTransformerDeployer()\\n        public\\n        override\\n        view\\n        returns (address deployer)\\n    {\\n        return LibTransformERC20Storage.getStorage().transformerDeployer;\\n    }\\n\\n    /// @dev Return the optional signer for `transformERC20()` calldata.\\n    /// @return signer The signer address.\\n    function getQuoteSigner()\\n        public\\n        override\\n        view\\n        returns (address signer)\\n    {\\n        return LibTransformERC20Storage.getStorage().quoteSigner;\\n    }\\n\\n    /// @dev Deploy a new wallet instance and replace the current one with it.\\n    ///      Useful if we somehow break the current wallet instance.\\n    ///      Only callable by the owner.\\n    /// @return wallet The new wallet instance.\\n    function createTransformWallet()\\n        public\\n        override\\n        onlyOwner\\n        returns (IFlashWallet wallet)\\n    {\\n        wallet = new FlashWallet();\\n        LibTransformERC20Storage.getStorage().wallet = wallet;\\n    }\\n\\n    /// @dev Executes a series of transformations to convert an ERC20 `inputToken`\\n    ///      to an ERC20 `outputToken`.\\n    /// @param inputToken The token being provided by the sender.\\n    ///        If `0xeee...`, ETH is implied and should be provided with the call.`\\n    /// @param outputToken The token to be acquired by the sender.\\n    ///        `0xeee...` implies ETH.\\n    /// @param inputTokenAmount The amount of `inputToken` to take from the sender.\\n    ///        If set to `uint256(-1)`, the entire spendable balance of the taker\\n    ///        will be solt.\\n    /// @param minOutputTokenAmount The minimum amount of `outputToken` the sender\\n    ///        must receive for the entire transformation to succeed. If set to zero,\\n    ///        the minimum output token transfer will not be asserted.\\n    /// @param transformations The transformations to execute on the token balance(s)\\n    ///        in sequence.\\n    /// @return outputTokenAmount The amount of `outputToken` received by the sender.\\n    function transformERC20(\\n        IERC20TokenV06 inputToken,\\n        IERC20TokenV06 outputToken,\\n        uint256 inputTokenAmount,\\n        uint256 minOutputTokenAmount,\\n        Transformation[] memory transformations\\n    )\\n        public\\n        override\\n        payable\\n        returns (uint256 outputTokenAmount)\\n    {\\n        return _transformERC20Private(\\n            TransformERC20Args({\\n                taker: msg.sender,\\n                inputToken: inputToken,\\n                outputToken: outputToken,\\n                inputTokenAmount: inputTokenAmount,\\n                minOutputTokenAmount: minOutputTokenAmount,\\n                transformations: transformations,\\n                useSelfBalance: false,\\n                recipient: msg.sender\\n            })\\n        );\\n    }\\n\\n    /// @dev Internal version of `transformERC20()`. Only callable from within.\\n    /// @param args A `TransformERC20Args` struct.\\n    /// @return outputTokenAmount The amount of `outputToken` received by the taker.\\n    function _transformERC20(TransformERC20Args memory args)\\n        public\\n        virtual\\n        override\\n        payable\\n        onlySelf\\n        returns (uint256 outputTokenAmount)\\n    {\\n        return _transformERC20Private(args);\\n    }\\n\\n    /// @dev Private version of `transformERC20()`.\\n    /// @param args A `TransformERC20Args` struct.\\n    /// @return outputTokenAmount The amount of `outputToken` received by the taker.\\n    function _transformERC20Private(TransformERC20Args memory args)\\n        private\\n        returns (uint256 outputTokenAmount)\\n    {\\n        // If the input token amount is -1 and we are not selling ETH,\\n        // transform the taker's entire spendable balance.\\n        if (!args.useSelfBalance && args.inputTokenAmount == uint256(-1)) {\\n            if (LibERC20Transformer.isTokenETH(args.inputToken)) {\\n                // We can't pull more ETH from the taker, so we just set the\\n                // input token amount to the value attached to the call.\\n                args.inputTokenAmount = msg.value;\\n            } else {\\n                args.inputTokenAmount = _getSpendableERC20BalanceOf(\\n                    args.inputToken,\\n                    args.taker\\n                );\\n            }\\n        }\\n\\n        TransformERC20PrivateState memory state;\\n        state.wallet = getTransformWallet();\\n        state.transformerDeployer = getTransformerDeployer();\\n\\n        // Remember the initial output token balance of the recipient.\\n        state.recipientOutputTokenBalanceBefore =\\n            LibERC20Transformer.getTokenBalanceOf(args.outputToken, args.recipient);\\n\\n        // Pull input tokens from the taker to the wallet and transfer attached ETH.\\n        _transferInputTokensAndAttachedEth(args, address(state.wallet));\\n\\n        {\\n            // Perform transformations.\\n            for (uint256 i = 0; i < args.transformations.length; ++i) {\\n                _executeTransformation(\\n                    state.wallet,\\n                    args.transformations[i],\\n                    state.transformerDeployer,\\n                    args.recipient\\n                );\\n            }\\n            // Transfer output tokens from wallet to recipient\\n            outputTokenAmount = _executeOutputTokenTransfer(\\n                args.outputToken,\\n                state.wallet,\\n                args.recipient\\n            );\\n        }\\n\\n        // Compute how much output token has been transferred to the recipient.\\n        state.recipientOutputTokenBalanceAfter =\\n            LibERC20Transformer.getTokenBalanceOf(args.outputToken, args.recipient);\\n        if (state.recipientOutputTokenBalanceAfter < state.recipientOutputTokenBalanceBefore) {\\n            LibTransformERC20RichErrors.NegativeTransformERC20OutputError(\\n                address(args.outputToken),\\n                state.recipientOutputTokenBalanceBefore - state.recipientOutputTokenBalanceAfter\\n            ).rrevert();\\n        }\\n        outputTokenAmount = LibSafeMathV06.min256(\\n            outputTokenAmount,\\n            state.recipientOutputTokenBalanceAfter.safeSub(state.recipientOutputTokenBalanceBefore)\\n        );\\n        // Ensure enough output token has been sent to the taker.\\n        if (outputTokenAmount < args.minOutputTokenAmount) {\\n            LibTransformERC20RichErrors.IncompleteTransformERC20Error(\\n                address(args.outputToken),\\n                outputTokenAmount,\\n                args.minOutputTokenAmount\\n            ).rrevert();\\n        }\\n\\n        // Emit an event.\\n        emit TransformedERC20(\\n            args.taker,\\n            address(args.inputToken),\\n            address(args.outputToken),\\n            args.inputTokenAmount,\\n            outputTokenAmount\\n        );\\n    }\\n\\n    /// @dev Return the current wallet instance that will serve as the execution\\n    ///      context for transformations.\\n    /// @return wallet The wallet instance.\\n    function getTransformWallet()\\n        public\\n        override\\n        view\\n        returns (IFlashWallet wallet)\\n    {\\n        return LibTransformERC20Storage.getStorage().wallet;\\n    }\\n\\n    /// @dev Transfer input tokens and any attached ETH to `to`\\n    /// @param args A `TransformERC20Args` struct.\\n    /// @param to The recipient of tokens and ETH.\\n    function _transferInputTokensAndAttachedEth(\\n        TransformERC20Args memory args,\\n        address payable to\\n    )\\n        private\\n    {\\n        if (\\n            LibERC20Transformer.isTokenETH(args.inputToken) &&\\n            msg.value < args.inputTokenAmount\\n        ) {\\n             // Token is ETH, so the caller must attach enough ETH to the call.\\n            LibTransformERC20RichErrors.InsufficientEthAttachedError(\\n                msg.value,\\n                args.inputTokenAmount\\n            ).rrevert();\\n        }\\n\\n        // Transfer any attached ETH.\\n        if (msg.value != 0) {\\n            to.transfer(msg.value);\\n        }\\n\\n        // Transfer input tokens.\\n        if (!LibERC20Transformer.isTokenETH(args.inputToken)) {\\n            if (args.useSelfBalance) {\\n                // Use EP balance input token.\\n                _transferERC20Tokens(\\n                    args.inputToken,\\n                    to,\\n                    args.inputTokenAmount\\n                );\\n            } else {\\n                // Pull ERC20 tokens from taker.\\n                _transferERC20TokensFrom(\\n                    args.inputToken,\\n                    args.taker,\\n                    to,\\n                    args.inputTokenAmount\\n                );\\n            }\\n        }\\n    }\\n\\n    /// @dev Executs a transformer in the context of `wallet`.\\n    /// @param wallet The wallet instance.\\n    /// @param transformation The transformation.\\n    /// @param transformerDeployer The address of the transformer deployer.\\n    /// @param recipient The recipient address.\\n    function _executeTransformation(\\n        IFlashWallet wallet,\\n        Transformation memory transformation,\\n        address transformerDeployer,\\n        address payable recipient\\n    )\\n        private\\n    {\\n        // Derive the transformer address from the deployment nonce.\\n        address payable transformer = LibERC20Transformer.getDeployedAddress(\\n            transformerDeployer,\\n            transformation.deploymentNonce\\n        );\\n        // Call `transformer.transform()` as the wallet.\\n        bytes memory resultData = wallet.executeDelegateCall(\\n            // The call target.\\n            transformer,\\n            // Call data.\\n            abi.encodeWithSelector(\\n                IERC20Transformer.transform.selector,\\n                IERC20Transformer.TransformContext({\\n                    sender: msg.sender,\\n                    recipient: recipient,\\n                    data: transformation.data\\n                })\\n            )\\n        );\\n        // Ensure the transformer returned the magic bytes.\\n        if (resultData.length != 32 ||\\n            abi.decode(resultData, (bytes4)) != LibERC20Transformer.TRANSFORMER_SUCCESS\\n        ) {\\n            LibTransformERC20RichErrors.TransformerFailedError(\\n                transformer,\\n                transformation.data,\\n                resultData\\n            ).rrevert();\\n        }\\n    }\\n\\n    function _executeOutputTokenTransfer(\\n        IERC20TokenV06 outputToken,\\n        IFlashWallet wallet,\\n        address payable recipient\\n    )\\n        private\\n        returns (uint256 transferAmount)\\n    {\\n        transferAmount =\\n            LibERC20Transformer.getTokenBalanceOf(outputToken, address(wallet));\\n        if (LibERC20Transformer.isTokenETH(outputToken)) {\\n            wallet.executeCall(\\n                recipient,\\n                \\\"\\\",\\n                transferAmount\\n            );\\n        } else {\\n            bytes memory resultData = wallet.executeCall(\\n                payable(address(outputToken)),\\n                abi.encodeWithSelector(\\n                    IERC20TokenV06.transfer.selector,\\n                    recipient,\\n                    transferAmount\\n                ),\\n                0\\n            );\\n            if (resultData.length == 0) {\\n                // If we get back 0 returndata, this may be a non-standard ERC-20 that\\n                // does not return a boolean. Check that it at least contains code.\\n                uint256 size;\\n                assembly { size := extcodesize(outputToken) }\\n                require(size > 0, \\\"invalid token address, contains no code\\\");\\n            } else if (resultData.length >= 32) {\\n                // If we get back at least 32 bytes, we know the target address\\n                // contains code, and we assume it is a token that returned a boolean\\n                // success value, which must be true.\\n                uint256 result = LibBytesV06.readUint256(resultData, 0);\\n                if (result != 1) {\\n                    LibRichErrorsV06.rrevert(resultData);\\n                }\\n            } else {\\n                // If 0 < returndatasize < 32, the target is a contract, but not a\\n                // valid token.\\n                LibRichErrorsV06.rrevert(resultData);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5d45000800e2045a6b3b9217e42f7d65fbed44271355e7bee72546a322a129a\",\"license\":\"Apache-2.0\"},\"src/zero-ex/features/interfaces/IBootstrapFeature.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\n\\n/// @dev Detachable `bootstrap()` feature.\\ninterface IBootstrapFeature {\\n\\n    /// @dev Bootstrap the initial feature set of this contract by delegatecalling\\n    ///      into `target`. Before exiting the `bootstrap()` function will\\n    ///      deregister itself from the proxy to prevent being called again.\\n    /// @param target The bootstrapper contract address.\\n    /// @param callData The call data to execute on `target`.\\n    function bootstrap(address target, bytes calldata callData) external;\\n}\\n\",\"keccak256\":\"0xf8f20e8857ed336b80f3a96a9eceec638acbe69e2a4c903a4355707076188c8f\",\"license\":\"Apache-2.0\"},\"src/zero-ex/features/interfaces/IFeature.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\n\\n/// @dev Basic interface for a feature contract.\\ninterface IFeature {\\n\\n    // solhint-disable func-name-mixedcase\\n\\n    /// @dev The name of this feature set.\\n    function FEATURE_NAME() external view returns (string memory name);\\n\\n    /// @dev The version of this feature set.\\n    function FEATURE_VERSION() external view returns (uint256 version);\\n}\\n\",\"keccak256\":\"0x95e4108668c121a4d7072c8cf579ce349fb1287e2259aed613e45d716ceb3905\",\"license\":\"Apache-2.0\"},\"src/zero-ex/features/interfaces/IMetaTransactionsFeature.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../../contracts-erc20/v06/IERC20TokenV06.sol\\\";\\nimport \\\"../libs/LibSignature.sol\\\";\\n\\n/// @dev Meta-transactions feature.\\ninterface IMetaTransactionsFeature {\\n    /// @dev Describes an exchange proxy meta transaction.\\n    struct MetaTransactionData {\\n        // Signer of meta-transaction. On whose behalf to execute the MTX.\\n        address payable signer;\\n        // Required sender, or NULL for anyone.\\n        address sender;\\n        // Minimum gas price.\\n        uint256 minGasPrice;\\n        // Maximum gas price.\\n        uint256 maxGasPrice;\\n        // MTX is invalid after this time.\\n        uint256 expirationTimeSeconds;\\n        // Nonce to make this MTX unique.\\n        uint256 salt;\\n        // Encoded call data to a function on the exchange proxy.\\n        bytes callData;\\n        // Amount of ETH to attach to the call.\\n        uint256 value;\\n        // ERC20 fee `signer` pays `sender`.\\n        IERC20TokenV06 feeToken;\\n        // ERC20 fee amount.\\n        uint256 feeAmount;\\n    }\\n\\n    /// @dev Emitted whenever a meta-transaction is executed via\\n    ///      `executeMetaTransaction()` or `executeMetaTransactions()`.\\n    /// @param hash The meta-transaction hash.\\n    /// @param selector The selector of the function being executed.\\n    /// @param signer Who to execute the meta-transaction on behalf of.\\n    /// @param sender Who executed the meta-transaction.\\n    event MetaTransactionExecuted(\\n        bytes32 hash,\\n        bytes4 indexed selector,\\n        address signer,\\n        address sender\\n    );\\n\\n    /// @dev Execute a single meta-transaction.\\n    /// @param mtx The meta-transaction.\\n    /// @param signature The signature by `mtx.signer`.\\n    /// @return returnResult The ABI-encoded result of the underlying call.\\n    function executeMetaTransaction(\\n        MetaTransactionData calldata mtx,\\n        LibSignature.Signature calldata signature\\n    )\\n        external\\n        payable\\n        returns (bytes memory returnResult);\\n\\n    /// @dev Execute multiple meta-transactions.\\n    /// @param mtxs The meta-transactions.\\n    /// @param signatures The signature by each respective `mtx.signer`.\\n    /// @return returnResults The ABI-encoded results of the underlying calls.\\n    function batchExecuteMetaTransactions(\\n        MetaTransactionData[] calldata mtxs,\\n        LibSignature.Signature[] calldata signatures\\n    )\\n        external\\n        payable\\n        returns (bytes[] memory returnResults);\\n\\n    /// @dev Get the block at which a meta-transaction has been executed.\\n    /// @param mtx The meta-transaction.\\n    /// @return blockNumber The block height when the meta-transactioin was executed.\\n    function getMetaTransactionExecutedBlock(MetaTransactionData calldata mtx)\\n        external\\n        view\\n        returns (uint256 blockNumber);\\n\\n    /// @dev Get the block at which a meta-transaction hash has been executed.\\n    /// @param mtxHash The meta-transaction hash.\\n    /// @return blockNumber The block height when the meta-transactioin was executed.\\n    function getMetaTransactionHashExecutedBlock(bytes32 mtxHash)\\n        external\\n        view\\n        returns (uint256 blockNumber);\\n\\n    /// @dev Get the EIP712 hash of a meta-transaction.\\n    /// @param mtx The meta-transaction.\\n    /// @return mtxHash The EIP712 hash of `mtx`.\\n    function getMetaTransactionHash(MetaTransactionData calldata mtx)\\n        external\\n        view\\n        returns (bytes32 mtxHash);\\n}\\n\",\"keccak256\":\"0x10d393a79369a4d865265c626d2daed453e042139c378546c000fe4f99d99302\",\"license\":\"Apache-2.0\"},\"src/zero-ex/features/interfaces/INativeOrdersEvents.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2021 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../../contracts-erc20/v06/IERC20TokenV06.sol\\\";\\nimport \\\"../libs/LibSignature.sol\\\";\\nimport \\\"../libs/LibNativeOrder.sol\\\";\\n\\n\\n/// @dev Events emitted by NativeOrdersFeature.\\ninterface INativeOrdersEvents {\\n\\n    /// @dev Emitted whenever a `LimitOrder` is filled.\\n    /// @param orderHash The canonical hash of the order.\\n    /// @param maker The maker of the order.\\n    /// @param taker The taker of the order.\\n    /// @param feeRecipient Fee recipient of the order.\\n    /// @param takerTokenFilledAmount How much taker token was filled.\\n    /// @param makerTokenFilledAmount How much maker token was filled.\\n    /// @param protocolFeePaid How much protocol fee was paid.\\n    /// @param pool The fee pool associated with this order.\\n    event LimitOrderFilled(\\n        bytes32 orderHash,\\n        address maker,\\n        address taker,\\n        address feeRecipient,\\n        address makerToken,\\n        address takerToken,\\n        uint128 takerTokenFilledAmount,\\n        uint128 makerTokenFilledAmount,\\n        uint128 takerTokenFeeFilledAmount,\\n        uint256 protocolFeePaid,\\n        bytes32 pool\\n    );\\n\\n    /// @dev Emitted whenever an `RfqOrder` is filled.\\n    /// @param orderHash The canonical hash of the order.\\n    /// @param maker The maker of the order.\\n    /// @param taker The taker of the order.\\n    /// @param takerTokenFilledAmount How much taker token was filled.\\n    /// @param makerTokenFilledAmount How much maker token was filled.\\n    /// @param pool The fee pool associated with this order.\\n    event RfqOrderFilled(\\n        bytes32 orderHash,\\n        address maker,\\n        address taker,\\n        address makerToken,\\n        address takerToken,\\n        uint128 takerTokenFilledAmount,\\n        uint128 makerTokenFilledAmount,\\n        bytes32 pool\\n    );\\n\\n    /// @dev Emitted whenever a limit or RFQ order is cancelled.\\n    /// @param orderHash The canonical hash of the order.\\n    /// @param maker The order maker.\\n    event OrderCancelled(\\n        bytes32 orderHash,\\n        address maker\\n    );\\n\\n    /// @dev Emitted whenever Limit orders are cancelled by pair by a maker.\\n    /// @param maker The maker of the order.\\n    /// @param makerToken The maker token in a pair for the orders cancelled.\\n    /// @param takerToken The taker token in a pair for the orders cancelled.\\n    /// @param minValidSalt The new minimum valid salt an order with this pair must\\n    ///        have.\\n    event PairCancelledLimitOrders(\\n        address maker,\\n        address makerToken,\\n        address takerToken,\\n        uint256 minValidSalt\\n    );\\n\\n    /// @dev Emitted whenever RFQ orders are cancelled by pair by a maker.\\n    /// @param maker The maker of the order.\\n    /// @param makerToken The maker token in a pair for the orders cancelled.\\n    /// @param takerToken The taker token in a pair for the orders cancelled.\\n    /// @param minValidSalt The new minimum valid salt an order with this pair must\\n    ///        have.\\n    event PairCancelledRfqOrders(\\n        address maker,\\n        address makerToken,\\n        address takerToken,\\n        uint256 minValidSalt\\n    );\\n\\n    /// @dev Emitted when new addresses are allowed or disallowed to fill\\n    ///      orders with a given txOrigin.\\n    /// @param origin The address doing the allowing.\\n    /// @param addrs The address being allowed/disallowed.\\n    /// @param allowed Indicates whether the address should be allowed.\\n    event RfqOrderOriginsAllowed(\\n        address origin,\\n        address[] addrs,\\n        bool allowed\\n    );\\n\\n    /// @dev Emitted when new order signers are registered\\n    /// @param maker The maker address that is registering a designated signer.\\n    /// @param signer The address that will sign on behalf of maker.\\n    /// @param allowed Indicates whether the address should be allowed.\\n    event OrderSignerRegistered(\\n        address maker,\\n        address signer,\\n        bool allowed\\n    );\\n}\\n\",\"keccak256\":\"0x612127d3c7a08652bfe25f5c202829c0a13c2ae2b139cacd26426b748c2abff5\",\"license\":\"Apache-2.0\"},\"src/zero-ex/features/interfaces/INativeOrdersFeature.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../../contracts-erc20/v06/IERC20TokenV06.sol\\\";\\nimport \\\"../libs/LibSignature.sol\\\";\\nimport \\\"../libs/LibNativeOrder.sol\\\";\\nimport \\\"./INativeOrdersEvents.sol\\\";\\n\\n\\n/// @dev Feature for interacting with limit orders.\\ninterface INativeOrdersFeature is\\n    INativeOrdersEvents\\n{\\n\\n    /// @dev Transfers protocol fees from the `FeeCollector` pools into\\n    ///      the staking contract.\\n    /// @param poolIds Staking pool IDs\\n    function transferProtocolFeesForPools(bytes32[] calldata poolIds)\\n        external;\\n\\n    /// @dev Fill a limit order. The taker and sender will be the caller.\\n    /// @param order The limit order. ETH protocol fees can be\\n    ///      attached to this call. Any unspent ETH will be refunded to\\n    ///      the caller.\\n    /// @param signature The order signature.\\n    /// @param takerTokenFillAmount Maximum taker token amount to fill this order with.\\n    /// @return takerTokenFilledAmount How much maker token was filled.\\n    /// @return makerTokenFilledAmount How much maker token was filled.\\n    function fillLimitOrder(\\n        LibNativeOrder.LimitOrder calldata order,\\n        LibSignature.Signature calldata signature,\\n        uint128 takerTokenFillAmount\\n    )\\n        external\\n        payable\\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount);\\n\\n    /// @dev Fill an RFQ order for up to `takerTokenFillAmount` taker tokens.\\n    ///      The taker will be the caller.\\n    /// @param order The RFQ order.\\n    /// @param signature The order signature.\\n    /// @param takerTokenFillAmount Maximum taker token amount to fill this order with.\\n    /// @return takerTokenFilledAmount How much maker token was filled.\\n    /// @return makerTokenFilledAmount How much maker token was filled.\\n    function fillRfqOrder(\\n        LibNativeOrder.RfqOrder calldata order,\\n        LibSignature.Signature calldata signature,\\n        uint128 takerTokenFillAmount\\n    )\\n        external\\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount);\\n\\n    /// @dev Fill an RFQ order for exactly `takerTokenFillAmount` taker tokens.\\n    ///      The taker will be the caller. ETH protocol fees can be\\n    ///      attached to this call. Any unspent ETH will be refunded to\\n    ///      the caller.\\n    /// @param order The limit order.\\n    /// @param signature The order signature.\\n    /// @param takerTokenFillAmount How much taker token to fill this order with.\\n    /// @return makerTokenFilledAmount How much maker token was filled.\\n    function fillOrKillLimitOrder(\\n        LibNativeOrder.LimitOrder calldata order,\\n        LibSignature.Signature calldata signature,\\n        uint128 takerTokenFillAmount\\n    )\\n        external\\n        payable\\n        returns (uint128 makerTokenFilledAmount);\\n\\n    /// @dev Fill an RFQ order for exactly `takerTokenFillAmount` taker tokens.\\n    ///      The taker will be the caller.\\n    /// @param order The RFQ order.\\n    /// @param signature The order signature.\\n    /// @param takerTokenFillAmount How much taker token to fill this order with.\\n    /// @return makerTokenFilledAmount How much maker token was filled.\\n    function fillOrKillRfqOrder(\\n        LibNativeOrder.RfqOrder calldata order,\\n        LibSignature.Signature calldata signature,\\n        uint128 takerTokenFillAmount\\n    )\\n        external\\n        returns (uint128 makerTokenFilledAmount);\\n\\n    /// @dev Fill a limit order. Internal variant. ETH protocol fees can be\\n    ///      attached to this call. Any unspent ETH will be refunded to\\n    ///      `msg.sender` (not `sender`).\\n    /// @param order The limit order.\\n    /// @param signature The order signature.\\n    /// @param takerTokenFillAmount Maximum taker token to fill this order with.\\n    /// @param taker The order taker.\\n    /// @param sender The order sender.\\n    /// @return takerTokenFilledAmount How much maker token was filled.\\n    /// @return makerTokenFilledAmount How much maker token was filled.\\n    function _fillLimitOrder(\\n        LibNativeOrder.LimitOrder calldata order,\\n        LibSignature.Signature calldata signature,\\n        uint128 takerTokenFillAmount,\\n        address taker,\\n        address sender\\n    )\\n        external\\n        payable\\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount);\\n\\n    /// @dev Fill an RFQ order. Internal variant.\\n    /// @param order The RFQ order.\\n    /// @param signature The order signature.\\n    /// @param takerTokenFillAmount Maximum taker token to fill this order with.\\n    /// @param taker The order taker.\\n    /// @param useSelfBalance Whether to use the ExchangeProxy's transient\\n    ///        balance of taker tokens to fill the order.\\n    /// @param recipient The recipient of the maker tokens.\\n    /// @return takerTokenFilledAmount How much maker token was filled.\\n    /// @return makerTokenFilledAmount How much maker token was filled.\\n    function _fillRfqOrder(\\n        LibNativeOrder.RfqOrder calldata order,\\n        LibSignature.Signature calldata signature,\\n        uint128 takerTokenFillAmount,\\n        address taker,\\n        bool useSelfBalance,\\n        address recipient\\n    )\\n        external\\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount);\\n\\n    /// @dev Cancel a single limit order. The caller must be the maker or a valid order signer.\\n    ///      Silently succeeds if the order has already been cancelled.\\n    /// @param order The limit order.\\n    function cancelLimitOrder(LibNativeOrder.LimitOrder calldata order)\\n        external;\\n\\n    /// @dev Cancel a single RFQ order. The caller must be the maker or a valid order signer.\\n    ///      Silently succeeds if the order has already been cancelled.\\n    /// @param order The RFQ order.\\n    function cancelRfqOrder(LibNativeOrder.RfqOrder calldata order)\\n        external;\\n\\n    /// @dev Mark what tx.origin addresses are allowed to fill an order that\\n    ///      specifies the message sender as its txOrigin.\\n    /// @param origins An array of origin addresses to update.\\n    /// @param allowed True to register, false to unregister.\\n    function registerAllowedRfqOrigins(address[] memory origins, bool allowed)\\n        external;\\n\\n    /// @dev Cancel multiple limit orders. The caller must be the maker or a valid order signer.\\n    ///      Silently succeeds if the order has already been cancelled.\\n    /// @param orders The limit orders.\\n    function batchCancelLimitOrders(LibNativeOrder.LimitOrder[] calldata orders)\\n        external;\\n\\n    /// @dev Cancel multiple RFQ orders. The caller must be the maker or a valid order signer.\\n    ///      Silently succeeds if the order has already been cancelled.\\n    /// @param orders The RFQ orders.\\n    function batchCancelRfqOrders(LibNativeOrder.RfqOrder[] calldata orders)\\n        external;\\n\\n    /// @dev Cancel all limit orders for a given maker and pair with a salt less\\n    ///      than the value provided. The caller must be the maker. Subsequent\\n    ///      calls to this function with the same caller and pair require the\\n    ///      new salt to be >= the old salt.\\n    /// @param makerToken The maker token.\\n    /// @param takerToken The taker token.\\n    /// @param minValidSalt The new minimum valid salt.\\n    function cancelPairLimitOrders(\\n        IERC20TokenV06 makerToken,\\n        IERC20TokenV06 takerToken,\\n        uint256 minValidSalt\\n    )\\n        external;\\n\\n    /// @dev Cancel all limit orders for a given maker and pair with a salt less\\n    ///      than the value provided. The caller must be a signer registered to the maker.\\n    ///      Subsequent calls to this function with the same maker and pair require the\\n    ///      new salt to be >= the old salt.\\n    /// @param maker The maker for which to cancel.\\n    /// @param makerToken The maker token.\\n    /// @param takerToken The taker token.\\n    /// @param minValidSalt The new minimum valid salt.\\n    function cancelPairLimitOrdersWithSigner(\\n        address maker,\\n        IERC20TokenV06 makerToken,\\n        IERC20TokenV06 takerToken,\\n        uint256 minValidSalt\\n    )\\n        external;\\n\\n    /// @dev Cancel all limit orders for a given maker and pairs with salts less\\n    ///      than the values provided. The caller must be the maker. Subsequent\\n    ///      calls to this function with the same caller and pair require the\\n    ///      new salt to be >= the old salt.\\n    /// @param makerTokens The maker tokens.\\n    /// @param takerTokens The taker tokens.\\n    /// @param minValidSalts The new minimum valid salts.\\n    function batchCancelPairLimitOrders(\\n        IERC20TokenV06[] calldata makerTokens,\\n        IERC20TokenV06[] calldata takerTokens,\\n        uint256[] calldata minValidSalts\\n    )\\n        external;\\n\\n    /// @dev Cancel all limit orders for a given maker and pairs with salts less\\n    ///      than the values provided. The caller must be a signer registered to the maker.\\n    ///      Subsequent calls to this function with the same maker and pair require the\\n    ///      new salt to be >= the old salt.\\n    /// @param maker The maker for which to cancel.\\n    /// @param makerTokens The maker tokens.\\n    /// @param takerTokens The taker tokens.\\n    /// @param minValidSalts The new minimum valid salts.\\n    function batchCancelPairLimitOrdersWithSigner(\\n        address maker,\\n        IERC20TokenV06[] memory makerTokens,\\n        IERC20TokenV06[] memory takerTokens,\\n        uint256[] memory minValidSalts\\n    )\\n        external;\\n\\n    /// @dev Cancel all RFQ orders for a given maker and pair with a salt less\\n    ///      than the value provided. The caller must be the maker. Subsequent\\n    ///      calls to this function with the same caller and pair require the\\n    ///      new salt to be >= the old salt.\\n    /// @param makerToken The maker token.\\n    /// @param takerToken The taker token.\\n    /// @param minValidSalt The new minimum valid salt.\\n    function cancelPairRfqOrders(\\n        IERC20TokenV06 makerToken,\\n        IERC20TokenV06 takerToken,\\n        uint256 minValidSalt\\n    )\\n        external;\\n\\n    /// @dev Cancel all RFQ orders for a given maker and pair with a salt less\\n    ///      than the value provided. The caller must be a signer registered to the maker.\\n    ///      Subsequent calls to this function with the same maker and pair require the\\n    ///      new salt to be >= the old salt.\\n    /// @param maker The maker for which to cancel.\\n    /// @param makerToken The maker token.\\n    /// @param takerToken The taker token.\\n    /// @param minValidSalt The new minimum valid salt.\\n    function cancelPairRfqOrdersWithSigner(\\n        address maker,\\n        IERC20TokenV06 makerToken,\\n        IERC20TokenV06 takerToken,\\n        uint256 minValidSalt\\n    )\\n        external;\\n\\n    /// @dev Cancel all RFQ orders for a given maker and pairs with salts less\\n    ///      than the values provided. The caller must be the maker. Subsequent\\n    ///      calls to this function with the same caller and pair require the\\n    ///      new salt to be >= the old salt.\\n    /// @param makerTokens The maker tokens.\\n    /// @param takerTokens The taker tokens.\\n    /// @param minValidSalts The new minimum valid salts.\\n    function batchCancelPairRfqOrders(\\n        IERC20TokenV06[] calldata makerTokens,\\n        IERC20TokenV06[] calldata takerTokens,\\n        uint256[] calldata minValidSalts\\n    )\\n        external;\\n\\n    /// @dev Cancel all RFQ orders for a given maker and pairs with salts less\\n    ///      than the values provided. The caller must be a signer registered to the maker.\\n    ///      Subsequent calls to this function with the same maker and pair require the\\n    ///      new salt to be >= the old salt.\\n    /// @param maker The maker for which to cancel.\\n    /// @param makerTokens The maker tokens.\\n    /// @param takerTokens The taker tokens.\\n    /// @param minValidSalts The new minimum valid salts.\\n    function batchCancelPairRfqOrdersWithSigner(\\n        address maker,\\n        IERC20TokenV06[] memory makerTokens,\\n        IERC20TokenV06[] memory takerTokens,\\n        uint256[] memory minValidSalts\\n    )\\n        external;\\n\\n    /// @dev Get the order info for a limit order.\\n    /// @param order The limit order.\\n    /// @return orderInfo Info about the order.\\n    function getLimitOrderInfo(LibNativeOrder.LimitOrder calldata order)\\n        external\\n        view\\n        returns (LibNativeOrder.OrderInfo memory orderInfo);\\n\\n    /// @dev Get the order info for an RFQ order.\\n    /// @param order The RFQ order.\\n    /// @return orderInfo Info about the order.\\n    function getRfqOrderInfo(LibNativeOrder.RfqOrder calldata order)\\n        external\\n        view\\n        returns (LibNativeOrder.OrderInfo memory orderInfo);\\n\\n    /// @dev Get the canonical hash of a limit order.\\n    /// @param order The limit order.\\n    /// @return orderHash The order hash.\\n    function getLimitOrderHash(LibNativeOrder.LimitOrder calldata order)\\n        external\\n        view\\n        returns (bytes32 orderHash);\\n\\n    /// @dev Get the canonical hash of an RFQ order.\\n    /// @param order The RFQ order.\\n    /// @return orderHash The order hash.\\n    function getRfqOrderHash(LibNativeOrder.RfqOrder calldata order)\\n        external\\n        view\\n        returns (bytes32 orderHash);\\n\\n    /// @dev Get the protocol fee multiplier. This should be multiplied by the\\n    ///      gas price to arrive at the required protocol fee to fill a native order.\\n    /// @return multiplier The protocol fee multiplier.\\n    function getProtocolFeeMultiplier()\\n        external\\n        view\\n        returns (uint32 multiplier);\\n\\n    /// @dev Get order info, fillable amount, and signature validity for a limit order.\\n    ///      Fillable amount is determined using balances and allowances of the maker.\\n    /// @param order The limit order.\\n    /// @param signature The order signature.\\n    /// @return orderInfo Info about the order.\\n    /// @return actualFillableTakerTokenAmount How much of the order is fillable\\n    ///         based on maker funds, in taker tokens.\\n    /// @return isSignatureValid Whether the signature is valid.\\n    function getLimitOrderRelevantState(\\n        LibNativeOrder.LimitOrder calldata order,\\n        LibSignature.Signature calldata signature\\n    )\\n        external\\n        view\\n        returns (\\n            LibNativeOrder.OrderInfo memory orderInfo,\\n            uint128 actualFillableTakerTokenAmount,\\n            bool isSignatureValid\\n        );\\n\\n    /// @dev Get order info, fillable amount, and signature validity for an RFQ order.\\n    ///      Fillable amount is determined using balances and allowances of the maker.\\n    /// @param order The RFQ order.\\n    /// @param signature The order signature.\\n    /// @return orderInfo Info about the order.\\n    /// @return actualFillableTakerTokenAmount How much of the order is fillable\\n    ///         based on maker funds, in taker tokens.\\n    /// @return isSignatureValid Whether the signature is valid.\\n    function getRfqOrderRelevantState(\\n        LibNativeOrder.RfqOrder calldata order,\\n        LibSignature.Signature calldata signature\\n    )\\n        external\\n        view\\n        returns (\\n            LibNativeOrder.OrderInfo memory orderInfo,\\n            uint128 actualFillableTakerTokenAmount,\\n            bool isSignatureValid\\n        );\\n\\n    /// @dev Batch version of `getLimitOrderRelevantState()`, without reverting.\\n    ///      Orders that would normally cause `getLimitOrderRelevantState()`\\n    ///      to revert will have empty results.\\n    /// @param orders The limit orders.\\n    /// @param signatures The order signatures.\\n    /// @return orderInfos Info about the orders.\\n    /// @return actualFillableTakerTokenAmounts How much of each order is fillable\\n    ///         based on maker funds, in taker tokens.\\n    /// @return isSignatureValids Whether each signature is valid for the order.\\n    function batchGetLimitOrderRelevantStates(\\n        LibNativeOrder.LimitOrder[] calldata orders,\\n        LibSignature.Signature[] calldata signatures\\n    )\\n        external\\n        view\\n        returns (\\n            LibNativeOrder.OrderInfo[] memory orderInfos,\\n            uint128[] memory actualFillableTakerTokenAmounts,\\n            bool[] memory isSignatureValids\\n        );\\n\\n    /// @dev Batch version of `getRfqOrderRelevantState()`, without reverting.\\n    ///      Orders that would normally cause `getRfqOrderRelevantState()`\\n    ///      to revert will have empty results.\\n    /// @param orders The RFQ orders.\\n    /// @param signatures The order signatures.\\n    /// @return orderInfos Info about the orders.\\n    /// @return actualFillableTakerTokenAmounts How much of each order is fillable\\n    ///         based on maker funds, in taker tokens.\\n    /// @return isSignatureValids Whether each signature is valid for the order.\\n    function batchGetRfqOrderRelevantStates(\\n        LibNativeOrder.RfqOrder[] calldata orders,\\n        LibSignature.Signature[] calldata signatures\\n    )\\n        external\\n        view\\n        returns (\\n            LibNativeOrder.OrderInfo[] memory orderInfos,\\n            uint128[] memory actualFillableTakerTokenAmounts,\\n            bool[] memory isSignatureValids\\n        );\\n\\n    /// @dev Register a signer who can sign on behalf of msg.sender\\n    ///      This allows one to sign on behalf of a contract that calls this function\\n    /// @param signer The address from which you plan to generate signatures\\n    /// @param allowed True to register, false to unregister.\\n    function registerAllowedOrderSigner(\\n        address signer,\\n        bool allowed\\n    )\\n        external;\\n\\n    /// @dev checks if a given address is registered to sign on behalf of a maker address\\n    /// @param maker The maker address encoded in an order (can be a contract)\\n    /// @param signer The address that is providing a signature\\n    function isValidOrderSigner(\\n        address maker,\\n        address signer\\n    )\\n        external\\n        view\\n        returns (bool isAllowed);\\n}\\n\",\"keccak256\":\"0x89d0f6de7d2b6801f52707bed5b565e5ee17812285aa684272be969772f6f0ec\",\"license\":\"Apache-2.0\"},\"src/zero-ex/features/interfaces/IOtcOrdersFeature.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2021 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../libs/LibNativeOrder.sol\\\";\\nimport \\\"../libs/LibSignature.sol\\\";\\n\\n\\n/// @dev Feature for interacting with OTC orders.\\ninterface IOtcOrdersFeature {\\n\\n    /// @dev Emitted whenever an `OtcOrder` is filled.\\n    /// @param orderHash The canonical hash of the order.\\n    /// @param maker The maker of the order.\\n    /// @param taker The taker of the order.\\n    /// @param makerTokenFilledAmount How much maker token was filled.\\n    /// @param takerTokenFilledAmount How much taker token was filled.\\n    event OtcOrderFilled(\\n        bytes32 orderHash,\\n        address maker,\\n        address taker,\\n        address makerToken,\\n        address takerToken,\\n        uint128 makerTokenFilledAmount,\\n        uint128 takerTokenFilledAmount\\n    );\\n\\n    /// @dev Fill an OTC order for up to `takerTokenFillAmount` taker tokens.\\n    /// @param order The OTC order.\\n    /// @param makerSignature The order signature from the maker.\\n    /// @param takerTokenFillAmount Maximum taker token amount to fill this\\n    ///        order with.\\n    /// @return takerTokenFilledAmount How much taker token was filled.\\n    /// @return makerTokenFilledAmount How much maker token was filled.\\n    function fillOtcOrder(\\n        LibNativeOrder.OtcOrder calldata order,\\n        LibSignature.Signature calldata makerSignature,\\n        uint128 takerTokenFillAmount\\n    )\\n        external\\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount);\\n\\n    /// @dev Fill an OTC order for up to `takerTokenFillAmount` taker tokens.\\n    ///      Unwraps bought WETH into ETH before sending it to \\n    ///      the taker.\\n    /// @param order The OTC order.\\n    /// @param makerSignature The order signature from the maker.\\n    /// @param takerTokenFillAmount Maximum taker token amount to fill this\\n    ///        order with.\\n    /// @return takerTokenFilledAmount How much taker token was filled.\\n    /// @return makerTokenFilledAmount How much maker token was filled.\\n    function fillOtcOrderForEth(\\n        LibNativeOrder.OtcOrder calldata order,\\n        LibSignature.Signature calldata makerSignature,\\n        uint128 takerTokenFillAmount\\n    )\\n        external\\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount);\\n\\n    /// @dev Fill an OTC order whose taker token is WETH for up\\n    ///      to `msg.value`.\\n    /// @param order The OTC order.\\n    /// @param makerSignature The order signature from the maker.\\n    /// @return takerTokenFilledAmount How much taker token was filled.\\n    /// @return makerTokenFilledAmount How much maker token was filled.\\n    function fillOtcOrderWithEth(\\n        LibNativeOrder.OtcOrder calldata order,\\n        LibSignature.Signature calldata makerSignature\\n    )\\n        external\\n        payable\\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount);\\n\\n    /// @dev Fully fill an OTC order. \\\"Meta-transaction\\\" variant,\\n    ///      requires order to be signed by both maker and taker.\\n    /// @param order The OTC order.\\n    /// @param makerSignature The order signature from the maker.\\n    /// @param takerSignature The order signature from the taker.\\n    function fillTakerSignedOtcOrder(\\n        LibNativeOrder.OtcOrder calldata order,\\n        LibSignature.Signature calldata makerSignature,\\n        LibSignature.Signature calldata takerSignature\\n    )\\n        external;\\n\\n    /// @dev Fully fill an OTC order. \\\"Meta-transaction\\\" variant,\\n    ///      requires order to be signed by both maker and taker.\\n    ///      Unwraps bought WETH into ETH before sending it to \\n    ///      the taker.\\n    /// @param order The OTC order.\\n    /// @param makerSignature The order signature from the maker.\\n    /// @param takerSignature The order signature from the taker.\\n    function fillTakerSignedOtcOrderForEth(\\n        LibNativeOrder.OtcOrder calldata order,\\n        LibSignature.Signature calldata makerSignature,\\n        LibSignature.Signature calldata takerSignature\\n    )\\n        external;\\n\\n    /// @dev Fills multiple taker-signed OTC orders.\\n    /// @param orders Array of OTC orders.\\n    /// @param makerSignatures Array of maker signatures for each order.\\n    /// @param takerSignatures Array of taker signatures for each order.\\n    /// @param unwrapWeth Array of booleans representing whether or not \\n    ///        to unwrap bought WETH into ETH for each order. Should be set \\n    ///        to false if the maker token is not WETH.\\n    /// @return successes Array of booleans representing whether or not\\n    ///         each order in `orders` was filled successfully.\\n    function batchFillTakerSignedOtcOrders(\\n        LibNativeOrder.OtcOrder[] calldata orders,\\n        LibSignature.Signature[] calldata makerSignatures,\\n        LibSignature.Signature[] calldata takerSignatures,\\n        bool[] calldata unwrapWeth\\n    )\\n        external\\n        returns (bool[] memory successes);\\n\\n    /// @dev Fill an OTC order for up to `takerTokenFillAmount` taker tokens.\\n    ///      Internal variant.\\n    /// @param order The OTC order.\\n    /// @param makerSignature The order signature from the maker.\\n    /// @param takerTokenFillAmount Maximum taker token amount to fill this\\n    ///        order with.\\n    /// @param taker The address to fill the order in the context of.\\n    /// @param useSelfBalance Whether to use the Exchange Proxy's balance\\n    ///        of input tokens.\\n    /// @param recipient The recipient of the bought maker tokens.\\n    /// @return takerTokenFilledAmount How much taker token was filled.\\n    /// @return makerTokenFilledAmount How much maker token was filled.\\n    function _fillOtcOrder(\\n        LibNativeOrder.OtcOrder calldata order,\\n        LibSignature.Signature calldata makerSignature,\\n        uint128 takerTokenFillAmount,\\n        address taker,\\n        bool useSelfBalance,\\n        address recipient\\n    )\\n        external\\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount);\\n\\n    /// @dev Get the order info for an OTC order.\\n    /// @param order The OTC order.\\n    /// @return orderInfo Info about the order.\\n    function getOtcOrderInfo(LibNativeOrder.OtcOrder calldata order)\\n        external\\n        view\\n        returns (LibNativeOrder.OtcOrderInfo memory orderInfo);\\n\\n    /// @dev Get the canonical hash of an OTC order.\\n    /// @param order The OTC order.\\n    /// @return orderHash The order hash.\\n    function getOtcOrderHash(LibNativeOrder.OtcOrder calldata order)\\n        external\\n        view\\n        returns (bytes32 orderHash);\\n\\n    /// @dev Get the last nonce used for a particular\\n    ///      tx.origin address and nonce bucket.\\n    /// @param txOrigin The address.\\n    /// @param nonceBucket The nonce bucket index.\\n    /// @return lastNonce The last nonce value used.\\n    function lastOtcTxOriginNonce(address txOrigin, uint64 nonceBucket)\\n        external\\n        view\\n        returns (uint128 lastNonce);\\n}\\n\",\"keccak256\":\"0xcc57528f498ec59294a655573d76630fcde9c5e59ac52b927ab3bd2905700061\",\"license\":\"Apache-2.0\"},\"src/zero-ex/features/interfaces/IOwnableFeature.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../../contracts-utils/v06/interfaces/IOwnableV06.sol\\\";\\n\\n\\n// solhint-disable no-empty-blocks\\n/// @dev Owner management and migration features.\\ninterface IOwnableFeature is\\n    IOwnableV06\\n{\\n    /// @dev Emitted when `migrate()` is called.\\n    /// @param caller The caller of `migrate()`.\\n    /// @param migrator The migration contract.\\n    /// @param newOwner The address of the new owner.\\n    event Migrated(address caller, address migrator, address newOwner);\\n\\n    /// @dev Execute a migration function in the context of the ZeroEx contract.\\n    ///      The result of the function being called should be the magic bytes\\n    ///      0x2c64c5ef (`keccack('MIGRATE_SUCCESS')`). Only callable by the owner.\\n    ///      The owner will be temporarily set to `address(this)` inside the call.\\n    ///      Before returning, the owner will be set to `newOwner`.\\n    /// @param target The migrator contract address.\\n    /// @param newOwner The address of the new owner.\\n    /// @param data The call data.\\n    function migrate(address target, bytes calldata data, address newOwner) external;\\n}\\n\",\"keccak256\":\"0xe81956582c0be0010796d0946ba045e3e11f0e048c904d6448fa474944244c89\",\"license\":\"Apache-2.0\"},\"src/zero-ex/features/interfaces/ISimpleFunctionRegistryFeature.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\n\\n/// @dev Basic registry management features.\\ninterface ISimpleFunctionRegistryFeature {\\n\\n    /// @dev A function implementation was updated via `extend()` or `rollback()`.\\n    /// @param selector The function selector.\\n    /// @param oldImpl The implementation contract address being replaced.\\n    /// @param newImpl The replacement implementation contract address.\\n    event ProxyFunctionUpdated(bytes4 indexed selector, address oldImpl, address newImpl);\\n\\n    /// @dev Roll back to a prior implementation of a function.\\n    /// @param selector The function selector.\\n    /// @param targetImpl The address of an older implementation of the function.\\n    function rollback(bytes4 selector, address targetImpl) external;\\n\\n    /// @dev Register or replace a function.\\n    /// @param selector The function selector.\\n    /// @param impl The implementation contract for the function.\\n    function extend(bytes4 selector, address impl) external;\\n\\n    /// @dev Retrieve the length of the rollback history for a function.\\n    /// @param selector The function selector.\\n    /// @return rollbackLength The number of items in the rollback history for\\n    ///         the function.\\n    function getRollbackLength(bytes4 selector)\\n        external\\n        view\\n        returns (uint256 rollbackLength);\\n\\n    /// @dev Retrieve an entry in the rollback history for a function.\\n    /// @param selector The function selector.\\n    /// @param idx The index in the rollback history.\\n    /// @return impl An implementation address for the function at\\n    ///         index `idx`.\\n    function getRollbackEntryAtIndex(bytes4 selector, uint256 idx)\\n        external\\n        view\\n        returns (address impl);\\n}\\n\",\"keccak256\":\"0x07507897f6b0f0e62895b7a0124ecc27f202b25cb682c9d8dc5eaf79a64a9233\",\"license\":\"Apache-2.0\"},\"src/zero-ex/features/interfaces/ITransformERC20Feature.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../../contracts-erc20/v06/IERC20TokenV06.sol\\\";\\nimport \\\"../../transformers/IERC20Transformer.sol\\\";\\nimport \\\"../../external/IFlashWallet.sol\\\";\\n\\n\\n/// @dev Feature to composably transform between ERC20 tokens.\\ninterface ITransformERC20Feature {\\n\\n    /// @dev Defines a transformation to run in `transformERC20()`.\\n    struct Transformation {\\n        // The deployment nonce for the transformer.\\n        // The address of the transformer contract will be derived from this\\n        // value.\\n        uint32 deploymentNonce;\\n        // Arbitrary data to pass to the transformer.\\n        bytes data;\\n    }\\n\\n    /// @dev Arguments for `_transformERC20()`.\\n    struct TransformERC20Args {\\n        // The taker address.\\n        address payable taker;\\n        // The token being provided by the taker.\\n        // If `0xeee...`, ETH is implied and should be provided with the call.`\\n        IERC20TokenV06 inputToken;\\n        // The token to be acquired by the taker.\\n        // `0xeee...` implies ETH.\\n        IERC20TokenV06 outputToken;\\n        // The amount of `inputToken` to take from the taker.\\n        // If set to `uint256(-1)`, the entire spendable balance of the taker\\n        // will be solt.\\n        uint256 inputTokenAmount;\\n        // The minimum amount of `outputToken` the taker\\n        // must receive for the entire transformation to succeed. If set to zero,\\n        // the minimum output token transfer will not be asserted.\\n        uint256 minOutputTokenAmount;\\n        // The transformations to execute on the token balance(s)\\n        // in sequence.\\n        Transformation[] transformations;\\n        // Whether to use the Exchange Proxy's balance of `inputToken`.\\n        bool useSelfBalance;\\n        // The recipient of the bought `outputToken`.\\n        address payable recipient;\\n    }\\n\\n    /// @dev Raised upon a successful `transformERC20`.\\n    /// @param taker The taker (caller) address.\\n    /// @param inputToken The token being provided by the taker.\\n    ///        If `0xeee...`, ETH is implied and should be provided with the call.`\\n    /// @param outputToken The token to be acquired by the taker.\\n    ///        `0xeee...` implies ETH.\\n    /// @param inputTokenAmount The amount of `inputToken` to take from the taker.\\n    /// @param outputTokenAmount The amount of `outputToken` received by the taker.\\n    event TransformedERC20(\\n        address indexed taker,\\n        address inputToken,\\n        address outputToken,\\n        uint256 inputTokenAmount,\\n        uint256 outputTokenAmount\\n    );\\n\\n    /// @dev Raised when `setTransformerDeployer()` is called.\\n    /// @param transformerDeployer The new deployer address.\\n    event TransformerDeployerUpdated(address transformerDeployer);\\n\\n    /// @dev Raised when `setQuoteSigner()` is called.\\n    /// @param quoteSigner The new quote signer.\\n    event QuoteSignerUpdated(address quoteSigner);\\n\\n    /// @dev Replace the allowed deployer for transformers.\\n    ///      Only callable by the owner.\\n    /// @param transformerDeployer The address of the new trusted deployer\\n    ///        for transformers.\\n    function setTransformerDeployer(address transformerDeployer)\\n        external;\\n\\n    /// @dev Replace the optional signer for `transformERC20()` calldata.\\n    ///      Only callable by the owner.\\n    /// @param quoteSigner The address of the new calldata signer.\\n    function setQuoteSigner(address quoteSigner)\\n        external;\\n\\n    /// @dev Deploy a new flash wallet instance and replace the current one with it.\\n    ///      Useful if we somehow break the current wallet instance.\\n    ///       Only callable by the owner.\\n    /// @return wallet The new wallet instance.\\n    function createTransformWallet()\\n        external\\n        returns (IFlashWallet wallet);\\n\\n    /// @dev Executes a series of transformations to convert an ERC20 `inputToken`\\n    ///      to an ERC20 `outputToken`.\\n    /// @param inputToken The token being provided by the sender.\\n    ///        If `0xeee...`, ETH is implied and should be provided with the call.`\\n    /// @param outputToken The token to be acquired by the sender.\\n    ///        `0xeee...` implies ETH.\\n    /// @param inputTokenAmount The amount of `inputToken` to take from the sender.\\n    /// @param minOutputTokenAmount The minimum amount of `outputToken` the sender\\n    ///        must receive for the entire transformation to succeed.\\n    /// @param transformations The transformations to execute on the token balance(s)\\n    ///        in sequence.\\n    /// @return outputTokenAmount The amount of `outputToken` received by the sender.\\n    function transformERC20(\\n        IERC20TokenV06 inputToken,\\n        IERC20TokenV06 outputToken,\\n        uint256 inputTokenAmount,\\n        uint256 minOutputTokenAmount,\\n        Transformation[] calldata transformations\\n    )\\n        external\\n        payable\\n        returns (uint256 outputTokenAmount);\\n\\n    /// @dev Internal version of `transformERC20()`. Only callable from within.\\n    /// @param args A `TransformERC20Args` struct.\\n    /// @return outputTokenAmount The amount of `outputToken` received by the taker.\\n    function _transformERC20(TransformERC20Args calldata args)\\n        external\\n        payable\\n        returns (uint256 outputTokenAmount);\\n\\n    /// @dev Return the current wallet instance that will serve as the execution\\n    ///      context for transformations.\\n    /// @return wallet The wallet instance.\\n    function getTransformWallet()\\n        external\\n        view\\n        returns (IFlashWallet wallet);\\n\\n    /// @dev Return the allowed deployer for transformers.\\n    /// @return deployer The transform deployer address.\\n    function getTransformerDeployer()\\n        external\\n        view\\n        returns (address deployer);\\n\\n    /// @dev Return the optional signer for `transformERC20()` calldata.\\n    /// @return signer The transform deployer address.\\n    function getQuoteSigner()\\n        external\\n        view\\n        returns (address signer);\\n}\\n\",\"keccak256\":\"0xe9f8ddf4c78830077160956a87530495bbbdd4abfd3a0f7902885fc93d06e2f3\",\"license\":\"Apache-2.0\"},\"src/zero-ex/features/libs/LibNativeOrder.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../../contracts-erc20/v06/IERC20TokenV06.sol\\\";\\nimport \\\"../../../contracts-utils/v06/errors/LibRichErrorsV06.sol\\\";\\nimport \\\"../../../contracts-utils/v06/LibSafeMathV06.sol\\\";\\nimport \\\"../../errors/LibNativeOrdersRichErrors.sol\\\";\\n\\n\\n/// @dev A library for common native order operations.\\nlibrary LibNativeOrder {\\n    using LibSafeMathV06 for uint256;\\n    using LibRichErrorsV06 for bytes;\\n\\n    enum OrderStatus {\\n        INVALID,\\n        FILLABLE,\\n        FILLED,\\n        CANCELLED,\\n        EXPIRED\\n    }\\n\\n    /// @dev A standard OTC or OO limit order.\\n    struct LimitOrder {\\n        IERC20TokenV06 makerToken;\\n        IERC20TokenV06 takerToken;\\n        uint128 makerAmount;\\n        uint128 takerAmount;\\n        uint128 takerTokenFeeAmount;\\n        address maker;\\n        address taker;\\n        address sender;\\n        address feeRecipient;\\n        bytes32 pool;\\n        uint64 expiry;\\n        uint256 salt;\\n    }\\n\\n    /// @dev An RFQ limit order.\\n    struct RfqOrder {\\n        IERC20TokenV06 makerToken;\\n        IERC20TokenV06 takerToken;\\n        uint128 makerAmount;\\n        uint128 takerAmount;\\n        address maker;\\n        address taker;\\n        address txOrigin;\\n        bytes32 pool;\\n        uint64 expiry;\\n        uint256 salt;\\n    }\\n\\n    /// @dev An OTC limit order.\\n    struct OtcOrder {\\n        IERC20TokenV06 makerToken;\\n        IERC20TokenV06 takerToken;\\n        uint128 makerAmount;\\n        uint128 takerAmount;\\n        address maker;\\n        address taker;\\n        address txOrigin;\\n        uint256 expiryAndNonce; // [uint64 expiry, uint64 nonceBucket, uint128 nonce]\\n    }\\n\\n    /// @dev Info on a limit or RFQ order.\\n    struct OrderInfo {\\n        bytes32 orderHash;\\n        OrderStatus status;\\n        uint128 takerTokenFilledAmount;\\n    }\\n\\n    /// @dev Info on an OTC order.\\n    struct OtcOrderInfo {\\n        bytes32 orderHash;\\n        OrderStatus status;\\n    }\\n\\n    uint256 private constant UINT_128_MASK = (1 << 128) - 1;\\n    uint256 private constant UINT_64_MASK = (1 << 64) - 1;\\n    uint256 private constant ADDRESS_MASK = (1 << 160) - 1;\\n\\n    // The type hash for limit orders, which is:\\n    // keccak256(abi.encodePacked(\\n    //     \\\"LimitOrder(\\\",\\n    //       \\\"address makerToken,\\\",\\n    //       \\\"address takerToken,\\\",\\n    //       \\\"uint128 makerAmount,\\\",\\n    //       \\\"uint128 takerAmount,\\\",\\n    //       \\\"uint128 takerTokenFeeAmount,\\\",\\n    //       \\\"address maker,\\\",\\n    //       \\\"address taker,\\\",\\n    //       \\\"address sender,\\\",\\n    //       \\\"address feeRecipient,\\\",\\n    //       \\\"bytes32 pool,\\\",\\n    //       \\\"uint64 expiry,\\\",\\n    //       \\\"uint256 salt\\\"\\n    //     \\\")\\\"\\n    // ))\\n    uint256 private constant _LIMIT_ORDER_TYPEHASH =\\n        0xce918627cb55462ddbb85e73de69a8b322f2bc88f4507c52fcad6d4c33c29d49;\\n\\n    // The type hash for RFQ orders, which is:\\n    // keccak256(abi.encodePacked(\\n    //     \\\"RfqOrder(\\\",\\n    //       \\\"address makerToken,\\\",\\n    //       \\\"address takerToken,\\\",\\n    //       \\\"uint128 makerAmount,\\\",\\n    //       \\\"uint128 takerAmount,\\\",\\n    //       \\\"address maker,\\\",\\n    //       \\\"address taker,\\\",\\n    //       \\\"address txOrigin,\\\",\\n    //       \\\"bytes32 pool,\\\",\\n    //       \\\"uint64 expiry,\\\",\\n    //       \\\"uint256 salt\\\"\\n    //     \\\")\\\"\\n    // ))\\n    uint256 private constant _RFQ_ORDER_TYPEHASH =\\n        0xe593d3fdfa8b60e5e17a1b2204662ecbe15c23f2084b9ad5bae40359540a7da9;\\n\\n    // The type hash for OTC orders, which is:\\n    // keccak256(abi.encodePacked(\\n    //     \\\"OtcOrder(\\\",\\n    //       \\\"address makerToken,\\\",\\n    //       \\\"address takerToken,\\\",\\n    //       \\\"uint128 makerAmount,\\\",\\n    //       \\\"uint128 takerAmount,\\\",\\n    //       \\\"address maker,\\\",\\n    //       \\\"address taker,\\\",\\n    //       \\\"address txOrigin,\\\",\\n    //       \\\"uint256 expiryAndNonce\\\"\\n    //     \\\")\\\"\\n    // ))\\n    uint256 private constant _OTC_ORDER_TYPEHASH =\\n        0x2f754524de756ae72459efbe1ec88c19a745639821de528ac3fb88f9e65e35c8;\\n\\n    /// @dev Get the struct hash of a limit order.\\n    /// @param order The limit order.\\n    /// @return structHash The struct hash of the order.\\n    function getLimitOrderStructHash(LimitOrder memory order)\\n        internal\\n        pure\\n        returns (bytes32 structHash)\\n    {\\n        // The struct hash is:\\n        // keccak256(abi.encode(\\n        //   TYPE_HASH,\\n        //   order.makerToken,\\n        //   order.takerToken,\\n        //   order.makerAmount,\\n        //   order.takerAmount,\\n        //   order.takerTokenFeeAmount,\\n        //   order.maker,\\n        //   order.taker,\\n        //   order.sender,\\n        //   order.feeRecipient,\\n        //   order.pool,\\n        //   order.expiry,\\n        //   order.salt,\\n        // ))\\n        assembly {\\n            let mem := mload(0x40)\\n            mstore(mem, _LIMIT_ORDER_TYPEHASH)\\n            // order.makerToken;\\n            mstore(add(mem, 0x20), and(ADDRESS_MASK, mload(order)))\\n            // order.takerToken;\\n            mstore(add(mem, 0x40), and(ADDRESS_MASK, mload(add(order, 0x20))))\\n            // order.makerAmount;\\n            mstore(add(mem, 0x60), and(UINT_128_MASK, mload(add(order, 0x40))))\\n            // order.takerAmount;\\n            mstore(add(mem, 0x80), and(UINT_128_MASK, mload(add(order, 0x60))))\\n            // order.takerTokenFeeAmount;\\n            mstore(add(mem, 0xA0), and(UINT_128_MASK, mload(add(order, 0x80))))\\n            // order.maker;\\n            mstore(add(mem, 0xC0), and(ADDRESS_MASK, mload(add(order, 0xA0))))\\n            // order.taker;\\n            mstore(add(mem, 0xE0), and(ADDRESS_MASK, mload(add(order, 0xC0))))\\n            // order.sender;\\n            mstore(add(mem, 0x100), and(ADDRESS_MASK, mload(add(order, 0xE0))))\\n            // order.feeRecipient;\\n            mstore(add(mem, 0x120), and(ADDRESS_MASK, mload(add(order, 0x100))))\\n            // order.pool;\\n            mstore(add(mem, 0x140), mload(add(order, 0x120)))\\n            // order.expiry;\\n            mstore(add(mem, 0x160), and(UINT_64_MASK, mload(add(order, 0x140))))\\n            // order.salt;\\n            mstore(add(mem, 0x180), mload(add(order, 0x160)))\\n            structHash := keccak256(mem, 0x1A0)\\n        }\\n    }\\n\\n    /// @dev Get the struct hash of a RFQ order.\\n    /// @param order The RFQ order.\\n    /// @return structHash The struct hash of the order.\\n    function getRfqOrderStructHash(RfqOrder memory order)\\n        internal\\n        pure\\n        returns (bytes32 structHash)\\n    {\\n        // The struct hash is:\\n        // keccak256(abi.encode(\\n        //   TYPE_HASH,\\n        //   order.makerToken,\\n        //   order.takerToken,\\n        //   order.makerAmount,\\n        //   order.takerAmount,\\n        //   order.maker,\\n        //   order.taker,\\n        //   order.txOrigin,\\n        //   order.pool,\\n        //   order.expiry,\\n        //   order.salt,\\n        // ))\\n        assembly {\\n            let mem := mload(0x40)\\n            mstore(mem, _RFQ_ORDER_TYPEHASH)\\n            // order.makerToken;\\n            mstore(add(mem, 0x20), and(ADDRESS_MASK, mload(order)))\\n            // order.takerToken;\\n            mstore(add(mem, 0x40), and(ADDRESS_MASK, mload(add(order, 0x20))))\\n            // order.makerAmount;\\n            mstore(add(mem, 0x60), and(UINT_128_MASK, mload(add(order, 0x40))))\\n            // order.takerAmount;\\n            mstore(add(mem, 0x80), and(UINT_128_MASK, mload(add(order, 0x60))))\\n            // order.maker;\\n            mstore(add(mem, 0xA0), and(ADDRESS_MASK, mload(add(order, 0x80))))\\n            // order.taker;\\n            mstore(add(mem, 0xC0), and(ADDRESS_MASK, mload(add(order, 0xA0))))\\n            // order.txOrigin;\\n            mstore(add(mem, 0xE0), and(ADDRESS_MASK, mload(add(order, 0xC0))))\\n            // order.pool;\\n            mstore(add(mem, 0x100), mload(add(order, 0xE0)))\\n            // order.expiry;\\n            mstore(add(mem, 0x120), and(UINT_64_MASK, mload(add(order, 0x100))))\\n            // order.salt;\\n            mstore(add(mem, 0x140), mload(add(order, 0x120)))\\n            structHash := keccak256(mem, 0x160)\\n        }\\n    }\\n\\n    /// @dev Get the struct hash of an OTC order.\\n    /// @param order The OTC order.\\n    /// @return structHash The struct hash of the order.\\n    function getOtcOrderStructHash(OtcOrder memory order)\\n        internal\\n        pure\\n        returns (bytes32 structHash)\\n    {\\n        // The struct hash is:\\n        // keccak256(abi.encode(\\n        //   TYPE_HASH,\\n        //   order.makerToken,\\n        //   order.takerToken,\\n        //   order.makerAmount,\\n        //   order.takerAmount,\\n        //   order.maker,\\n        //   order.taker,\\n        //   order.txOrigin,\\n        //   order.expiryAndNonce,\\n        // ))\\n        assembly {\\n            let mem := mload(0x40)\\n            mstore(mem, _OTC_ORDER_TYPEHASH)\\n            // order.makerToken;\\n            mstore(add(mem, 0x20), and(ADDRESS_MASK, mload(order)))\\n            // order.takerToken;\\n            mstore(add(mem, 0x40), and(ADDRESS_MASK, mload(add(order, 0x20))))\\n            // order.makerAmount;\\n            mstore(add(mem, 0x60), and(UINT_128_MASK, mload(add(order, 0x40))))\\n            // order.takerAmount;\\n            mstore(add(mem, 0x80), and(UINT_128_MASK, mload(add(order, 0x60))))\\n            // order.maker;\\n            mstore(add(mem, 0xA0), and(ADDRESS_MASK, mload(add(order, 0x80))))\\n            // order.taker;\\n            mstore(add(mem, 0xC0), and(ADDRESS_MASK, mload(add(order, 0xA0))))\\n            // order.txOrigin;\\n            mstore(add(mem, 0xE0), and(ADDRESS_MASK, mload(add(order, 0xC0))))\\n            // order.expiryAndNonce;\\n            mstore(add(mem, 0x100), mload(add(order, 0xE0)))\\n            structHash := keccak256(mem, 0x120)\\n        }\\n    }\\n\\n    /// @dev Refund any leftover protocol fees in `msg.value` to `msg.sender`.\\n    /// @param ethProtocolFeePaid How much ETH was paid in protocol fees.\\n    function refundExcessProtocolFeeToSender(uint256 ethProtocolFeePaid)\\n        internal\\n    {\\n        if (msg.value > ethProtocolFeePaid && msg.sender != address(this)) {\\n            uint256 refundAmount = msg.value.safeSub(ethProtocolFeePaid);\\n            (bool success,) = msg\\n                .sender\\n                .call{value: refundAmount}(\\\"\\\");\\n            if (!success) {\\n                LibNativeOrdersRichErrors.ProtocolFeeRefundFailed(\\n                    msg.sender,\\n                    refundAmount\\n                ).rrevert();\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xea904ff56831e55dc145f7d6aab68e61238a78642923f9f86b47b509f94cdfa3\",\"license\":\"Apache-2.0\"},\"src/zero-ex/features/libs/LibSignature.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../../contracts-utils/v06/errors/LibRichErrorsV06.sol\\\";\\nimport \\\"../../errors/LibSignatureRichErrors.sol\\\";\\n\\n\\n/// @dev A library for validating signatures.\\nlibrary LibSignature {\\n    using LibRichErrorsV06 for bytes;\\n\\n    // '\\\\x19Ethereum Signed Message:\\\\n32\\\\x00\\\\x00\\\\x00\\\\x00' in a word.\\n    uint256 private constant ETH_SIGN_HASH_PREFIX =\\n        0x19457468657265756d205369676e6564204d6573736167653a0a333200000000;\\n    /// @dev Exclusive upper limit on ECDSA signatures 'R' values.\\n    ///      The valid range is given by fig (282) of the yellow paper.\\n    uint256 private constant ECDSA_SIGNATURE_R_LIMIT =\\n        uint256(0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141);\\n    /// @dev Exclusive upper limit on ECDSA signatures 'S' values.\\n    ///      The valid range is given by fig (283) of the yellow paper.\\n    uint256 private constant ECDSA_SIGNATURE_S_LIMIT = ECDSA_SIGNATURE_R_LIMIT / 2 + 1;\\n\\n    /// @dev Allowed signature types.\\n    enum SignatureType {\\n        ILLEGAL,\\n        INVALID,\\n        EIP712,\\n        ETHSIGN,\\n        PRESIGNED\\n    }\\n\\n    /// @dev Encoded EC signature.\\n    struct Signature {\\n        // How to validate the signature.\\n        SignatureType signatureType;\\n        // EC Signature data.\\n        uint8 v;\\n        // EC Signature data.\\n        bytes32 r;\\n        // EC Signature data.\\n        bytes32 s;\\n    }\\n\\n    /// @dev Retrieve the signer of a signature.\\n    ///      Throws if the signature can't be validated.\\n    /// @param hash The hash that was signed.\\n    /// @param signature The signature.\\n    /// @return recovered The recovered signer address.\\n    function getSignerOfHash(\\n        bytes32 hash,\\n        Signature memory signature\\n    )\\n        internal\\n        pure\\n        returns (address recovered)\\n    {\\n        // Ensure this is a signature type that can be validated against a hash.\\n        _validateHashCompatibleSignature(hash, signature);\\n\\n        if (signature.signatureType == SignatureType.EIP712) {\\n            // Signed using EIP712\\n            recovered = ecrecover(\\n                hash,\\n                signature.v,\\n                signature.r,\\n                signature.s\\n            );\\n        } else if (signature.signatureType == SignatureType.ETHSIGN) {\\n            // Signed using `eth_sign`\\n            // Need to hash `hash` with \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\" prefix\\n            // in packed encoding.\\n            bytes32 ethSignHash;\\n            assembly {\\n                // Use scratch space\\n                mstore(0, ETH_SIGN_HASH_PREFIX) // length of 28 bytes\\n                mstore(28, hash) // length of 32 bytes\\n                ethSignHash := keccak256(0, 60)\\n            }\\n            recovered = ecrecover(\\n                ethSignHash,\\n                signature.v,\\n                signature.r,\\n                signature.s\\n            );\\n        }\\n        // `recovered` can be null if the signature values are out of range.\\n        if (recovered == address(0)) {\\n            LibSignatureRichErrors.SignatureValidationError(\\n                LibSignatureRichErrors.SignatureValidationErrorCodes.BAD_SIGNATURE_DATA,\\n                hash\\n            ).rrevert();\\n        }\\n    }\\n\\n    /// @dev Validates that a signature is compatible with a hash signee.\\n    /// @param hash The hash that was signed.\\n    /// @param signature The signature.\\n    function _validateHashCompatibleSignature(\\n        bytes32 hash,\\n        Signature memory signature\\n    )\\n        private\\n        pure\\n    {\\n        // Ensure the r and s are within malleability limits.\\n        if (uint256(signature.r) >= ECDSA_SIGNATURE_R_LIMIT ||\\n            uint256(signature.s) >= ECDSA_SIGNATURE_S_LIMIT)\\n        {\\n            LibSignatureRichErrors.SignatureValidationError(\\n                LibSignatureRichErrors.SignatureValidationErrorCodes.BAD_SIGNATURE_DATA,\\n                hash\\n            ).rrevert();\\n        }\\n\\n        // Always illegal signature.\\n        if (signature.signatureType == SignatureType.ILLEGAL) {\\n            LibSignatureRichErrors.SignatureValidationError(\\n                LibSignatureRichErrors.SignatureValidationErrorCodes.ILLEGAL,\\n                hash\\n            ).rrevert();\\n        }\\n\\n        // Always invalid.\\n        if (signature.signatureType == SignatureType.INVALID) {\\n            LibSignatureRichErrors.SignatureValidationError(\\n                LibSignatureRichErrors.SignatureValidationErrorCodes.ALWAYS_INVALID,\\n                hash\\n            ).rrevert();\\n        }\\n\\n        // If a feature supports pre-signing, it wouldn't use \\n        // `getSignerOfHash` on a pre-signed order.\\n        if (signature.signatureType == SignatureType.PRESIGNED) {\\n            LibSignatureRichErrors.SignatureValidationError(\\n                LibSignatureRichErrors.SignatureValidationErrorCodes.UNSUPPORTED,\\n                hash\\n            ).rrevert();\\n        }\\n\\n        // Solidity should check that the signature type is within enum range for us\\n        // when abi-decoding.\\n    }\\n}\\n\",\"keccak256\":\"0xe7a20ddd3288eb8a1f90a3648bef7cba0d68d9035bd4b2e2af22c57bfca2f3db\",\"license\":\"Apache-2.0\"},\"src/zero-ex/features/native_orders/NativeOrdersCancellation.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2021 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../../contracts-erc20/v06/IERC20TokenV06.sol\\\";\\nimport \\\"../../../contracts-utils/v06/errors/LibRichErrorsV06.sol\\\";\\nimport \\\"../../errors/LibNativeOrdersRichErrors.sol\\\";\\nimport \\\"../../storage/LibNativeOrdersStorage.sol\\\";\\nimport \\\"../interfaces/INativeOrdersEvents.sol\\\";\\nimport \\\"../libs/LibSignature.sol\\\";\\nimport \\\"../libs/LibNativeOrder.sol\\\";\\nimport \\\"./NativeOrdersInfo.sol\\\";\\n\\n/// @dev Feature for cancelling limit and RFQ orders.\\nabstract contract NativeOrdersCancellation is\\n    INativeOrdersEvents,\\n    NativeOrdersInfo\\n{\\n    using LibRichErrorsV06 for bytes;\\n\\n    /// @dev Highest bit of a uint256, used to flag cancelled orders.\\n    uint256 private constant HIGH_BIT = 1 << 255;\\n\\n    constructor(\\n        address zeroExAddress\\n    )\\n        internal\\n        NativeOrdersInfo(zeroExAddress)\\n    {\\n        // solhint-disable no-empty-blocks\\n    }\\n\\n    /// @dev Cancel a single limit order. The caller must be the maker or a valid order signer.\\n    ///      Silently succeeds if the order has already been cancelled.\\n    /// @param order The limit order.\\n    function cancelLimitOrder(LibNativeOrder.LimitOrder memory order)\\n        public\\n    {\\n        bytes32 orderHash = getLimitOrderHash(order);\\n        if (msg.sender != order.maker && !isValidOrderSigner(order.maker, msg.sender)) {\\n            LibNativeOrdersRichErrors.OnlyOrderMakerAllowed(\\n                orderHash,\\n                msg.sender,\\n                order.maker\\n            ).rrevert();\\n        }\\n        _cancelOrderHash(orderHash, order.maker);\\n    }\\n\\n    /// @dev Cancel a single RFQ order. The caller must be the maker or a valid order signer.\\n    ///      Silently succeeds if the order has already been cancelled.\\n    /// @param order The RFQ order.\\n    function cancelRfqOrder(LibNativeOrder.RfqOrder memory order)\\n        public\\n    {\\n        bytes32 orderHash = getRfqOrderHash(order);\\n        if (msg.sender != order.maker && !isValidOrderSigner(order.maker, msg.sender)) {\\n            LibNativeOrdersRichErrors.OnlyOrderMakerAllowed(\\n                orderHash,\\n                msg.sender,\\n                order.maker\\n            ).rrevert();\\n        }\\n        _cancelOrderHash(orderHash, order.maker);\\n    }\\n\\n    /// @dev Cancel multiple limit orders. The caller must be the maker or a valid order signer.\\n    ///      Silently succeeds if the order has already been cancelled.\\n    /// @param orders The limit orders.\\n    function batchCancelLimitOrders(LibNativeOrder.LimitOrder[] memory orders)\\n        public\\n    {\\n        for (uint256 i = 0; i < orders.length; ++i) {\\n            cancelLimitOrder(orders[i]);\\n        }\\n    }\\n\\n    /// @dev Cancel multiple RFQ orders. The caller must be the maker or a valid order signer.\\n    ///      Silently succeeds if the order has already been cancelled.\\n    /// @param orders The RFQ orders.\\n    function batchCancelRfqOrders(LibNativeOrder.RfqOrder[] memory orders)\\n        public\\n    {\\n        for (uint256 i = 0; i < orders.length; ++i) {\\n            cancelRfqOrder(orders[i]);\\n        }\\n    }\\n\\n    /// @dev Cancel all limit orders for a given maker and pair with a salt less\\n    ///      than the value provided. The caller must be the maker. Subsequent\\n    ///      calls to this function with the same caller and pair require the\\n    ///      new salt to be >= the old salt.\\n    /// @param makerToken The maker token.\\n    /// @param takerToken The taker token.\\n    /// @param minValidSalt The new minimum valid salt.\\n    function cancelPairLimitOrders(\\n        IERC20TokenV06 makerToken,\\n        IERC20TokenV06 takerToken,\\n        uint256 minValidSalt\\n    )\\n        public\\n    {\\n        _cancelPairLimitOrders(msg.sender, makerToken, takerToken, minValidSalt);\\n    }\\n\\n    /// @dev Cancel all limit orders for a given maker and pair with a salt less\\n    ///      than the value provided. The caller must be a signer registered to the maker.\\n    ///      Subsequent calls to this function with the same caller and pair require the\\n    ///      new salt to be >= the old salt.\\n    /// @param maker the maker for whom the msg.sender is the signer.\\n    /// @param makerToken The maker token.\\n    /// @param takerToken The taker token.\\n    /// @param minValidSalt The new minimum valid salt.\\n    function cancelPairLimitOrdersWithSigner(\\n        address maker,\\n        IERC20TokenV06 makerToken,\\n        IERC20TokenV06 takerToken,\\n        uint256 minValidSalt\\n    )\\n        public\\n    {\\n        // verify that the signer is authorized for the maker\\n        if (!isValidOrderSigner(maker, msg.sender)) {\\n            LibNativeOrdersRichErrors.InvalidSignerError(\\n                maker,\\n                msg.sender\\n            ).rrevert();\\n        }\\n\\n        _cancelPairLimitOrders(maker, makerToken, takerToken, minValidSalt);\\n    }\\n\\n    /// @dev Cancel all limit orders for a given maker and pair with a salt less\\n    ///      than the value provided. The caller must be the maker. Subsequent\\n    ///      calls to this function with the same caller and pair require the\\n    ///      new salt to be >= the old salt.\\n    /// @param makerTokens The maker tokens.\\n    /// @param takerTokens The taker tokens.\\n    /// @param minValidSalts The new minimum valid salts.\\n    function batchCancelPairLimitOrders(\\n        IERC20TokenV06[] memory makerTokens,\\n        IERC20TokenV06[] memory takerTokens,\\n        uint256[] memory minValidSalts\\n    )\\n        public\\n    {\\n        require(\\n            makerTokens.length == takerTokens.length &&\\n            makerTokens.length == minValidSalts.length,\\n            \\\"NativeOrdersFeature/MISMATCHED_PAIR_ORDERS_ARRAY_LENGTHS\\\"\\n        );\\n\\n        for (uint256 i = 0; i < makerTokens.length; ++i) {\\n            _cancelPairLimitOrders(\\n                msg.sender,\\n                makerTokens[i],\\n                takerTokens[i],\\n                minValidSalts[i]\\n            );\\n        }\\n    }\\n\\n    /// @dev Cancel all limit orders for a given maker and pair with a salt less\\n    ///      than the value provided. The caller must be a signer registered to the maker.\\n    ///      Subsequent calls to this function with the same caller and pair require the\\n    ///      new salt to be >= the old salt.\\n    /// @param maker the maker for whom the msg.sender is the signer.\\n    /// @param makerTokens The maker tokens.\\n    /// @param takerTokens The taker tokens.\\n    /// @param minValidSalts The new minimum valid salts.\\n    function batchCancelPairLimitOrdersWithSigner(\\n        address maker,\\n        IERC20TokenV06[] memory makerTokens,\\n        IERC20TokenV06[] memory takerTokens,\\n        uint256[] memory minValidSalts\\n    )\\n        public\\n    {\\n        require(\\n            makerTokens.length == takerTokens.length &&\\n            makerTokens.length == minValidSalts.length,\\n            \\\"NativeOrdersFeature/MISMATCHED_PAIR_ORDERS_ARRAY_LENGTHS\\\"\\n        );\\n\\n        if (!isValidOrderSigner(maker, msg.sender)) {\\n            LibNativeOrdersRichErrors.InvalidSignerError(\\n                maker,\\n                msg.sender\\n            ).rrevert();\\n        }\\n\\n        for (uint256 i = 0; i < makerTokens.length; ++i) {\\n            _cancelPairLimitOrders(\\n                maker,\\n                makerTokens[i],\\n                takerTokens[i],\\n                minValidSalts[i]\\n            );\\n        }\\n    }\\n\\n    /// @dev Cancel all RFQ orders for a given maker and pair with a salt less\\n    ///      than the value provided. The caller must be the maker. Subsequent\\n    ///      calls to this function with the same caller and pair require the\\n    ///      new salt to be >= the old salt.\\n    /// @param makerToken The maker token.\\n    /// @param takerToken The taker token.\\n    /// @param minValidSalt The new minimum valid salt.\\n    function cancelPairRfqOrders(\\n        IERC20TokenV06 makerToken,\\n        IERC20TokenV06 takerToken,\\n        uint256 minValidSalt\\n    )\\n        public\\n    {\\n        _cancelPairRfqOrders(msg.sender, makerToken, takerToken, minValidSalt);\\n    }\\n\\n    /// @dev Cancel all RFQ orders for a given maker and pair with a salt less\\n    ///      than the value provided. The caller must be a signer registered to the maker.\\n    ///      Subsequent calls to this function with the same caller and pair require the\\n    ///      new salt to be >= the old salt.\\n    /// @param maker the maker for whom the msg.sender is the signer.\\n    /// @param makerToken The maker token.\\n    /// @param takerToken The taker token.\\n    /// @param minValidSalt The new minimum valid salt.\\n    function cancelPairRfqOrdersWithSigner(\\n        address maker,\\n        IERC20TokenV06 makerToken,\\n        IERC20TokenV06 takerToken,\\n        uint256 minValidSalt\\n    )\\n        public\\n    {\\n        if (!isValidOrderSigner(maker, msg.sender)) {\\n            LibNativeOrdersRichErrors.InvalidSignerError(\\n                maker,\\n                msg.sender\\n            ).rrevert();\\n        }\\n\\n        _cancelPairRfqOrders(maker, makerToken, takerToken, minValidSalt);\\n    }\\n\\n    /// @dev Cancel all RFQ orders for a given maker and pair with a salt less\\n    ///      than the value provided. The caller must be the maker. Subsequent\\n    ///      calls to this function with the same caller and pair require the\\n    ///      new salt to be >= the old salt.\\n    /// @param makerTokens The maker tokens.\\n    /// @param takerTokens The taker tokens.\\n    /// @param minValidSalts The new minimum valid salts.\\n    function batchCancelPairRfqOrders(\\n        IERC20TokenV06[] memory makerTokens,\\n        IERC20TokenV06[] memory takerTokens,\\n        uint256[] memory minValidSalts\\n    )\\n        public\\n    {\\n        require(\\n            makerTokens.length == takerTokens.length &&\\n            makerTokens.length == minValidSalts.length,\\n            \\\"NativeOrdersFeature/MISMATCHED_PAIR_ORDERS_ARRAY_LENGTHS\\\"\\n        );\\n\\n        for (uint256 i = 0; i < makerTokens.length; ++i) {\\n            _cancelPairRfqOrders(\\n                msg.sender,\\n                makerTokens[i],\\n                takerTokens[i],\\n                minValidSalts[i]\\n            );\\n        }\\n    }\\n\\n    /// @dev Cancel all RFQ orders for a given maker and pairs with salts less\\n    ///      than the values provided. The caller must be a signer registered to the maker.\\n    ///      Subsequent calls to this function with the same caller and pair require the\\n    ///      new salt to be >= the old salt.\\n    /// @param maker the maker for whom the msg.sender is the signer.\\n    /// @param makerTokens The maker tokens.\\n    /// @param takerTokens The taker tokens.\\n    /// @param minValidSalts The new minimum valid salts.\\n    function batchCancelPairRfqOrdersWithSigner(\\n        address maker,\\n        IERC20TokenV06[] memory makerTokens,\\n        IERC20TokenV06[] memory takerTokens,\\n        uint256[] memory minValidSalts\\n    )\\n        public\\n    {\\n        require(\\n            makerTokens.length == takerTokens.length &&\\n            makerTokens.length == minValidSalts.length,\\n            \\\"NativeOrdersFeature/MISMATCHED_PAIR_ORDERS_ARRAY_LENGTHS\\\"\\n        );\\n\\n        if (!isValidOrderSigner(maker, msg.sender)) {\\n            LibNativeOrdersRichErrors.InvalidSignerError(\\n                maker,\\n                msg.sender\\n            ).rrevert();\\n        }\\n\\n        for (uint256 i = 0; i < makerTokens.length; ++i) {\\n            _cancelPairRfqOrders(\\n                maker,\\n                makerTokens[i],\\n                takerTokens[i],\\n                minValidSalts[i]\\n            );\\n        }\\n    }\\n\\n    /// @dev Cancel a limit or RFQ order directly by its order hash.\\n    /// @param orderHash The order's order hash.\\n    /// @param maker The order's maker.\\n    function _cancelOrderHash(bytes32 orderHash, address maker)\\n        private\\n    {\\n        LibNativeOrdersStorage.Storage storage stor =\\n            LibNativeOrdersStorage.getStorage();\\n        // Set the high bit on the raw taker token fill amount to indicate\\n        // a cancel. It's OK to cancel twice.\\n        stor.orderHashToTakerTokenFilledAmount[orderHash] |= HIGH_BIT;\\n\\n        emit OrderCancelled(orderHash, maker);\\n    }\\n\\n    /// @dev Cancel all RFQ orders for a given maker and pair with a salt less\\n    ///      than the value provided.\\n    /// @param maker The target maker address\\n    /// @param makerToken The maker token.\\n    /// @param takerToken The taker token.\\n    /// @param minValidSalt The new minimum valid salt.\\n    function _cancelPairRfqOrders(\\n        address maker,\\n        IERC20TokenV06 makerToken,\\n        IERC20TokenV06 takerToken,\\n        uint256 minValidSalt\\n    )\\n        private\\n    {\\n        LibNativeOrdersStorage.Storage storage stor =\\n            LibNativeOrdersStorage.getStorage();\\n\\n        uint256 oldMinValidSalt =\\n            stor.rfqOrdersMakerToMakerTokenToTakerTokenToMinValidOrderSalt\\n                [maker]\\n                [address(makerToken)]\\n                [address(takerToken)];\\n\\n        // New min salt must >= the old one.\\n        if (oldMinValidSalt > minValidSalt) {\\n            LibNativeOrdersRichErrors.\\n                CancelSaltTooLowError(minValidSalt, oldMinValidSalt)\\n                    .rrevert();\\n        }\\n\\n        stor.rfqOrdersMakerToMakerTokenToTakerTokenToMinValidOrderSalt\\n            [maker]\\n            [address(makerToken)]\\n            [address(takerToken)] = minValidSalt;\\n\\n        emit PairCancelledRfqOrders(\\n            maker,\\n            address(makerToken),\\n            address(takerToken),\\n            minValidSalt\\n        );\\n    }\\n\\n    /// @dev Cancel all limit orders for a given maker and pair with a salt less\\n    ///      than the value provided.\\n    /// @param maker The target maker address\\n    /// @param makerToken The maker token.\\n    /// @param takerToken The taker token.\\n    /// @param minValidSalt The new minimum valid salt.\\n    function _cancelPairLimitOrders(\\n        address maker,\\n        IERC20TokenV06 makerToken,\\n        IERC20TokenV06 takerToken,\\n        uint256 minValidSalt\\n    )\\n        private\\n    {\\n        LibNativeOrdersStorage.Storage storage stor =\\n            LibNativeOrdersStorage.getStorage();\\n\\n        uint256 oldMinValidSalt =\\n            stor.limitOrdersMakerToMakerTokenToTakerTokenToMinValidOrderSalt\\n                [maker]\\n                [address(makerToken)]\\n                [address(takerToken)];\\n\\n        // New min salt must >= the old one.\\n        if (oldMinValidSalt > minValidSalt) {\\n            LibNativeOrdersRichErrors.\\n                CancelSaltTooLowError(minValidSalt, oldMinValidSalt)\\n                    .rrevert();\\n        }\\n\\n        stor.limitOrdersMakerToMakerTokenToTakerTokenToMinValidOrderSalt\\n            [maker]\\n            [address(makerToken)]\\n            [address(takerToken)] = minValidSalt;\\n\\n        emit PairCancelledLimitOrders(\\n            maker,\\n            address(makerToken),\\n            address(takerToken),\\n            minValidSalt\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xe66ec0d9c2a6b36e66b61a8fea0ea1cff9fb10e4cc8918e2b7fa956128cfbf61\",\"license\":\"Apache-2.0\"},\"src/zero-ex/features/native_orders/NativeOrdersInfo.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2021 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../../contracts-erc20/v06/IERC20TokenV06.sol\\\";\\nimport \\\"../../../contracts-utils/v06/LibSafeMathV06.sol\\\";\\nimport \\\"../../../contracts-utils/v06/LibMathV06.sol\\\";\\nimport \\\"../../fixins/FixinEIP712.sol\\\";\\nimport \\\"../../fixins/FixinTokenSpender.sol\\\";\\nimport \\\"../../storage/LibNativeOrdersStorage.sol\\\";\\nimport \\\"../libs/LibSignature.sol\\\";\\nimport \\\"../libs/LibNativeOrder.sol\\\";\\n\\n\\n/// @dev Feature for getting info about limit and RFQ orders.\\nabstract contract NativeOrdersInfo is\\n    FixinEIP712,\\n    FixinTokenSpender\\n{\\n    using LibSafeMathV06 for uint256;\\n    using LibRichErrorsV06 for bytes;\\n\\n    // @dev Params for `_getActualFillableTakerTokenAmount()`.\\n    struct GetActualFillableTakerTokenAmountParams {\\n        address maker;\\n        IERC20TokenV06 makerToken;\\n        uint128 orderMakerAmount;\\n        uint128 orderTakerAmount;\\n        LibNativeOrder.OrderInfo orderInfo;\\n    }\\n\\n    /// @dev Highest bit of a uint256, used to flag cancelled orders.\\n    uint256 private constant HIGH_BIT = 1 << 255;\\n\\n    constructor(\\n        address zeroExAddress\\n    )\\n        internal\\n        FixinEIP712(zeroExAddress)\\n    {\\n        // solhint-disable no-empty-blocks\\n    }\\n\\n    /// @dev Get the order info for a limit order.\\n    /// @param order The limit order.\\n    /// @return orderInfo Info about the order.\\n    function getLimitOrderInfo(LibNativeOrder.LimitOrder memory order)\\n        public\\n        view\\n        returns (LibNativeOrder.OrderInfo memory orderInfo)\\n    {\\n        // Recover maker and compute order hash.\\n        orderInfo.orderHash = getLimitOrderHash(order);\\n        uint256 minValidSalt = LibNativeOrdersStorage.getStorage()\\n            .limitOrdersMakerToMakerTokenToTakerTokenToMinValidOrderSalt\\n                [order.maker]\\n                [address(order.makerToken)]\\n                [address(order.takerToken)];\\n        _populateCommonOrderInfoFields(\\n            orderInfo,\\n            order.takerAmount,\\n            order.expiry,\\n            order.salt,\\n            minValidSalt\\n        );\\n    }\\n\\n    /// @dev Get the order info for an RFQ order.\\n    /// @param order The RFQ order.\\n    /// @return orderInfo Info about the order.\\n    function getRfqOrderInfo(LibNativeOrder.RfqOrder memory order)\\n        public\\n        view\\n        returns (LibNativeOrder.OrderInfo memory orderInfo)\\n    {\\n        // Recover maker and compute order hash.\\n        orderInfo.orderHash = getRfqOrderHash(order);\\n        uint256 minValidSalt = LibNativeOrdersStorage.getStorage()\\n            .rfqOrdersMakerToMakerTokenToTakerTokenToMinValidOrderSalt\\n                [order.maker]\\n                [address(order.makerToken)]\\n                [address(order.takerToken)];\\n        _populateCommonOrderInfoFields(\\n            orderInfo,\\n            order.takerAmount,\\n            order.expiry,\\n            order.salt,\\n            minValidSalt\\n        );\\n\\n        // Check for missing txOrigin.\\n        if (order.txOrigin == address(0)) {\\n            orderInfo.status = LibNativeOrder.OrderStatus.INVALID;\\n        }\\n    }\\n\\n    /// @dev Get the canonical hash of a limit order.\\n    /// @param order The limit order.\\n    /// @return orderHash The order hash.\\n    function getLimitOrderHash(LibNativeOrder.LimitOrder memory order)\\n        public\\n        view\\n        returns (bytes32 orderHash)\\n    {\\n        return _getEIP712Hash(\\n            LibNativeOrder.getLimitOrderStructHash(order)\\n        );\\n    }\\n\\n    /// @dev Get the canonical hash of an RFQ order.\\n    /// @param order The RFQ order.\\n    /// @return orderHash The order hash.\\n    function getRfqOrderHash(LibNativeOrder.RfqOrder memory order)\\n        public\\n        view\\n        returns (bytes32 orderHash)\\n    {\\n        return _getEIP712Hash(\\n            LibNativeOrder.getRfqOrderStructHash(order)\\n        );\\n    }\\n\\n    /// @dev Get order info, fillable amount, and signature validity for a limit order.\\n    ///      Fillable amount is determined using balances and allowances of the maker.\\n    /// @param order The limit order.\\n    /// @param signature The order signature.\\n    /// @return orderInfo Info about the order.\\n    /// @return actualFillableTakerTokenAmount How much of the order is fillable\\n    ///         based on maker funds, in taker tokens.\\n    /// @return isSignatureValid Whether the signature is valid.\\n    function getLimitOrderRelevantState(\\n        LibNativeOrder.LimitOrder memory order,\\n        LibSignature.Signature calldata signature\\n    )\\n        public\\n        view\\n        returns (\\n            LibNativeOrder.OrderInfo memory orderInfo,\\n            uint128 actualFillableTakerTokenAmount,\\n            bool isSignatureValid\\n        )\\n    {\\n        orderInfo = getLimitOrderInfo(order);\\n        actualFillableTakerTokenAmount = _getActualFillableTakerTokenAmount(\\n            GetActualFillableTakerTokenAmountParams({\\n                maker: order.maker,\\n                makerToken: order.makerToken,\\n                orderMakerAmount: order.makerAmount,\\n                orderTakerAmount: order.takerAmount,\\n                orderInfo: orderInfo\\n            })\\n        );\\n        address signerOfHash = LibSignature.getSignerOfHash(orderInfo.orderHash, signature);\\n        isSignatureValid =\\n            (order.maker == signerOfHash) ||\\n            isValidOrderSigner(order.maker, signerOfHash);\\n    }\\n\\n    /// @dev Get order info, fillable amount, and signature validity for an RFQ order.\\n    ///      Fillable amount is determined using balances and allowances of the maker.\\n    /// @param order The RFQ order.\\n    /// @param signature The order signature.\\n    /// @return orderInfo Info about the order.\\n    /// @return actualFillableTakerTokenAmount How much of the order is fillable\\n    ///         based on maker funds, in taker tokens.\\n    /// @return isSignatureValid Whether the signature is valid.\\n    function getRfqOrderRelevantState(\\n        LibNativeOrder.RfqOrder memory order,\\n        LibSignature.Signature memory signature\\n    )\\n        public\\n        view\\n        returns (\\n            LibNativeOrder.OrderInfo memory orderInfo,\\n            uint128 actualFillableTakerTokenAmount,\\n            bool isSignatureValid\\n        )\\n    {\\n        orderInfo = getRfqOrderInfo(order);\\n        actualFillableTakerTokenAmount = _getActualFillableTakerTokenAmount(\\n            GetActualFillableTakerTokenAmountParams({\\n                maker: order.maker,\\n                makerToken: order.makerToken,\\n                orderMakerAmount: order.makerAmount,\\n                orderTakerAmount: order.takerAmount,\\n                orderInfo: orderInfo\\n            })\\n        );\\n        address signerOfHash = LibSignature.getSignerOfHash(orderInfo.orderHash, signature);\\n        isSignatureValid =\\n            (order.maker == signerOfHash) ||\\n            isValidOrderSigner(order.maker, signerOfHash);\\n    }\\n\\n    /// @dev Batch version of `getLimitOrderRelevantState()`, without reverting.\\n    ///      Orders that would normally cause `getLimitOrderRelevantState()`\\n    ///      to revert will have empty results.\\n    /// @param orders The limit orders.\\n    /// @param signatures The order signatures.\\n    /// @return orderInfos Info about the orders.\\n    /// @return actualFillableTakerTokenAmounts How much of each order is fillable\\n    ///         based on maker funds, in taker tokens.\\n    /// @return isSignatureValids Whether each signature is valid for the order.\\n    function batchGetLimitOrderRelevantStates(\\n        LibNativeOrder.LimitOrder[] calldata orders,\\n        LibSignature.Signature[] calldata signatures\\n    )\\n        external\\n        view\\n        returns (\\n            LibNativeOrder.OrderInfo[] memory orderInfos,\\n            uint128[] memory actualFillableTakerTokenAmounts,\\n            bool[] memory isSignatureValids\\n        )\\n    {\\n        require(\\n            orders.length == signatures.length,\\n            \\\"NativeOrdersFeature/MISMATCHED_ARRAY_LENGTHS\\\"\\n        );\\n        orderInfos = new LibNativeOrder.OrderInfo[](orders.length);\\n        actualFillableTakerTokenAmounts = new uint128[](orders.length);\\n        isSignatureValids = new bool[](orders.length);\\n        for (uint256 i = 0; i < orders.length; ++i) {\\n            try\\n                this.getLimitOrderRelevantState(orders[i], signatures[i])\\n                    returns (\\n                        LibNativeOrder.OrderInfo memory orderInfo,\\n                        uint128 actualFillableTakerTokenAmount,\\n                        bool isSignatureValid\\n                    )\\n            {\\n                orderInfos[i] = orderInfo;\\n                actualFillableTakerTokenAmounts[i] = actualFillableTakerTokenAmount;\\n                isSignatureValids[i] = isSignatureValid;\\n            }\\n            catch {}\\n        }\\n    }\\n\\n    /// @dev Batch version of `getRfqOrderRelevantState()`, without reverting.\\n    ///      Orders that would normally cause `getRfqOrderRelevantState()`\\n    ///      to revert will have empty results.\\n    /// @param orders The RFQ orders.\\n    /// @param signatures The order signatures.\\n    /// @return orderInfos Info about the orders.\\n    /// @return actualFillableTakerTokenAmounts How much of each order is fillable\\n    ///         based on maker funds, in taker tokens.\\n    /// @return isSignatureValids Whether each signature is valid for the order.\\n    function batchGetRfqOrderRelevantStates(\\n        LibNativeOrder.RfqOrder[] calldata orders,\\n        LibSignature.Signature[] calldata signatures\\n    )\\n        external\\n        view\\n        returns (\\n            LibNativeOrder.OrderInfo[] memory orderInfos,\\n            uint128[] memory actualFillableTakerTokenAmounts,\\n            bool[] memory isSignatureValids\\n        )\\n    {\\n        require(\\n            orders.length == signatures.length,\\n            \\\"NativeOrdersFeature/MISMATCHED_ARRAY_LENGTHS\\\"\\n        );\\n        orderInfos = new LibNativeOrder.OrderInfo[](orders.length);\\n        actualFillableTakerTokenAmounts = new uint128[](orders.length);\\n        isSignatureValids = new bool[](orders.length);\\n        for (uint256 i = 0; i < orders.length; ++i) {\\n            try\\n                this.getRfqOrderRelevantState(orders[i], signatures[i])\\n                    returns (\\n                        LibNativeOrder.OrderInfo memory orderInfo,\\n                        uint128 actualFillableTakerTokenAmount,\\n                        bool isSignatureValid\\n                    )\\n            {\\n                orderInfos[i] = orderInfo;\\n                actualFillableTakerTokenAmounts[i] = actualFillableTakerTokenAmount;\\n                isSignatureValids[i] = isSignatureValid;\\n            }\\n            catch {}\\n        }\\n    }\\n\\n    /// @dev Populate `status` and `takerTokenFilledAmount` fields in\\n    ///      `orderInfo`, which use the same code path for both limit and\\n    ///      RFQ orders.\\n    /// @param orderInfo `OrderInfo` with `orderHash` and `maker` filled.\\n    /// @param takerAmount The order's taker token amount..\\n    /// @param expiry The order's expiry.\\n    /// @param salt The order's salt.\\n    /// @param salt The minimum valid salt for the maker and pair combination.\\n    function _populateCommonOrderInfoFields(\\n        LibNativeOrder.OrderInfo memory orderInfo,\\n        uint128 takerAmount,\\n        uint64 expiry,\\n        uint256 salt,\\n        uint256 minValidSalt\\n    )\\n        private\\n        view\\n    {\\n        LibNativeOrdersStorage.Storage storage stor =\\n            LibNativeOrdersStorage.getStorage();\\n\\n        // Get the filled and direct cancel state.\\n        {\\n            // The high bit of the raw taker token filled amount will be set\\n            // if the order was cancelled.\\n            uint256 rawTakerTokenFilledAmount =\\n                stor.orderHashToTakerTokenFilledAmount[orderInfo.orderHash];\\n            orderInfo.takerTokenFilledAmount = uint128(rawTakerTokenFilledAmount);\\n            if (orderInfo.takerTokenFilledAmount >= takerAmount) {\\n                orderInfo.status = LibNativeOrder.OrderStatus.FILLED;\\n                return;\\n            }\\n            if (rawTakerTokenFilledAmount & HIGH_BIT != 0) {\\n                orderInfo.status = LibNativeOrder.OrderStatus.CANCELLED;\\n                return;\\n            }\\n        }\\n\\n        // Check for expiration.\\n        if (expiry <= uint64(block.timestamp)) {\\n            orderInfo.status = LibNativeOrder.OrderStatus.EXPIRED;\\n            return;\\n        }\\n\\n        // Check if the order was cancelled by salt.\\n        if (minValidSalt > salt) {\\n            orderInfo.status = LibNativeOrder.OrderStatus.CANCELLED;\\n            return;\\n        }\\n        orderInfo.status = LibNativeOrder.OrderStatus.FILLABLE;\\n    }\\n\\n    /// @dev Calculate the actual fillable taker token amount of an order\\n    ///      based on maker allowance and balances.\\n    function _getActualFillableTakerTokenAmount(\\n        GetActualFillableTakerTokenAmountParams memory params\\n    )\\n        private\\n        view\\n        returns (uint128 actualFillableTakerTokenAmount)\\n    {\\n        if (params.orderMakerAmount == 0 || params.orderTakerAmount == 0) {\\n            // Empty order.\\n            return 0;\\n        }\\n        if (params.orderInfo.status != LibNativeOrder.OrderStatus.FILLABLE) {\\n            // Not fillable.\\n            return 0;\\n        }\\n\\n        // Get the fillable maker amount based on the order quantities and\\n        // previously filled amount\\n        uint256 fillableMakerTokenAmount = LibMathV06.getPartialAmountFloor(\\n            uint256(\\n                params.orderTakerAmount\\n                - params.orderInfo.takerTokenFilledAmount\\n            ),\\n            uint256(params.orderTakerAmount),\\n            uint256(params.orderMakerAmount)\\n        );\\n        // Clamp it to the amount of maker tokens we can spend on behalf of the\\n        // maker.\\n        fillableMakerTokenAmount = LibSafeMathV06.min256(\\n            fillableMakerTokenAmount,\\n            _getSpendableERC20BalanceOf(params.makerToken, params.maker)\\n        );\\n        // Convert to taker token amount.\\n        return LibMathV06.getPartialAmountCeil(\\n            fillableMakerTokenAmount,\\n            uint256(params.orderMakerAmount),\\n            uint256(params.orderTakerAmount)\\n        ).safeDowncastToUint128();\\n    }\\n\\n    /// @dev checks if a given address is registered to sign on behalf of a maker address\\n    /// @param maker The maker address encoded in an order (can be a contract)\\n    /// @param signer The address that is providing a signature\\n    function isValidOrderSigner(\\n        address maker,\\n        address signer\\n    )\\n        public\\n        view\\n        returns (bool isValid)\\n    {\\n        // returns false if it the mapping doesn't exist\\n        return LibNativeOrdersStorage.getStorage()\\n            .orderSignerRegistry\\n                [maker]\\n                [signer];\\n    }\\n}\\n\",\"keccak256\":\"0xb31e22df53be065da0683e08b3acd4a20c1a853f7f71189897874b1f22066126\",\"license\":\"Apache-2.0\"},\"src/zero-ex/features/native_orders/NativeOrdersProtocolFees.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2021 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../../contracts-erc20/v06/IEtherTokenV06.sol\\\";\\nimport \\\"../../../contracts-utils/v06/errors/LibRichErrorsV06.sol\\\";\\nimport \\\"../../../contracts-utils/v06/LibSafeMathV06.sol\\\";\\nimport \\\"../../fixins/FixinProtocolFees.sol\\\";\\nimport \\\"../../errors/LibNativeOrdersRichErrors.sol\\\";\\nimport \\\"../../vendor/v3/IStaking.sol\\\";\\n\\n\\n/// @dev Mixin for protocol fee utility functions.\\nabstract contract NativeOrdersProtocolFees is\\n    FixinProtocolFees\\n{\\n    using LibSafeMathV06 for uint256;\\n    using LibRichErrorsV06 for bytes;\\n\\n    constructor(\\n        IEtherTokenV06 weth,\\n        IStaking staking,\\n        FeeCollectorController feeCollectorController,\\n        uint32 protocolFeeMultiplier\\n    )\\n        internal\\n        FixinProtocolFees(weth, staking, feeCollectorController, protocolFeeMultiplier)\\n    {\\n        // solhint-disable no-empty-blocks\\n    }\\n\\n    /// @dev Transfers protocol fees from the `FeeCollector` pools into\\n    ///      the staking contract.\\n    /// @param poolIds Staking pool IDs\\n    function transferProtocolFeesForPools(bytes32[] calldata poolIds)\\n        external\\n    {\\n        for (uint256 i = 0; i < poolIds.length; ++i) {\\n            _transferFeesForPool(poolIds[i]);\\n        }\\n    }\\n\\n    /// @dev Get the protocol fee multiplier. This should be multiplied by the\\n    ///      gas price to arrive at the required protocol fee to fill a native order.\\n    /// @return multiplier The protocol fee multiplier.\\n    function getProtocolFeeMultiplier()\\n        external\\n        view\\n        returns (uint32 multiplier)\\n    {\\n        return PROTOCOL_FEE_MULTIPLIER;\\n    }\\n}\\n\",\"keccak256\":\"0x22bd127d074546604363b58fa4b12836fe58a092afdc0f744ac401d3a7cb8446\",\"license\":\"Apache-2.0\"},\"src/zero-ex/features/native_orders/NativeOrdersSettlement.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2021 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../../contracts-erc20/v06/IERC20TokenV06.sol\\\";\\nimport \\\"../../../contracts-erc20/v06/IEtherTokenV06.sol\\\";\\nimport \\\"../../../contracts-utils/v06/errors/LibRichErrorsV06.sol\\\";\\nimport \\\"../../../contracts-utils/v06/LibSafeMathV06.sol\\\";\\nimport \\\"../../../contracts-utils/v06/LibMathV06.sol\\\";\\nimport \\\"../../errors/LibNativeOrdersRichErrors.sol\\\";\\nimport \\\"../../fixins/FixinCommon.sol\\\";\\nimport \\\"../../storage/LibNativeOrdersStorage.sol\\\";\\nimport \\\"../../vendor/v3/IStaking.sol\\\";\\nimport \\\"../interfaces/INativeOrdersEvents.sol\\\";\\nimport \\\"../libs/LibSignature.sol\\\";\\nimport \\\"../libs/LibNativeOrder.sol\\\";\\nimport \\\"./NativeOrdersCancellation.sol\\\";\\nimport \\\"./NativeOrdersProtocolFees.sol\\\";\\n\\n\\n/// @dev Mixin for settling limit and RFQ orders.\\nabstract contract NativeOrdersSettlement is\\n    INativeOrdersEvents,\\n    NativeOrdersCancellation,\\n    NativeOrdersProtocolFees,\\n    FixinCommon\\n{\\n    using LibSafeMathV06 for uint128;\\n    using LibRichErrorsV06 for bytes;\\n\\n    /// @dev Params for `_settleOrder()`.\\n    struct SettleOrderInfo {\\n        // Order hash.\\n        bytes32 orderHash;\\n        // Maker of the order.\\n        address maker;\\n        // The address holding the taker tokens.\\n        address payer;\\n        // Recipient of the maker tokens.\\n        address recipient;\\n        // Maker token.\\n        IERC20TokenV06 makerToken;\\n        // Taker token.\\n        IERC20TokenV06 takerToken;\\n        // Maker token amount.\\n        uint128 makerAmount;\\n        // Taker token amount.\\n        uint128 takerAmount;\\n        // Maximum taker token amount to fill.\\n        uint128 takerTokenFillAmount;\\n        // How much taker token amount has already been filled in this order.\\n        uint128 takerTokenFilledAmount;\\n    }\\n\\n    /// @dev Params for `_fillLimitOrderPrivate()`\\n    struct FillLimitOrderPrivateParams {\\n        // The limit order.\\n        LibNativeOrder.LimitOrder order;\\n        // The order signature.\\n        LibSignature.Signature signature;\\n        // Maximum taker token to fill this order with.\\n        uint128 takerTokenFillAmount;\\n        // The order taker.\\n        address taker;\\n        // The order sender.\\n        address sender;\\n    }\\n\\n    /// @dev Params for `_fillRfqOrderPrivate()`\\n    struct FillRfqOrderPrivateParams {\\n        LibNativeOrder.RfqOrder order;\\n        // The order signature.\\n        LibSignature.Signature signature;\\n        // Maximum taker token to fill this order with.\\n        uint128 takerTokenFillAmount;\\n        // The order taker.\\n        address taker;\\n        // Whether to use the Exchange Proxy's balance\\n        // of taker tokens.\\n        bool useSelfBalance;\\n        // The recipient of the maker tokens.\\n        address recipient;\\n    }\\n\\n    // @dev Fill results returned by `_fillLimitOrderPrivate()` and\\n    ///     `_fillRfqOrderPrivate()`.\\n    struct FillNativeOrderResults {\\n        uint256 ethProtocolFeePaid;\\n        uint128 takerTokenFilledAmount;\\n        uint128 makerTokenFilledAmount;\\n        uint128 takerTokenFeeFilledAmount;\\n    }\\n\\n    constructor(\\n        address zeroExAddress,\\n        IEtherTokenV06 weth,\\n        IStaking staking,\\n        FeeCollectorController feeCollectorController,\\n        uint32 protocolFeeMultiplier\\n    )\\n        public\\n        NativeOrdersCancellation(zeroExAddress)\\n        NativeOrdersProtocolFees(weth, staking, feeCollectorController, protocolFeeMultiplier)\\n    {\\n        // solhint-disable no-empty-blocks\\n    }\\n\\n    /// @dev Fill a limit order. The taker and sender will be the caller.\\n    /// @param order The limit order. ETH protocol fees can be\\n    ///      attached to this call. Any unspent ETH will be refunded to\\n    ///      the caller.\\n    /// @param signature The order signature.\\n    /// @param takerTokenFillAmount Maximum taker token amount to fill this order with.\\n    /// @return takerTokenFilledAmount How much maker token was filled.\\n    /// @return makerTokenFilledAmount How much maker token was filled.\\n    function fillLimitOrder(\\n        LibNativeOrder.LimitOrder memory order,\\n        LibSignature.Signature memory signature,\\n        uint128 takerTokenFillAmount\\n    )\\n        public\\n        payable\\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount)\\n    {\\n        FillNativeOrderResults memory results =\\n            _fillLimitOrderPrivate(FillLimitOrderPrivateParams({\\n                order: order,\\n                signature: signature,\\n                takerTokenFillAmount: takerTokenFillAmount,\\n                taker: msg.sender,\\n                sender: msg.sender\\n            }));\\n        LibNativeOrder.refundExcessProtocolFeeToSender(results.ethProtocolFeePaid);\\n        (takerTokenFilledAmount, makerTokenFilledAmount) = (\\n            results.takerTokenFilledAmount,\\n            results.makerTokenFilledAmount\\n        );\\n    }\\n\\n    /// @dev Fill an RFQ order for up to `takerTokenFillAmount` taker tokens.\\n    ///      The taker will be the caller. ETH should be attached to pay the\\n    ///      protocol fee.\\n    /// @param order The RFQ order.\\n    /// @param signature The order signature.\\n    /// @param takerTokenFillAmount Maximum taker token amount to fill this order with.\\n    /// @return takerTokenFilledAmount How much maker token was filled.\\n    /// @return makerTokenFilledAmount How much maker token was filled.\\n    function fillRfqOrder(\\n        LibNativeOrder.RfqOrder memory order,\\n        LibSignature.Signature memory signature,\\n        uint128 takerTokenFillAmount\\n    )\\n        public\\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount)\\n    {\\n        FillNativeOrderResults memory results =\\n            _fillRfqOrderPrivate(FillRfqOrderPrivateParams({\\n                order: order,\\n                signature: signature,\\n                takerTokenFillAmount: takerTokenFillAmount,\\n                taker: msg.sender,\\n                useSelfBalance: false,\\n                recipient: msg.sender\\n            }));\\n        (takerTokenFilledAmount, makerTokenFilledAmount) = (\\n            results.takerTokenFilledAmount,\\n            results.makerTokenFilledAmount\\n        );\\n    }\\n\\n    /// @dev Fill an RFQ order for exactly `takerTokenFillAmount` taker tokens.\\n    ///      The taker will be the caller. ETH protocol fees can be\\n    ///      attached to this call. Any unspent ETH will be refunded to\\n    ///      the caller.\\n    /// @param order The limit order.\\n    /// @param signature The order signature.\\n    /// @param takerTokenFillAmount How much taker token to fill this order with.\\n    /// @return makerTokenFilledAmount How much maker token was filled.\\n    function fillOrKillLimitOrder(\\n        LibNativeOrder.LimitOrder memory order,\\n        LibSignature.Signature memory signature,\\n        uint128 takerTokenFillAmount\\n    )\\n        public\\n        payable\\n        returns (uint128 makerTokenFilledAmount)\\n    {\\n        FillNativeOrderResults memory results =\\n            _fillLimitOrderPrivate(FillLimitOrderPrivateParams({\\n                order: order,\\n                signature: signature,\\n                takerTokenFillAmount: takerTokenFillAmount,\\n                taker: msg.sender,\\n                sender: msg.sender\\n            }));\\n        // Must have filled exactly the amount requested.\\n        if (results.takerTokenFilledAmount < takerTokenFillAmount) {\\n            LibNativeOrdersRichErrors.FillOrKillFailedError(\\n                getLimitOrderHash(order),\\n                results.takerTokenFilledAmount,\\n                takerTokenFillAmount\\n            ).rrevert();\\n        }\\n        LibNativeOrder.refundExcessProtocolFeeToSender(results.ethProtocolFeePaid);\\n        makerTokenFilledAmount = results.makerTokenFilledAmount;\\n    }\\n\\n    /// @dev Fill an RFQ order for exactly `takerTokenFillAmount` taker tokens.\\n    ///      The taker will be the caller. ETH protocol fees can be\\n    ///      attached to this call. Any unspent ETH will be refunded to\\n    ///      the caller.\\n    /// @param order The RFQ order.\\n    /// @param signature The order signature.\\n    /// @param takerTokenFillAmount How much taker token to fill this order with.\\n    /// @return makerTokenFilledAmount How much maker token was filled.\\n    function fillOrKillRfqOrder(\\n        LibNativeOrder.RfqOrder memory order,\\n        LibSignature.Signature memory signature,\\n        uint128 takerTokenFillAmount\\n    )\\n        public\\n        returns (uint128 makerTokenFilledAmount)\\n    {\\n        FillNativeOrderResults memory results =\\n            _fillRfqOrderPrivate(FillRfqOrderPrivateParams({\\n                order: order,\\n                signature: signature,\\n                takerTokenFillAmount: takerTokenFillAmount,\\n                taker: msg.sender,\\n                useSelfBalance: false,\\n                recipient: msg.sender\\n            }));\\n        // Must have filled exactly the amount requested.\\n        if (results.takerTokenFilledAmount < takerTokenFillAmount) {\\n            LibNativeOrdersRichErrors.FillOrKillFailedError(\\n                getRfqOrderHash(order),\\n                results.takerTokenFilledAmount,\\n                takerTokenFillAmount\\n            ).rrevert();\\n        }\\n        makerTokenFilledAmount = results.makerTokenFilledAmount;\\n    }\\n\\n    /// @dev Fill a limit order. Internal variant. ETH protocol fees can be\\n    ///      attached to this call.\\n    /// @param order The limit order.\\n    /// @param signature The order signature.\\n    /// @param takerTokenFillAmount Maximum taker token to fill this order with.\\n    /// @param taker The order taker.\\n    /// @param sender The order sender.\\n    /// @return takerTokenFilledAmount How much maker token was filled.\\n    /// @return makerTokenFilledAmount How much maker token was filled.\\n    function _fillLimitOrder(\\n        LibNativeOrder.LimitOrder memory order,\\n        LibSignature.Signature memory signature,\\n        uint128 takerTokenFillAmount,\\n        address taker,\\n        address sender\\n    )\\n        public\\n        virtual\\n        payable\\n        onlySelf\\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount)\\n    {\\n        FillNativeOrderResults memory results =\\n            _fillLimitOrderPrivate(FillLimitOrderPrivateParams(\\n                order,\\n                signature,\\n                takerTokenFillAmount,\\n                taker,\\n                sender\\n            ));\\n        (takerTokenFilledAmount, makerTokenFilledAmount) = (\\n            results.takerTokenFilledAmount,\\n            results.makerTokenFilledAmount\\n        );\\n    }\\n\\n    /// @dev Fill an RFQ order. Internal variant.\\n    /// @param order The RFQ order.\\n    /// @param signature The order signature.\\n    /// @param takerTokenFillAmount Maximum taker token to fill this order with.\\n    /// @param taker The order taker.\\n    /// @param useSelfBalance Whether to use the ExchangeProxy's transient\\n    ///        balance of taker tokens to fill the order.\\n    /// @param recipient The recipient of the maker tokens.\\n    /// @return takerTokenFilledAmount How much maker token was filled.\\n    /// @return makerTokenFilledAmount How much maker token was filled.\\n    function _fillRfqOrder(\\n        LibNativeOrder.RfqOrder memory order,\\n        LibSignature.Signature memory signature,\\n        uint128 takerTokenFillAmount,\\n        address taker,\\n        bool useSelfBalance,\\n        address recipient\\n    )\\n        public\\n        virtual\\n        onlySelf\\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount)\\n    {\\n        FillNativeOrderResults memory results =\\n            _fillRfqOrderPrivate(FillRfqOrderPrivateParams(\\n                order,\\n                signature,\\n                takerTokenFillAmount,\\n                taker,\\n                useSelfBalance,\\n                recipient\\n            ));\\n        (takerTokenFilledAmount, makerTokenFilledAmount) = (\\n            results.takerTokenFilledAmount,\\n            results.makerTokenFilledAmount\\n        );\\n    }\\n\\n    /// @dev Mark what tx.origin addresses are allowed to fill an order that\\n    ///      specifies the message sender as its txOrigin.\\n    /// @param origins An array of origin addresses to update.\\n    /// @param allowed True to register, false to unregister.\\n    function registerAllowedRfqOrigins(\\n        address[] memory origins,\\n        bool allowed\\n    )\\n        external\\n    {\\n        require(msg.sender == tx.origin,\\n            \\\"NativeOrdersFeature/NO_CONTRACT_ORIGINS\\\");\\n\\n        LibNativeOrdersStorage.Storage storage stor =\\n            LibNativeOrdersStorage.getStorage();\\n\\n        for (uint256 i = 0; i < origins.length; i++) {\\n            stor.originRegistry[msg.sender][origins[i]] = allowed;\\n        }\\n\\n        emit RfqOrderOriginsAllowed(msg.sender, origins, allowed);\\n    }\\n\\n    /// @dev Fill a limit order. Private variant. Does not refund protocol fees.\\n    /// @param params Function params.\\n    /// @return results Results of the fill.\\n    function _fillLimitOrderPrivate(FillLimitOrderPrivateParams memory params)\\n        private\\n        returns (FillNativeOrderResults memory results)\\n    {\\n        LibNativeOrder.OrderInfo memory orderInfo = getLimitOrderInfo(params.order);\\n\\n        // Must be fillable.\\n        if (orderInfo.status != LibNativeOrder.OrderStatus.FILLABLE) {\\n            LibNativeOrdersRichErrors.OrderNotFillableError(\\n                orderInfo.orderHash,\\n                uint8(orderInfo.status)\\n            ).rrevert();\\n        }\\n\\n        // Must be fillable by the taker.\\n        if (params.order.taker != address(0) && params.order.taker != params.taker) {\\n            LibNativeOrdersRichErrors.OrderNotFillableByTakerError(\\n                orderInfo.orderHash,\\n                params.taker,\\n                params.order.taker\\n            ).rrevert();\\n        }\\n\\n        // Must be fillable by the sender.\\n        if (params.order.sender != address(0) && params.order.sender != params.sender) {\\n            LibNativeOrdersRichErrors.OrderNotFillableBySenderError(\\n                orderInfo.orderHash,\\n                params.sender,\\n                params.order.sender\\n            ).rrevert();\\n        }\\n\\n        // Signature must be valid for the order.\\n        {\\n            address signer = LibSignature.getSignerOfHash(\\n                orderInfo.orderHash,\\n                params.signature\\n            );\\n            if (signer != params.order.maker && !isValidOrderSigner(params.order.maker, signer)) {\\n                LibNativeOrdersRichErrors.OrderNotSignedByMakerError(\\n                    orderInfo.orderHash,\\n                    signer,\\n                    params.order.maker\\n                ).rrevert();\\n            }\\n        }\\n\\n        // Pay the protocol fee.\\n        results.ethProtocolFeePaid = _collectProtocolFee(params.order.pool);\\n\\n        // Settle between the maker and taker.\\n        (results.takerTokenFilledAmount, results.makerTokenFilledAmount) = _settleOrder(\\n            SettleOrderInfo({\\n                orderHash: orderInfo.orderHash,\\n                maker: params.order.maker,\\n                payer: params.taker,\\n                recipient: params.taker,\\n                makerToken: IERC20TokenV06(params.order.makerToken),\\n                takerToken: IERC20TokenV06(params.order.takerToken),\\n                makerAmount: params.order.makerAmount,\\n                takerAmount: params.order.takerAmount,\\n                takerTokenFillAmount: params.takerTokenFillAmount,\\n                takerTokenFilledAmount: orderInfo.takerTokenFilledAmount\\n            })\\n        );\\n\\n        // Pay the fee recipient.\\n        if (params.order.takerTokenFeeAmount > 0) {\\n            results.takerTokenFeeFilledAmount = uint128(LibMathV06.getPartialAmountFloor(\\n                results.takerTokenFilledAmount,\\n                params.order.takerAmount,\\n                params.order.takerTokenFeeAmount\\n            ));\\n            _transferERC20TokensFrom(\\n                params.order.takerToken,\\n                params.taker,\\n                params.order.feeRecipient,\\n                uint256(results.takerTokenFeeFilledAmount)\\n            );\\n        }\\n\\n        emit LimitOrderFilled(\\n            orderInfo.orderHash,\\n            params.order.maker,\\n            params.taker,\\n            params.order.feeRecipient,\\n            address(params.order.makerToken),\\n            address(params.order.takerToken),\\n            results.takerTokenFilledAmount,\\n            results.makerTokenFilledAmount,\\n            results.takerTokenFeeFilledAmount,\\n            results.ethProtocolFeePaid,\\n            params.order.pool\\n        );\\n    }\\n\\n    /// @dev Fill an RFQ order. Private variant.\\n    /// @param params Function params.\\n    /// @return results Results of the fill.\\n    function _fillRfqOrderPrivate(FillRfqOrderPrivateParams memory params)\\n        private\\n        returns (FillNativeOrderResults memory results)\\n    {\\n        LibNativeOrder.OrderInfo memory orderInfo = getRfqOrderInfo(params.order);\\n\\n        // Must be fillable.\\n        if (orderInfo.status != LibNativeOrder.OrderStatus.FILLABLE) {\\n            LibNativeOrdersRichErrors.OrderNotFillableError(\\n                orderInfo.orderHash,\\n                uint8(orderInfo.status)\\n            ).rrevert();\\n        }\\n\\n        {\\n            LibNativeOrdersStorage.Storage storage stor =\\n                LibNativeOrdersStorage.getStorage();\\n\\n            // Must be fillable by the tx.origin.\\n            if (\\n                params.order.txOrigin != tx.origin &&\\n                !stor.originRegistry[params.order.txOrigin][tx.origin]\\n            ) {\\n                LibNativeOrdersRichErrors.OrderNotFillableByOriginError(\\n                    orderInfo.orderHash,\\n                    tx.origin,\\n                    params.order.txOrigin\\n                ).rrevert();\\n            }\\n        }\\n\\n        // Must be fillable by the taker.\\n        if (params.order.taker != address(0) && params.order.taker != params.taker) {\\n            LibNativeOrdersRichErrors.OrderNotFillableByTakerError(\\n                orderInfo.orderHash,\\n                params.taker,\\n                params.order.taker\\n            ).rrevert();\\n        }\\n\\n        // Signature must be valid for the order.\\n        {\\n            address signer = LibSignature.getSignerOfHash(\\n                orderInfo.orderHash,\\n                params.signature\\n            );\\n            if (\\n                signer != params.order.maker &&\\n                !isValidOrderSigner(params.order.maker, signer)\\n            ) {\\n                LibNativeOrdersRichErrors.OrderNotSignedByMakerError(\\n                    orderInfo.orderHash,\\n                    signer,\\n                    params.order.maker\\n                ).rrevert();\\n            }\\n        }\\n\\n        // Settle between the maker and taker.\\n        (results.takerTokenFilledAmount, results.makerTokenFilledAmount) = _settleOrder(\\n            SettleOrderInfo({\\n                orderHash: orderInfo.orderHash,\\n                maker: params.order.maker,\\n                payer: params.useSelfBalance ? address(this) : params.taker,\\n                recipient: params.recipient,\\n                makerToken: IERC20TokenV06(params.order.makerToken),\\n                takerToken: IERC20TokenV06(params.order.takerToken),\\n                makerAmount: params.order.makerAmount,\\n                takerAmount: params.order.takerAmount,\\n                takerTokenFillAmount: params.takerTokenFillAmount,\\n                takerTokenFilledAmount: orderInfo.takerTokenFilledAmount\\n            })\\n        );\\n\\n        emit RfqOrderFilled(\\n            orderInfo.orderHash,\\n            params.order.maker,\\n            params.taker,\\n            address(params.order.makerToken),\\n            address(params.order.takerToken),\\n            results.takerTokenFilledAmount,\\n            results.makerTokenFilledAmount,\\n            params.order.pool\\n        );\\n    }\\n\\n    /// @dev Settle the trade between an order's maker and taker.\\n    /// @param settleInfo Information needed to execute the settlement.\\n    /// @return takerTokenFilledAmount How much taker token was filled.\\n    /// @return makerTokenFilledAmount How much maker token was filled.\\n    function _settleOrder(SettleOrderInfo memory settleInfo)\\n        private\\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount)\\n    {\\n        // Clamp the taker token fill amount to the fillable amount.\\n        takerTokenFilledAmount = LibSafeMathV06.min128(\\n            settleInfo.takerTokenFillAmount,\\n            settleInfo.takerAmount.safeSub128(settleInfo.takerTokenFilledAmount)\\n        );\\n        // Compute the maker token amount.\\n        // This should never overflow because the values are all clamped to\\n        // (2^128-1).\\n        makerTokenFilledAmount = uint128(LibMathV06.getPartialAmountFloor(\\n            uint256(takerTokenFilledAmount),\\n            uint256(settleInfo.takerAmount),\\n            uint256(settleInfo.makerAmount)\\n        ));\\n\\n        if (takerTokenFilledAmount == 0 || makerTokenFilledAmount == 0) {\\n            // Nothing to do.\\n            return (0, 0);\\n        }\\n\\n        // Update filled state for the order.\\n        LibNativeOrdersStorage\\n            .getStorage()\\n            .orderHashToTakerTokenFilledAmount[settleInfo.orderHash] =\\n            // OK to overwrite the whole word because we shouldn't get to this\\n            // function if the order is cancelled.\\n                settleInfo.takerTokenFilledAmount.safeAdd128(takerTokenFilledAmount);\\n\\n        if (settleInfo.payer == address(this)) {\\n            // Transfer this -> maker.\\n            _transferERC20Tokens(\\n                settleInfo.takerToken,\\n                settleInfo.maker,\\n                takerTokenFilledAmount\\n            );\\n        } else {\\n            // Transfer taker -> maker.\\n            _transferERC20TokensFrom(\\n                settleInfo.takerToken,\\n                settleInfo.payer,\\n                settleInfo.maker,\\n                takerTokenFilledAmount\\n            );\\n        }\\n\\n        // Transfer maker -> recipient.\\n        _transferERC20TokensFrom(\\n            settleInfo.makerToken,\\n            settleInfo.maker,\\n            settleInfo.recipient,\\n            makerTokenFilledAmount\\n        );\\n    }\\n\\n    /// @dev register a signer who can sign on behalf of msg.sender\\n    /// @param signer The address from which you plan to generate signatures\\n    /// @param allowed True to register, false to unregister.\\n    function registerAllowedOrderSigner(\\n        address signer,\\n        bool allowed\\n    )\\n        external\\n    {\\n        LibNativeOrdersStorage.Storage storage stor =\\n            LibNativeOrdersStorage.getStorage();\\n\\n        stor.orderSignerRegistry[msg.sender][signer] = allowed;\\n\\n        emit OrderSignerRegistered(msg.sender, signer, allowed);\\n    }\\n}\\n\",\"keccak256\":\"0x725ace98f3e8f0d042a9bd96987f662b257e21b6ab864c36c7ccb644093da396\",\"license\":\"Apache-2.0\"},\"src/zero-ex/fixins/FixinCommon.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../contracts-utils/v06/errors/LibRichErrorsV06.sol\\\";\\nimport \\\"../errors/LibCommonRichErrors.sol\\\";\\nimport \\\"../errors/LibOwnableRichErrors.sol\\\";\\nimport \\\"../features/interfaces/IOwnableFeature.sol\\\";\\nimport \\\"../features/interfaces/ISimpleFunctionRegistryFeature.sol\\\";\\n\\n\\n/// @dev Common feature utilities.\\nabstract contract FixinCommon {\\n\\n    using LibRichErrorsV06 for bytes;\\n\\n    /// @dev The implementation address of this feature.\\n    address internal immutable _implementation;\\n\\n    /// @dev The caller must be this contract.\\n    modifier onlySelf() virtual {\\n        if (msg.sender != address(this)) {\\n            LibCommonRichErrors.OnlyCallableBySelfError(msg.sender).rrevert();\\n        }\\n        _;\\n    }\\n\\n    /// @dev The caller of this function must be the owner.\\n    modifier onlyOwner() virtual {\\n        {\\n            address owner = IOwnableFeature(address(this)).owner();\\n            if (msg.sender != owner) {\\n                LibOwnableRichErrors.OnlyOwnerError(\\n                    msg.sender,\\n                    owner\\n                ).rrevert();\\n            }\\n        }\\n        _;\\n    }\\n\\n    constructor() internal {\\n        // Remember this feature's original address.\\n        _implementation = address(this);\\n    }\\n\\n    /// @dev Registers a function implemented by this feature at `_implementation`.\\n    ///      Can and should only be called within a `migrate()`.\\n    /// @param selector The selector of the function whose implementation\\n    ///        is at `_implementation`.\\n    function _registerFeatureFunction(bytes4 selector)\\n        internal\\n    {\\n        ISimpleFunctionRegistryFeature(address(this)).extend(selector, _implementation);\\n    }\\n\\n    /// @dev Encode a feature version as a `uint256`.\\n    /// @param major The major version number of the feature.\\n    /// @param minor The minor version number of the feature.\\n    /// @param revision The revision number of the feature.\\n    /// @return encodedVersion The encoded version number.\\n    function _encodeVersion(uint32 major, uint32 minor, uint32 revision)\\n        internal\\n        pure\\n        returns (uint256 encodedVersion)\\n    {\\n        return (uint256(major) << 64) | (uint256(minor) << 32) | uint256(revision);\\n    }\\n}\\n\",\"keccak256\":\"0x6cb9e8ef2d64d51b23c26ed62b07d2256e8ae14a5df59181b28698c03371f0f1\",\"license\":\"Apache-2.0\"},\"src/zero-ex/fixins/FixinEIP712.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../contracts-utils/v06/errors/LibRichErrorsV06.sol\\\";\\nimport \\\"../errors/LibCommonRichErrors.sol\\\";\\nimport \\\"../errors/LibOwnableRichErrors.sol\\\";\\n\\n\\n/// @dev EIP712 helpers for features.\\nabstract contract FixinEIP712 {\\n\\n    /// @dev The domain hash separator for the entire exchange proxy.\\n    bytes32 public immutable EIP712_DOMAIN_SEPARATOR;\\n\\n    constructor(address zeroExAddress) internal {\\n        // Compute `EIP712_DOMAIN_SEPARATOR`\\n        {\\n            uint256 chainId;\\n            assembly { chainId := chainid() }\\n            EIP712_DOMAIN_SEPARATOR = keccak256(\\n                abi.encode(\\n                    keccak256(\\n                        \\\"EIP712Domain(\\\"\\n                            \\\"string name,\\\"\\n                            \\\"string version,\\\"\\n                            \\\"uint256 chainId,\\\"\\n                            \\\"address verifyingContract\\\"\\n                        \\\")\\\"\\n                    ),\\n                    keccak256(\\\"ZeroEx\\\"),\\n                    keccak256(\\\"1.0.0\\\"),\\n                    chainId,\\n                    zeroExAddress\\n                )\\n            );\\n        }\\n    }\\n\\n    function _getEIP712Hash(bytes32 structHash)\\n        internal\\n        view\\n        returns (bytes32 eip712Hash)\\n    {\\n        return keccak256(abi.encodePacked(\\n            hex\\\"1901\\\",\\n            EIP712_DOMAIN_SEPARATOR,\\n            structHash\\n        ));\\n    }\\n}\\n\",\"keccak256\":\"0x8746a75070bdce09d1047f14819ce04cbe93d69200517f2e6cb368ae567f26b2\",\"license\":\"Apache-2.0\"},\"src/zero-ex/fixins/FixinProtocolFees.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../contracts-erc20/v06/IEtherTokenV06.sol\\\";\\nimport \\\"../external/FeeCollector.sol\\\";\\nimport \\\"../external/FeeCollectorController.sol\\\";\\nimport \\\"../external/LibFeeCollector.sol\\\";\\nimport \\\"../vendor/v3/IStaking.sol\\\";\\n\\n\\n/// @dev Helpers for collecting protocol fees.\\nabstract contract FixinProtocolFees {\\n\\n    /// @dev The protocol fee multiplier.\\n    uint32 public immutable PROTOCOL_FEE_MULTIPLIER;\\n    /// @dev The `FeeCollectorController` contract.\\n    FeeCollectorController private immutable FEE_COLLECTOR_CONTROLLER;\\n    /// @dev Hash of the fee collector init code.\\n    bytes32 private immutable FEE_COLLECTOR_INIT_CODE_HASH;\\n    /// @dev The WETH token contract.\\n    IEtherTokenV06 private immutable WETH;\\n    /// @dev The staking contract.\\n    IStaking private immutable STAKING;\\n\\n    constructor(\\n        IEtherTokenV06 weth,\\n        IStaking staking,\\n        FeeCollectorController feeCollectorController,\\n        uint32 protocolFeeMultiplier\\n    )\\n        internal\\n    {\\n        FEE_COLLECTOR_CONTROLLER = feeCollectorController;\\n        FEE_COLLECTOR_INIT_CODE_HASH =\\n            feeCollectorController.FEE_COLLECTOR_INIT_CODE_HASH();\\n        WETH = weth;\\n        STAKING = staking;\\n        PROTOCOL_FEE_MULTIPLIER = protocolFeeMultiplier;\\n    }\\n\\n    /// @dev   Collect the specified protocol fee in ETH.\\n    ///        The fee is stored in a per-pool fee collector contract.\\n    /// @param poolId The pool ID for which a fee is being collected.\\n    /// @return ethProtocolFeePaid How much protocol fee was collected in ETH.\\n    function _collectProtocolFee(bytes32 poolId)\\n        internal\\n        returns (uint256 ethProtocolFeePaid)\\n    {\\n        uint256 protocolFeePaid = _getSingleProtocolFee();\\n        if (protocolFeePaid == 0) {\\n            // Nothing to do.\\n            return 0;\\n        }\\n        FeeCollector feeCollector = _getFeeCollector(poolId);\\n        (bool success,) = address(feeCollector).call{value: protocolFeePaid}(\\\"\\\");\\n        require(success, \\\"FixinProtocolFees/ETHER_TRANSFER_FALIED\\\");\\n        return protocolFeePaid;\\n    }\\n\\n    /// @dev Transfer fees for a given pool to the staking contract.\\n    /// @param poolId Identifies the pool whose fees are being paid.\\n    function _transferFeesForPool(bytes32 poolId)\\n        internal\\n    {\\n        // This will create a FeeCollector contract (if necessary) and wrap\\n        // fees for the pool ID.\\n        FeeCollector feeCollector =\\n            FEE_COLLECTOR_CONTROLLER.prepareFeeCollectorToPayFees(poolId);\\n        // All fees in the fee collector should be in WETH now.\\n        uint256 bal = WETH.balanceOf(address(feeCollector));\\n        if (bal > 1) {\\n            // Leave 1 wei behind to avoid high SSTORE cost of zero-->non-zero.\\n            STAKING.payProtocolFee(\\n                address(feeCollector),\\n                address(feeCollector),\\n                bal - 1);\\n        }\\n    }\\n\\n    /// @dev Compute the CREATE2 address for a fee collector.\\n    /// @param poolId The fee collector's pool ID.\\n    function _getFeeCollector(bytes32 poolId)\\n        internal\\n        view\\n        returns (FeeCollector)\\n    {\\n        return FeeCollector(LibFeeCollector.getFeeCollectorAddress(\\n            address(FEE_COLLECTOR_CONTROLLER),\\n            FEE_COLLECTOR_INIT_CODE_HASH,\\n            poolId\\n        ));\\n    }\\n\\n    /// @dev Get the cost of a single protocol fee.\\n    /// @return protocolFeeAmount The protocol fee amount, in ETH/WETH.\\n    function _getSingleProtocolFee()\\n        internal\\n        view\\n        returns (uint256 protocolFeeAmount)\\n    {\\n        return uint256(PROTOCOL_FEE_MULTIPLIER) * tx.gasprice;\\n    }\\n}\\n\",\"keccak256\":\"0x8f6dd51029e94112c89ee79b48f73761a11080065bbca61bf5ba22a7ff198692\",\"license\":\"Apache-2.0\"},\"src/zero-ex/fixins/FixinReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../contracts-utils/v06/LibBytesV06.sol\\\";\\nimport \\\"../../contracts-utils/v06/errors/LibRichErrorsV06.sol\\\";\\nimport \\\"../errors/LibCommonRichErrors.sol\\\";\\nimport \\\"../storage/LibReentrancyGuardStorage.sol\\\";\\n\\n\\n/// @dev Common feature utilities.\\nabstract contract FixinReentrancyGuard {\\n\\n    using LibRichErrorsV06 for bytes;\\n    using LibBytesV06 for bytes;\\n\\n    // Combinable reentrancy flags.\\n    /// @dev Reentrancy guard flag for meta-transaction functions.\\n    uint256 constant internal REENTRANCY_MTX = 0x1;\\n\\n    /// @dev Cannot reenter a function with the same reentrancy guard flags.\\n    modifier nonReentrant(uint256 reentrancyFlags) virtual {\\n        LibReentrancyGuardStorage.Storage storage stor =\\n            LibReentrancyGuardStorage.getStorage();\\n        {\\n            uint256 currentFlags = stor.reentrancyFlags;\\n            // Revert if any bits in `reentrancyFlags` has already been set.\\n            if ((currentFlags & reentrancyFlags) != 0) {\\n                LibCommonRichErrors.IllegalReentrancyError(\\n                    msg.data.readBytes4(0),\\n                    reentrancyFlags\\n                ).rrevert();\\n            }\\n            // Update reentrancy flags.\\n            stor.reentrancyFlags = currentFlags | reentrancyFlags;\\n        }\\n\\n        _;\\n\\n        // Clear reentrancy flags.\\n        stor.reentrancyFlags = stor.reentrancyFlags & (~reentrancyFlags);\\n    }\\n}\\n\",\"keccak256\":\"0xb76837e523e4eed43fac6cc1d17b60d2ff11956a0586652a33fd1cb4ce76190f\",\"license\":\"Apache-2.0\"},\"src/zero-ex/fixins/FixinTokenSpender.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../contracts-erc20/v06/IERC20TokenV06.sol\\\";\\nimport \\\"../../contracts-utils/v06/LibSafeMathV06.sol\\\";\\n\\n\\n/// @dev Helpers for moving tokens around.\\nabstract contract FixinTokenSpender {\\n\\n    // Mask of the lower 20 bytes of a bytes32.\\n    uint256 constant private ADDRESS_MASK = 0x000000000000000000000000ffffffffffffffffffffffffffffffffffffffff;\\n\\n    /// @dev Transfers ERC20 tokens from `owner` to `to`.\\n    /// @param token The token to spend.\\n    /// @param owner The owner of the tokens.\\n    /// @param to The recipient of the tokens.\\n    /// @param amount The amount of `token` to transfer.\\n    function _transferERC20TokensFrom(\\n        IERC20TokenV06 token,\\n        address owner,\\n        address to,\\n        uint256 amount\\n    )\\n        internal\\n    {\\n        require(address(token) != address(this), \\\"FixinTokenSpender/CANNOT_INVOKE_SELF\\\");\\n\\n        assembly {\\n            let ptr := mload(0x40) // free memory pointer\\n\\n            // selector for transferFrom(address,address,uint256)\\n            mstore(ptr, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(ptr, 0x04), and(owner, ADDRESS_MASK))\\n            mstore(add(ptr, 0x24), and(to, ADDRESS_MASK))\\n            mstore(add(ptr, 0x44), amount)\\n\\n            let success := call(\\n                gas(),\\n                and(token, ADDRESS_MASK),\\n                0,\\n                ptr,\\n                0x64,\\n                ptr,\\n                32\\n            )\\n\\n            let rdsize := returndatasize()\\n\\n            // Check for ERC20 success. ERC20 tokens should return a boolean,\\n            // but some don't. We accept 0-length return data as success, or at\\n            // least 32 bytes that starts with a 32-byte boolean true.\\n            success := and(\\n                success,                             // call itself succeeded\\n                or(\\n                    iszero(rdsize),                  // no return data, or\\n                    and(\\n                        iszero(lt(rdsize, 32)),      // at least 32 bytes\\n                        eq(mload(ptr), 1)            // starts with uint256(1)\\n                    )\\n                )\\n            )\\n\\n            if iszero(success) {\\n                returndatacopy(ptr, 0, rdsize)\\n                revert(ptr, rdsize)\\n            }\\n        }\\n    }\\n\\n    /// @dev Transfers ERC20 tokens from ourselves to `to`.\\n    /// @param token The token to spend.\\n    /// @param to The recipient of the tokens.\\n    /// @param amount The amount of `token` to transfer.\\n    function _transferERC20Tokens(\\n        IERC20TokenV06 token,\\n        address to,\\n        uint256 amount\\n    )\\n        internal\\n    {\\n        require(address(token) != address(this), \\\"FixinTokenSpender/CANNOT_INVOKE_SELF\\\");\\n\\n        assembly {\\n            let ptr := mload(0x40) // free memory pointer\\n\\n            // selector for transfer(address,uint256)\\n            mstore(ptr, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(ptr, 0x04), and(to, ADDRESS_MASK))\\n            mstore(add(ptr, 0x24), amount)\\n\\n            let success := call(\\n                gas(),\\n                and(token, ADDRESS_MASK),\\n                0,\\n                ptr,\\n                0x44,\\n                ptr,\\n                32\\n            )\\n\\n            let rdsize := returndatasize()\\n\\n            // Check for ERC20 success. ERC20 tokens should return a boolean,\\n            // but some don't. We accept 0-length return data as success, or at\\n            // least 32 bytes that starts with a 32-byte boolean true.\\n            success := and(\\n                success,                             // call itself succeeded\\n                or(\\n                    iszero(rdsize),                  // no return data, or\\n                    and(\\n                        iszero(lt(rdsize, 32)),      // at least 32 bytes\\n                        eq(mload(ptr), 1)            // starts with uint256(1)\\n                    )\\n                )\\n            )\\n\\n            if iszero(success) {\\n                returndatacopy(ptr, 0, rdsize)\\n                revert(ptr, rdsize)\\n            }\\n        }\\n    }\\n\\n\\n    /// @dev Transfers some amount of ETH to the given recipient and\\n    ///      reverts if the transfer fails.\\n    /// @param recipient The recipient of the ETH.\\n    /// @param amount The amount of ETH to transfer.\\n    function _transferEth(address payable recipient, uint256 amount)\\n        internal\\n    {\\n        if (amount > 0) {\\n            (bool success,) = recipient.call{value: amount}(\\\"\\\");\\n            require(success, \\\"FixinTokenSpender::_transferEth/TRANSFER_FAILED\\\");\\n        }\\n    }\\n\\n    /// @dev Gets the maximum amount of an ERC20 token `token` that can be\\n    ///      pulled from `owner` by this address.\\n    /// @param token The token to spend.\\n    /// @param owner The owner of the tokens.\\n    /// @return amount The amount of tokens that can be pulled.\\n    function _getSpendableERC20BalanceOf(\\n        IERC20TokenV06 token,\\n        address owner\\n    )\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return LibSafeMathV06.min256(\\n            token.allowance(owner, address(this)),\\n            token.balanceOf(owner)\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x5d8ff9a63fe01980c589049080c80286a1f79e489edc5a1e2e6b5f406cd9e944\",\"license\":\"Apache-2.0\"},\"src/zero-ex/migrations/FullMigration.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../ZeroEx.sol\\\";\\nimport \\\"../features/interfaces/IOwnableFeature.sol\\\";\\nimport \\\"../features/TransformERC20Feature.sol\\\";\\nimport \\\"../features/MetaTransactionsFeature.sol\\\";\\nimport \\\"../features/NativeOrdersFeature.sol\\\";\\nimport \\\"../features/OtcOrdersFeature.sol\\\";\\nimport \\\"./InitialMigration.sol\\\";\\n\\n\\n/// @dev A contract for deploying and configuring the full ZeroEx contract.\\ncontract FullMigration {\\n\\n    // solhint-disable no-empty-blocks,indent\\n\\n    /// @dev Features to add the the proxy contract.\\n    struct Features {\\n        SimpleFunctionRegistryFeature registry;\\n        OwnableFeature ownable;\\n        TransformERC20Feature transformERC20;\\n        MetaTransactionsFeature metaTransactions;\\n        NativeOrdersFeature nativeOrders;\\n        OtcOrdersFeature otcOrders;\\n    }\\n\\n    /// @dev Parameters needed to initialize features.\\n    struct MigrateOpts {\\n        address transformerDeployer;\\n    }\\n\\n    /// @dev The allowed caller of `initializeZeroEx()`.\\n    address public immutable initializeCaller;\\n    /// @dev The initial migration contract.\\n    InitialMigration private _initialMigration;\\n\\n    /// @dev Instantiate this contract and set the allowed caller of `initializeZeroEx()`\\n    ///      to `initializeCaller`.\\n    /// @param initializeCaller_ The allowed caller of `initializeZeroEx()`.\\n    constructor(address payable initializeCaller_)\\n        public\\n    {\\n        initializeCaller = initializeCaller_;\\n        // Create an initial migration contract with this contract set to the\\n        // allowed `initializeCaller`.\\n        _initialMigration = new InitialMigration(address(this));\\n    }\\n\\n    /// @dev Retrieve the bootstrapper address to use when constructing `ZeroEx`.\\n    /// @return bootstrapper The bootstrapper address.\\n    function getBootstrapper()\\n        external\\n        view\\n        returns (address bootstrapper)\\n    {\\n        return address(_initialMigration);\\n    }\\n\\n    /// @dev Initialize the `ZeroEx` contract with the full feature set,\\n    ///      transfer ownership to `owner`, then self-destruct.\\n    /// @param owner The owner of the contract.\\n    /// @param zeroEx The instance of the ZeroEx contract. ZeroEx should\\n    ///        been constructed with this contract as the bootstrapper.\\n    /// @param features Features to add to the proxy.\\n    /// @return _zeroEx The configured ZeroEx contract. Same as the `zeroEx` parameter.\\n    /// @param migrateOpts Parameters needed to initialize features.\\n    function migrateZeroEx(\\n        address payable owner,\\n        ZeroEx zeroEx,\\n        Features memory features,\\n        MigrateOpts memory migrateOpts\\n    )\\n        public\\n        returns (ZeroEx _zeroEx)\\n    {\\n        require(msg.sender == initializeCaller, \\\"FullMigration/INVALID_SENDER\\\");\\n\\n        // Perform the initial migration with the owner set to this contract.\\n        _initialMigration.initializeZeroEx(\\n            address(uint160(address(this))),\\n            zeroEx,\\n            InitialMigration.BootstrapFeatures({\\n                registry: features.registry,\\n                ownable: features.ownable\\n            })\\n        );\\n\\n        // Add features.\\n        _addFeatures(zeroEx, features, migrateOpts);\\n\\n        // Transfer ownership to the real owner.\\n        IOwnableFeature(address(zeroEx)).transferOwnership(owner);\\n\\n        // Self-destruct.\\n        this.die(owner);\\n\\n        return zeroEx;\\n    }\\n\\n    /// @dev Destroy this contract. Only callable from ourselves (from `initializeZeroEx()`).\\n    /// @param ethRecipient Receiver of any ETH in this contract.\\n    function die(address payable ethRecipient)\\n        external\\n        virtual\\n    {\\n        require(msg.sender == address(this), \\\"FullMigration/INVALID_SENDER\\\");\\n        // This contract should not hold any funds but we send\\n        // them to the ethRecipient just in case.\\n        selfdestruct(ethRecipient);\\n    }\\n\\n    /// @dev Deploy and register features to the ZeroEx contract.\\n    /// @param zeroEx The bootstrapped ZeroEx contract.\\n    /// @param features Features to add to the proxy.\\n    /// @param migrateOpts Parameters needed to initialize features.\\n    function _addFeatures(\\n        ZeroEx zeroEx,\\n        Features memory features,\\n        MigrateOpts memory migrateOpts\\n    )\\n        private\\n    {\\n        IOwnableFeature ownable = IOwnableFeature(address(zeroEx));\\n        // TransformERC20Feature\\n        {\\n            // Register the feature.\\n            ownable.migrate(\\n                address(features.transformERC20),\\n                abi.encodeWithSelector(\\n                    TransformERC20Feature.migrate.selector,\\n                    migrateOpts.transformerDeployer\\n                ),\\n                address(this)\\n            );\\n        }\\n        // MetaTransactionsFeature\\n        {\\n            // Register the feature.\\n            ownable.migrate(\\n                address(features.metaTransactions),\\n                abi.encodeWithSelector(\\n                    MetaTransactionsFeature.migrate.selector\\n                ),\\n                address(this)\\n            );\\n        }\\n        // NativeOrdersFeature\\n        {\\n            // Register the feature.\\n            ownable.migrate(\\n                address(features.nativeOrders),\\n                abi.encodeWithSelector(\\n                    NativeOrdersFeature.migrate.selector\\n                ),\\n                address(this)\\n            );\\n        }\\n        // OtcOrdersFeature\\n        {\\n            // Register the feature.\\n            ownable.migrate(\\n                address(features.otcOrders),\\n                abi.encodeWithSelector(\\n                    OtcOrdersFeature.migrate.selector\\n                ),\\n                address(this)\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e15e069ee5bd929f931f35fc7bde20e68fc31495bffaa3a2415e0b5cabf6bcb\",\"license\":\"Apache-2.0\"},\"src/zero-ex/migrations/InitialMigration.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../ZeroEx.sol\\\";\\nimport \\\"../features/interfaces/IBootstrapFeature.sol\\\";\\nimport \\\"../features/SimpleFunctionRegistryFeature.sol\\\";\\nimport \\\"../features/OwnableFeature.sol\\\";\\nimport \\\"./LibBootstrap.sol\\\";\\n\\n\\n/// @dev A contract for deploying and configuring a minimal ZeroEx contract.\\ncontract InitialMigration {\\n\\n    /// @dev Features to bootstrap into the the proxy contract.\\n    struct BootstrapFeatures {\\n        SimpleFunctionRegistryFeature registry;\\n        OwnableFeature ownable;\\n    }\\n\\n    /// @dev The allowed caller of `initializeZeroEx()`. In production, this would be\\n    ///      the governor.\\n    address public immutable initializeCaller;\\n    /// @dev The real address of this contract.\\n    address private immutable _implementation;\\n\\n    /// @dev Instantiate this contract and set the allowed caller of `initializeZeroEx()`\\n    ///      to `initializeCaller_`.\\n    /// @param initializeCaller_ The allowed caller of `initializeZeroEx()`.\\n    constructor(address initializeCaller_) public {\\n        initializeCaller = initializeCaller_;\\n        _implementation = address(this);\\n    }\\n\\n    /// @dev Initialize the `ZeroEx` contract with the minimum feature set,\\n    ///      transfers ownership to `owner`, then self-destructs.\\n    ///      Only callable by `initializeCaller` set in the contstructor.\\n    /// @param owner The owner of the contract.\\n    /// @param zeroEx The instance of the ZeroEx contract. ZeroEx should\\n    ///        been constructed with this contract as the bootstrapper.\\n    /// @param features Features to bootstrap into the proxy.\\n    /// @return _zeroEx The configured ZeroEx contract. Same as the `zeroEx` parameter.\\n    function initializeZeroEx(\\n        address payable owner,\\n        ZeroEx zeroEx,\\n        BootstrapFeatures memory features\\n    )\\n        public\\n        virtual\\n        returns (ZeroEx _zeroEx)\\n    {\\n        // Must be called by the allowed initializeCaller.\\n        require(msg.sender == initializeCaller, \\\"InitialMigration/INVALID_SENDER\\\");\\n\\n        // Bootstrap the initial feature set.\\n        IBootstrapFeature(address(zeroEx)).bootstrap(\\n            address(this),\\n            abi.encodeWithSelector(this.bootstrap.selector, owner, features)\\n        );\\n\\n        // Self-destruct. This contract should not hold any funds but we send\\n        // them to the owner just in case.\\n        this.die(owner);\\n\\n        return zeroEx;\\n    }\\n\\n    /// @dev Sets up the initial state of the `ZeroEx` contract.\\n    ///      The `ZeroEx` contract will delegatecall into this function.\\n    /// @param owner The new owner of the ZeroEx contract.\\n    /// @param features Features to bootstrap into the proxy.\\n    /// @return success Magic bytes if successful.\\n    function bootstrap(address owner, BootstrapFeatures memory features)\\n        public\\n        virtual\\n        returns (bytes4 success)\\n    {\\n        // Deploy and migrate the initial features.\\n        // Order matters here.\\n\\n        // Initialize Registry.\\n        LibBootstrap.delegatecallBootstrapFunction(\\n            address(features.registry),\\n            abi.encodeWithSelector(\\n                SimpleFunctionRegistryFeature.bootstrap.selector\\n            )\\n        );\\n\\n        // Initialize OwnableFeature.\\n        LibBootstrap.delegatecallBootstrapFunction(\\n            address(features.ownable),\\n            abi.encodeWithSelector(\\n                OwnableFeature.bootstrap.selector\\n            )\\n        );\\n\\n        // De-register `SimpleFunctionRegistryFeature._extendSelf`.\\n        SimpleFunctionRegistryFeature(address(this)).rollback(\\n            SimpleFunctionRegistryFeature._extendSelf.selector,\\n            address(0)\\n        );\\n\\n        // Transfer ownership to the real owner.\\n        OwnableFeature(address(this)).transferOwnership(owner);\\n\\n        success = LibBootstrap.BOOTSTRAP_SUCCESS;\\n    }\\n\\n    /// @dev Self-destructs this contract. Only callable by this contract.\\n    /// @param ethRecipient Who to transfer outstanding ETH to.\\n    function die(address payable ethRecipient) public virtual {\\n        require(msg.sender == _implementation, \\\"InitialMigration/INVALID_SENDER\\\");\\n        selfdestruct(ethRecipient);\\n    }\\n}\\n\",\"keccak256\":\"0xc1e5e21f00e94792a0aaebdbf890a2dea133307881c31caa1c265c3f9baac444\",\"license\":\"Apache-2.0\"},\"src/zero-ex/migrations/LibBootstrap.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../contracts-utils/v06/errors/LibRichErrorsV06.sol\\\";\\nimport \\\"../errors/LibProxyRichErrors.sol\\\";\\n\\n\\nlibrary LibBootstrap {\\n\\n    /// @dev Magic bytes returned by the bootstrapper to indicate success.\\n    ///      This is `keccack('BOOTSTRAP_SUCCESS')`.\\n    bytes4 internal constant BOOTSTRAP_SUCCESS = 0xd150751b;\\n\\n    using LibRichErrorsV06 for bytes;\\n\\n    /// @dev Perform a delegatecall and ensure it returns the magic bytes.\\n    /// @param target The call target.\\n    /// @param data The call data.\\n    function delegatecallBootstrapFunction(\\n        address target,\\n        bytes memory data\\n    )\\n        internal\\n    {\\n        (bool success, bytes memory resultData) = target.delegatecall(data);\\n        if (!success ||\\n            resultData.length != 32 ||\\n            abi.decode(resultData, (bytes4)) != BOOTSTRAP_SUCCESS)\\n        {\\n            LibProxyRichErrors.BootstrapCallFailedError(target, resultData).rrevert();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe9d11f1545f5485a5754e7ab3ba9a90d0b2ff640b9fc5c5d2e41551098800e63\",\"license\":\"Apache-2.0\"},\"src/zero-ex/migrations/LibMigrate.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../contracts-utils/v06/errors/LibRichErrorsV06.sol\\\";\\nimport \\\"../errors/LibOwnableRichErrors.sol\\\";\\n\\n\\nlibrary LibMigrate {\\n\\n    /// @dev Magic bytes returned by a migrator to indicate success.\\n    ///      This is `keccack('MIGRATE_SUCCESS')`.\\n    bytes4 internal constant MIGRATE_SUCCESS = 0x2c64c5ef;\\n\\n    using LibRichErrorsV06 for bytes;\\n\\n    /// @dev Perform a delegatecall and ensure it returns the magic bytes.\\n    /// @param target The call target.\\n    /// @param data The call data.\\n    function delegatecallMigrateFunction(\\n        address target,\\n        bytes memory data\\n    )\\n        internal\\n    {\\n        (bool success, bytes memory resultData) = target.delegatecall(data);\\n        if (!success ||\\n            resultData.length != 32 ||\\n            abi.decode(resultData, (bytes4)) != MIGRATE_SUCCESS)\\n        {\\n            LibOwnableRichErrors.MigrateCallFailedError(target, resultData).rrevert();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb288d8528801eb00eb8e0645919aaa77be21ed47bdce6675a7874aaa8f8b9f73\",\"license\":\"Apache-2.0\"},\"src/zero-ex/storage/LibMetaTransactionsStorage.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./LibStorage.sol\\\";\\n\\n\\n/// @dev Storage helpers for the `MetaTransactions` feature.\\nlibrary LibMetaTransactionsStorage {\\n\\n    /// @dev Storage bucket for this feature.\\n    struct Storage {\\n        // The block number when a hash was executed.\\n        mapping (bytes32 => uint256) mtxHashToExecutedBlockNumber;\\n    }\\n\\n    /// @dev Get the storage bucket for this contract.\\n    function getStorage() internal pure returns (Storage storage stor) {\\n        uint256 storageSlot = LibStorage.getStorageSlot(\\n            LibStorage.StorageId.MetaTransactions\\n        );\\n        // Dip into assembly to change the slot pointed to by the local\\n        // variable `stor`.\\n        // See https://solidity.readthedocs.io/en/v0.6.8/assembly.html?highlight=slot#access-to-external-variables-functions-and-libraries\\n        assembly { stor_slot := storageSlot }\\n    }\\n}\\n\",\"keccak256\":\"0x2efdc5d584d54238cc3a3e553534c1617c433c0c6d3c42e0048aae116b2f7213\",\"license\":\"Apache-2.0\"},\"src/zero-ex/storage/LibNativeOrdersStorage.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./LibStorage.sol\\\";\\n\\n\\n/// @dev Storage helpers for `NativeOrdersFeature`.\\nlibrary LibNativeOrdersStorage {\\n\\n    /// @dev Storage bucket for this feature.\\n    struct Storage {\\n        // How much taker token has been filled in order.\\n        // The lower `uint128` is the taker token fill amount.\\n        // The high bit will be `1` if the order was directly cancelled.\\n        mapping(bytes32 => uint256) orderHashToTakerTokenFilledAmount;\\n        // The minimum valid order salt for a given maker and order pair (maker, taker)\\n        // for limit orders.\\n        mapping(address => mapping(address => mapping(address => uint256)))\\n            limitOrdersMakerToMakerTokenToTakerTokenToMinValidOrderSalt;\\n        // The minimum valid order salt for a given maker and order pair (maker, taker)\\n        // for RFQ orders.\\n        mapping(address => mapping(address => mapping(address => uint256)))\\n            rfqOrdersMakerToMakerTokenToTakerTokenToMinValidOrderSalt;\\n        // For a given order origin, which tx.origin addresses are allowed to\\n        // fill the order.\\n        mapping(address => mapping(address => bool)) originRegistry;\\n        // For a given maker address, which addresses are allowed to\\n        // sign on its behalf.\\n        mapping(address => mapping(address => bool)) orderSignerRegistry;\\n    }\\n\\n    /// @dev Get the storage bucket for this contract.\\n    function getStorage() internal pure returns (Storage storage stor) {\\n        uint256 storageSlot = LibStorage.getStorageSlot(\\n            LibStorage.StorageId.NativeOrders\\n        );\\n        // Dip into assembly to change the slot pointed to by the local\\n        // variable `stor`.\\n        // See https://solidity.readthedocs.io/en/v0.6.8/assembly.html?highlight=slot#access-to-external-variables-functions-and-libraries\\n        assembly { stor_slot := storageSlot }\\n    }\\n}\\n\",\"keccak256\":\"0x7e58762ce8af539cdd332a64796fb9cf0449c14a5fc033100a0cb8b72ecbbaed\",\"license\":\"Apache-2.0\"},\"src/zero-ex/storage/LibOtcOrdersStorage.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./LibStorage.sol\\\";\\n\\n\\n/// @dev Storage helpers for `OtcOrdersFeature`.\\nlibrary LibOtcOrdersStorage {\\n\\n    /// @dev Storage bucket for this feature.\\n    struct Storage {\\n        // tx origin => nonce buckets => min nonce\\n        mapping(address => mapping(uint64 => uint128)) txOriginNonces;\\n    }\\n\\n    /// @dev Get the storage bucket for this contract.\\n    function getStorage() internal pure returns (Storage storage stor) {\\n        uint256 storageSlot = LibStorage.getStorageSlot(\\n            LibStorage.StorageId.OtcOrders\\n        );\\n        // Dip into assembly to change the slot pointed to by the local\\n        // variable `stor`.\\n        // See https://solidity.readthedocs.io/en/v0.6.8/assembly.html?highlight=slot#access-to-external-variables-functions-and-libraries\\n        assembly { stor_slot := storageSlot }\\n    }\\n}\\n\",\"keccak256\":\"0x3369cd2e35e0c9d4d36216b05a58924a2684057adaa53a5229ba9328cc47e1fa\",\"license\":\"Apache-2.0\"},\"src/zero-ex/storage/LibOwnableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./LibStorage.sol\\\";\\n\\n\\n/// @dev Storage helpers for the `Ownable` feature.\\nlibrary LibOwnableStorage {\\n\\n    /// @dev Storage bucket for this feature.\\n    struct Storage {\\n        // The owner of this contract.\\n        address owner;\\n    }\\n\\n    /// @dev Get the storage bucket for this contract.\\n    function getStorage() internal pure returns (Storage storage stor) {\\n        uint256 storageSlot = LibStorage.getStorageSlot(\\n            LibStorage.StorageId.Ownable\\n        );\\n        // Dip into assembly to change the slot pointed to by the local\\n        // variable `stor`.\\n        // See https://solidity.readthedocs.io/en/v0.6.8/assembly.html?highlight=slot#access-to-external-variables-functions-and-libraries\\n        assembly { stor_slot := storageSlot }\\n    }\\n}\\n\",\"keccak256\":\"0x7254d946f49d421c0f2e801ebae4309fb9a653389680507d17e17684056946df\",\"license\":\"Apache-2.0\"},\"src/zero-ex/storage/LibProxyStorage.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./LibStorage.sol\\\";\\n\\n\\n/// @dev Storage helpers for the proxy contract.\\nlibrary LibProxyStorage {\\n\\n    /// @dev Storage bucket for proxy contract.\\n    struct Storage {\\n        // Mapping of function selector -> function implementation\\n        mapping(bytes4 => address) impls;\\n        // The owner of the proxy contract.\\n        address owner;\\n    }\\n\\n    /// @dev Get the storage bucket for this contract.\\n    function getStorage() internal pure returns (Storage storage stor) {\\n        uint256 storageSlot = LibStorage.getStorageSlot(\\n            LibStorage.StorageId.Proxy\\n        );\\n        // Dip into assembly to change the slot pointed to by the local\\n        // variable `stor`.\\n        // See https://solidity.readthedocs.io/en/v0.6.8/assembly.html?highlight=slot#access-to-external-variables-functions-and-libraries\\n        assembly { stor_slot := storageSlot }\\n    }\\n}\\n\",\"keccak256\":\"0x9bef282b33f0c609a54ff03296f857e8eccb3e82c07b1cf77afa47f77407e93a\",\"license\":\"Apache-2.0\"},\"src/zero-ex/storage/LibReentrancyGuardStorage.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./LibStorage.sol\\\";\\nimport \\\"../external/IFlashWallet.sol\\\";\\n\\n\\n/// @dev Storage helpers for the `FixinReentrancyGuard` mixin.\\nlibrary LibReentrancyGuardStorage {\\n\\n    /// @dev Storage bucket for this feature.\\n    struct Storage {\\n        // Reentrancy flags set whenever a non-reentrant function is entered\\n        // and cleared when it is exited.\\n        uint256 reentrancyFlags;\\n    }\\n\\n    /// @dev Get the storage bucket for this contract.\\n    function getStorage() internal pure returns (Storage storage stor) {\\n        uint256 storageSlot = LibStorage.getStorageSlot(\\n            LibStorage.StorageId.ReentrancyGuard\\n        );\\n        // Dip into assembly to change the slot pointed to by the local\\n        // variable `stor`.\\n        // See https://solidity.readthedocs.io/en/v0.6.8/assembly.html?highlight=slot#access-to-external-variables-functions-and-libraries\\n        assembly { stor_slot := storageSlot }\\n    }\\n}\\n\",\"keccak256\":\"0xd71325302728c1e0224ea9918cf84b2ecb45cc55a308deb492e6001e2d7c3644\",\"license\":\"Apache-2.0\"},\"src/zero-ex/storage/LibSimpleFunctionRegistryStorage.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./LibStorage.sol\\\";\\n\\n\\n/// @dev Storage helpers for the `SimpleFunctionRegistry` feature.\\nlibrary LibSimpleFunctionRegistryStorage {\\n\\n    /// @dev Storage bucket for this feature.\\n    struct Storage {\\n        // Mapping of function selector -> implementation history.\\n        mapping(bytes4 => address[]) implHistory;\\n    }\\n\\n    /// @dev Get the storage bucket for this contract.\\n    function getStorage() internal pure returns (Storage storage stor) {\\n        uint256 storageSlot = LibStorage.getStorageSlot(\\n            LibStorage.StorageId.SimpleFunctionRegistry\\n        );\\n        // Dip into assembly to change the slot pointed to by the local\\n        // variable `stor`.\\n        // See https://solidity.readthedocs.io/en/v0.6.8/assembly.html?highlight=slot#access-to-external-variables-functions-and-libraries\\n        assembly { stor_slot := storageSlot }\\n    }\\n}\\n\",\"keccak256\":\"0x87e280e0f8b15319ac02f39cdf1d67c20642cb79a87ec8c5d7a169c6a4dd9d67\",\"license\":\"Apache-2.0\"},\"src/zero-ex/storage/LibStorage.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6;\\npragma experimental ABIEncoderV2;\\n\\n\\n/// @dev Common storage helpers\\nlibrary LibStorage {\\n\\n    /// @dev What to bit-shift a storage ID by to get its slot.\\n    ///      This gives us a maximum of 2**128 inline fields in each bucket.\\n    uint256 private constant STORAGE_SLOT_EXP = 128;\\n\\n    /// @dev Storage IDs for feature storage buckets.\\n    ///      WARNING: APPEND-ONLY.\\n    enum StorageId {\\n        Proxy,\\n        SimpleFunctionRegistry,\\n        Ownable,\\n        TokenSpender,\\n        TransformERC20,\\n        MetaTransactions,\\n        ReentrancyGuard,\\n        NativeOrders,\\n        OtcOrders,\\n        ERC721Orders,\\n        ERC1155Orders\\n    }\\n\\n    /// @dev Get the storage slot given a storage ID. We assign unique, well-spaced\\n    ///     slots to storage bucket variables to ensure they do not overlap.\\n    ///     See: https://solidity.readthedocs.io/en/v0.6.6/assembly.html#access-to-external-variables-functions-and-libraries\\n    /// @param storageId An entry in `StorageId`\\n    /// @return slot The storage slot.\\n    function getStorageSlot(StorageId storageId)\\n        internal\\n        pure\\n        returns (uint256 slot)\\n    {\\n        // This should never overflow with a reasonable `STORAGE_SLOT_EXP`\\n        // because Solidity will do a range check on `storageId` during the cast.\\n        return (uint256(storageId) + 1) << STORAGE_SLOT_EXP;\\n    }\\n}\\n\",\"keccak256\":\"0x5a61030137df3fb640d208bd143d601e6ea718f21f552121b37df3dad043bcbb\",\"license\":\"Apache-2.0\"},\"src/zero-ex/storage/LibTransformERC20Storage.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./LibStorage.sol\\\";\\nimport \\\"../external/IFlashWallet.sol\\\";\\n\\n\\n/// @dev Storage helpers for the `TransformERC20` feature.\\nlibrary LibTransformERC20Storage {\\n\\n    /// @dev Storage bucket for this feature.\\n    struct Storage {\\n        // The current wallet instance.\\n        IFlashWallet wallet;\\n        // The transformer deployer address.\\n        address transformerDeployer;\\n        // The optional signer for `transformERC20()` calldata.\\n        address quoteSigner;\\n    }\\n\\n    /// @dev Get the storage bucket for this contract.\\n    function getStorage() internal pure returns (Storage storage stor) {\\n        uint256 storageSlot = LibStorage.getStorageSlot(\\n            LibStorage.StorageId.TransformERC20\\n        );\\n        // Dip into assembly to change the slot pointed to by the local\\n        // variable `stor`.\\n        // See https://solidity.readthedocs.io/en/v0.6.8/assembly.html?highlight=slot#access-to-external-variables-functions-and-libraries\\n        assembly { stor_slot := storageSlot }\\n    }\\n}\\n\",\"keccak256\":\"0x63f22ec24fbe0def06ab1ec96d4b79959a8e1de1e0bec24322e783111ce6b160\",\"license\":\"Apache-2.0\"},\"src/zero-ex/transformers/IERC20Transformer.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../contracts-erc20/v06/IERC20TokenV06.sol\\\";\\n\\n\\n/// @dev A transformation callback used in `TransformERC20.transformERC20()`.\\ninterface IERC20Transformer {\\n\\n    /// @dev Context information to pass into `transform()` by `TransformERC20.transformERC20()`.\\n    struct TransformContext {\\n        // The caller of `TransformERC20.transformERC20()`.\\n        address payable sender;\\n        // The recipient address, which may be distinct from `sender` e.g. in\\n        // meta-transactions.\\n        address payable recipient;\\n        // Arbitrary data to pass to the transformer.\\n        bytes data;\\n    }\\n\\n    /// @dev Called from `TransformERC20.transformERC20()`. This will be\\n    ///      delegatecalled in the context of the FlashWallet instance being used.\\n    /// @param context Context information.\\n    /// @return success The success bytes (`LibERC20Transformer.TRANSFORMER_SUCCESS`).\\n    function transform(TransformContext calldata context)\\n        external\\n        returns (bytes4 success);\\n}\\n\",\"keccak256\":\"0xbd47484b12b46605e510975fbddefc78be3b2b31ca7e767c6ed5784ed17658de\",\"license\":\"Apache-2.0\"},\"src/zero-ex/transformers/LibERC20Transformer.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../contracts-erc20/v06/IERC20TokenV06.sol\\\";\\nimport \\\"../../contracts-erc20/v06/LibERC20TokenV06.sol\\\";\\n\\n\\nlibrary LibERC20Transformer {\\n\\n    using LibERC20TokenV06 for IERC20TokenV06;\\n\\n    /// @dev ETH pseudo-token address.\\n    address constant internal ETH_TOKEN_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    /// @dev ETH pseudo-token.\\n    IERC20TokenV06 constant internal ETH_TOKEN = IERC20TokenV06(ETH_TOKEN_ADDRESS);\\n    /// @dev Return value indicating success in `IERC20Transformer.transform()`.\\n    ///      This is just `keccak256('TRANSFORMER_SUCCESS')`.\\n    bytes4 constant internal TRANSFORMER_SUCCESS = 0x13c9929e;\\n\\n    /// @dev Transfer ERC20 tokens and ETH.\\n    /// @param token An ERC20 or the ETH pseudo-token address (`ETH_TOKEN_ADDRESS`).\\n    /// @param to The recipient.\\n    /// @param amount The transfer amount.\\n    function transformerTransfer(\\n        IERC20TokenV06 token,\\n        address payable to,\\n        uint256 amount\\n    )\\n        internal\\n    {\\n        if (isTokenETH(token)) {\\n            to.transfer(amount);\\n        } else {\\n            token.compatTransfer(to, amount);\\n        }\\n    }\\n\\n    /// @dev Check if a token is the ETH pseudo-token.\\n    /// @param token The token to check.\\n    /// @return isETH `true` if the token is the ETH pseudo-token.\\n    function isTokenETH(IERC20TokenV06 token)\\n        internal\\n        pure\\n        returns (bool isETH)\\n    {\\n        return address(token) == ETH_TOKEN_ADDRESS;\\n    }\\n\\n    /// @dev Check the balance of an ERC20 token or ETH.\\n    /// @param token An ERC20 or the ETH pseudo-token address (`ETH_TOKEN_ADDRESS`).\\n    /// @param owner Holder of the tokens.\\n    /// @return tokenBalance The balance of `owner`.\\n    function getTokenBalanceOf(IERC20TokenV06 token, address owner)\\n        internal\\n        view\\n        returns (uint256 tokenBalance)\\n    {\\n        if (isTokenETH(token)) {\\n            return owner.balance;\\n        }\\n        return token.balanceOf(owner);\\n    }\\n\\n    /// @dev RLP-encode a 32-bit or less account nonce.\\n    /// @param nonce A positive integer in the range 0 <= nonce < 2^32.\\n    /// @return rlpNonce The RLP encoding.\\n    function rlpEncodeNonce(uint32 nonce)\\n        internal\\n        pure\\n        returns (bytes memory rlpNonce)\\n    {\\n        // See https://github.com/ethereum/wiki/wiki/RLP for RLP encoding rules.\\n        if (nonce == 0) {\\n            rlpNonce = new bytes(1);\\n            rlpNonce[0] = 0x80;\\n        } else if (nonce < 0x80) {\\n            rlpNonce = new bytes(1);\\n            rlpNonce[0] = byte(uint8(nonce));\\n        } else if (nonce <= 0xFF) {\\n            rlpNonce = new bytes(2);\\n            rlpNonce[0] = 0x81;\\n            rlpNonce[1] = byte(uint8(nonce));\\n        } else if (nonce <= 0xFFFF) {\\n            rlpNonce = new bytes(3);\\n            rlpNonce[0] = 0x82;\\n            rlpNonce[1] = byte(uint8((nonce & 0xFF00) >> 8));\\n            rlpNonce[2] = byte(uint8(nonce));\\n        } else if (nonce <= 0xFFFFFF) {\\n            rlpNonce = new bytes(4);\\n            rlpNonce[0] = 0x83;\\n            rlpNonce[1] = byte(uint8((nonce & 0xFF0000) >> 16));\\n            rlpNonce[2] = byte(uint8((nonce & 0xFF00) >> 8));\\n            rlpNonce[3] = byte(uint8(nonce));\\n        } else {\\n            rlpNonce = new bytes(5);\\n            rlpNonce[0] = 0x84;\\n            rlpNonce[1] = byte(uint8((nonce & 0xFF000000) >> 24));\\n            rlpNonce[2] = byte(uint8((nonce & 0xFF0000) >> 16));\\n            rlpNonce[3] = byte(uint8((nonce & 0xFF00) >> 8));\\n            rlpNonce[4] = byte(uint8(nonce));\\n        }\\n    }\\n\\n    /// @dev Compute the expected deployment address by `deployer` at\\n    ///      the nonce given by `deploymentNonce`.\\n    /// @param deployer The address of the deployer.\\n    /// @param deploymentNonce The nonce that the deployer had when deploying\\n    ///        a contract.\\n    /// @return deploymentAddress The deployment address.\\n    function getDeployedAddress(address deployer, uint32 deploymentNonce)\\n        internal\\n        pure\\n        returns (address payable deploymentAddress)\\n    {\\n        // The address of if a deployed contract is the lower 20 bytes of the\\n        // hash of the RLP-encoded deployer's account address + account nonce.\\n        // See: https://ethereum.stackexchange.com/questions/760/how-is-the-address-of-an-ethereum-contract-computed\\n        bytes memory rlpNonce = rlpEncodeNonce(deploymentNonce);\\n        return address(uint160(uint256(keccak256(abi.encodePacked(\\n            byte(uint8(0xC0 + 21 + rlpNonce.length)),\\n            byte(uint8(0x80 + 20)),\\n            deployer,\\n            rlpNonce\\n        )))));\\n    }\\n}\\n\",\"keccak256\":\"0xa4533853a830b2d85b30811f7e9ea0053dda0459e8da3aee3b403ffd3e23d03c\",\"license\":\"Apache-2.0\"},\"src/zero-ex/vendor/v3/IStaking.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\ninterface IStaking {\\n    function joinStakingPoolAsMaker(bytes32) external;\\n    function payProtocolFee(address, address, uint256) external payable;\\n}\\n\",\"keccak256\":\"0x5163bb5b49c2ac66f51f4bcf5873c592c3bbb38985884e23b4cd965a05c0a050\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c8063329798a4146100515780635f136a4a1461007a578063b3d3173514610082578063c9353cb51461008a575b600080fd5b61006461005f36600461077a565b61009f565b604051610071919061088e565b60405180910390f35b6100646102e7565b61006461030b565b61009d610098366004610757565b610327565b005b60003373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610119576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161011090610987565b60405180910390fd5b600054604080518082018252855173ffffffffffffffffffffffffffffffffffffffff908116825260208088015182169083015291517fa23ce6ce000000000000000000000000000000000000000000000000000000008152919092169163a23ce6ce9161018e9130918991906004016108af565b602060405180830381600087803b1580156101a857600080fd5b505af11580156101bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101e09190610872565b506101ec848484610379565b6040517ff2fde38b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85169063f2fde38b9061023e90889060040161088e565b600060405180830381600087803b15801561025857600080fd5b505af115801561026c573d6000803e3d6000fd5b50506040517fc9353cb500000000000000000000000000000000000000000000000000000000815230925063c9353cb591506102ac90889060040161088e565b600060405180830381600087803b1580156102c657600080fd5b505af11580156102da573d6000803e3d6000fd5b5095979650505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60005473ffffffffffffffffffffffffffffffffffffffff1690565b333014610360576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161011090610987565b8073ffffffffffffffffffffffffffffffffffffffff16ff5b60008390508073ffffffffffffffffffffffffffffffffffffffff1663261fe679846040015163ce5494bb60e01b85600001516040516024016103bc919061088e565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009485161790525160e085901b909216825261044f929130906004016108ee565b600060405180830381600087803b15801561046957600080fd5b505af115801561047d573d6000803e3d6000fd5b50505060608401516040805160048082526024820183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f8fd3ab800000000000000000000000000000000000000000000000000000000017905291517f261fe67900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8616945063261fe6799361052f939092913091016108ee565b600060405180830381600087803b15801561054957600080fd5b505af115801561055d573d6000803e3d6000fd5b50505060808401516040805160048082526024820183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f8fd3ab800000000000000000000000000000000000000000000000000000000017905291517f261fe67900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8616945063261fe6799361060f939092913091016108ee565b600060405180830381600087803b15801561062957600080fd5b505af115801561063d573d6000803e3d6000fd5b50505060a08401516040805160048082526024820183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f8fd3ab800000000000000000000000000000000000000000000000000000000017905291517f261fe67900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8616945063261fe679936106ef939092913091016108ee565b600060405180830381600087803b15801561070957600080fd5b505af115801561071d573d6000803e3d6000fd5b5050505050505050565b600060208284031215610738578081fd5b61074260206109be565b9050813561074f816109e5565b815292915050565b600060208284031215610768578081fd5b8135610773816109e5565b9392505050565b600080600080848603610120811215610791578384fd5b853561079c816109e5565b945060208601356107ac816109e5565b935060c07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0820112156107dd578283fd5b506107e860c06109be565b60408601356107f6816109e5565b81526060860135610806816109e5565b60208201526080860135610819816109e5565b604082015260a086013561082c816109e5565b606082015260c086013561083f816109e5565b608082015260e0860135610852816109e5565b60a08201529150610867866101008701610727565b905092959194509250565b600060208284031215610883578081fd5b8151610773816109e5565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff93841681529183166020808401919091528151841660408401520151909116606082015260800190565b600073ffffffffffffffffffffffffffffffffffffffff808616835260206060818501528551806060860152835b818110156109385787810183015186820160800152820161091c565b818111156109495784608083880101525b509490911660408401525050601f919091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160160800192915050565b6020808252601c908201527f46756c6c4d6967726174696f6e2f494e56414c49445f53454e44455200000000604082015260600190565b60405181810167ffffffffffffffff811182821017156109dd57600080fd5b604052919050565b73ffffffffffffffffffffffffffffffffffffffff81168114610a0757600080fd5b5056fea2646970667358221220d15f9288a526472b7e7e840b03f2edd4be13ee9f72d542b11dd8211281898c9a64736f6c634300060c0033",
  "devdoc": {
    "details": "A contract for deploying and configuring the full ZeroEx contract.",
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Instantiate this contract and set the allowed caller of `initializeZeroEx()`      to `initializeCaller`.",
        "params": {
          "initializeCaller_": "The allowed caller of `initializeZeroEx()`."
        }
      },
      "die(address)": {
        "details": "Destroy this contract. Only callable from ourselves (from `initializeZeroEx()`).",
        "params": {
          "ethRecipient": "Receiver of any ETH in this contract."
        }
      },
      "getBootstrapper()": {
        "details": "Retrieve the bootstrapper address to use when constructing `ZeroEx`.",
        "returns": {
          "bootstrapper": "The bootstrapper address."
        }
      },
      "migrateZeroEx(address,address,(address,address,address,address,address,address),(address))": {
        "details": "Initialize the `ZeroEx` contract with the full feature set,      transfer ownership to `owner`, then self-destruct.",
        "params": {
          "features": "Features to add to the proxy.",
          "migrateOpts": "Parameters needed to initialize features.",
          "owner": "The owner of the contract.",
          "zeroEx": "The instance of the ZeroEx contract. ZeroEx should        been constructed with this contract as the bootstrapper."
        },
        "returns": {
          "_zeroEx": "The configured ZeroEx contract. Same as the `zeroEx` parameter."
        }
      }
    },
    "stateVariables": {
      "_initialMigration": {
        "details": "The initial migration contract."
      },
      "initializeCaller": {
        "details": "The allowed caller of `initializeZeroEx()`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 28429,
        "contract": "src/zero-ex/migrations/FullMigration.sol:FullMigration",
        "label": "_initialMigration",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(InitialMigration)28843"
      }
    ],
    "types": {
      "t_contract(InitialMigration)28843": {
        "encoding": "inplace",
        "label": "contract InitialMigration",
        "numberOfBytes": "20"
      }
    }
  }
}