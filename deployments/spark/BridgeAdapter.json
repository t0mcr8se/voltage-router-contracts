{
  "address": "0x0969505802e87D5c5763bF5C7D09058D01bEFfC4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IEtherTokenV06",
          "name": "weth",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "source",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20TokenV06",
          "name": "inputToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20TokenV06",
          "name": "outputToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "inputTokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "outputTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "BridgeFill",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BANCOR_ETH_ADDRESS",
      "outputs": [
        {
          "internalType": "contract IERC20TokenV06",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20TokenV06",
          "name": "buyToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "sellAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "bridgeData",
          "type": "bytes"
        }
      ],
      "name": "_tradeGMX",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "boughtAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20TokenV06",
          "name": "buyToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "sellAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "bridgeData",
          "type": "bytes"
        }
      ],
      "name": "_tradePlatypus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "boughtAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "source",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "takerTokenAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "makerTokenAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "bridgeData",
              "type": "bytes"
            }
          ],
          "internalType": "struct IBridgeAdapter.BridgeOrder",
          "name": "order",
          "type": "tuple"
        },
        {
          "internalType": "contract IERC20TokenV06",
          "name": "sellToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20TokenV06",
          "name": "buyToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "sellAmount",
          "type": "uint256"
        }
      ],
      "name": "trade",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "boughtAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x371f84616cfb06f84b3371f44feca4f4d5c82c8fb047af114704c36790132f1e",
  "receipt": {
    "to": null,
    "from": "0x560215A59247d47Bd949786DE7A7561bcc1E43ED",
    "contractAddress": "0x0969505802e87D5c5763bF5C7D09058D01bEFfC4",
    "transactionIndex": 0,
    "gasUsed": "5269227",
    "logsBloom": "0x
    "blockHash": "0xcc56bde7e2b771843d402acdbd151e67c423aa5c8239f3a7d9a3d1e35cc770d2",
    "transactionHash": "0x371f84616cfb06f84b3371f44feca4f4d5c82c8fb047af114704c36790132f1e",
    "logs": [],
    "blockNumber": 9477412,
    "cumulativeGasUsed": "5269227",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0BE9e53fd7EDaC9F859882AfdDa116645287C629"
  ],
  "numDeployments": 1,
  "solcInputHash": "d824bfd18a929a7d770611c578d2def3",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IEtherTokenV06\",\"name\":\"weth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"source\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"contract IERC20TokenV06\",\"name\":\"inputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20TokenV06\",\"name\":\"outputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inputTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outputTokenAmount\",\"type\":\"uint256\"}],\"name\":\"BridgeFill\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BANCOR_ETH_ADDRESS\",\"outputs\":[{\"internalType\":\"contract IERC20TokenV06\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20TokenV06\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"bridgeData\",\"type\":\"bytes\"}],\"name\":\"_tradeGMX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"boughtAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20TokenV06\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"bridgeData\",\"type\":\"bytes\"}],\"name\":\"_tradePlatypus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"boughtAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"source\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"takerTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"makerTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"bridgeData\",\"type\":\"bytes\"}],\"internalType\":\"struct IBridgeAdapter.BridgeOrder\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"contract IERC20TokenV06\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20TokenV06\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"}],\"name\":\"trade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"boughtAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/zero-ex/transformers/bridges/BridgeAdapter.sol\":\"BridgeAdapter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"src/contracts-erc20/v06/IERC20TokenV06.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\ninterface IERC20TokenV06 {\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @dev send `value` token to `to` from `msg.sender`\\n    /// @param to The address of the recipient\\n    /// @param value The amount of token to be transferred\\n    /// @return True if transfer was successful\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\\n    /// @param from The address of the sender\\n    /// @param to The address of the recipient\\n    /// @param value The amount of token to be transferred\\n    /// @return True if transfer was successful\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n\\n    /// @dev `msg.sender` approves `spender` to spend `value` tokens\\n    /// @param spender The address of the account able to transfer the tokens\\n    /// @param value The amount of wei to be approved for transfer\\n    /// @return Always true if the call has enough gas to complete execution\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /// @dev Query total supply of token\\n    /// @return Total supply of token\\n    function totalSupply() external view returns (uint256);\\n\\n    /// @dev Get the balance of `owner`.\\n    /// @param owner The address from which the balance will be retrieved\\n    /// @return Balance of owner\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    /// @dev Get the allowance for `spender` to spend from `owner`.\\n    /// @param owner The address of the account owning tokens\\n    /// @param spender The address of the account able to transfer the tokens\\n    /// @return Amount of remaining tokens allowed to spent\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /// @dev Get the number of decimals this token has.\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x738fc3ee22931305f16e783b286180c32f6c6390ebbeb86b8b28b4f2715e9805\",\"license\":\"Apache-2.0\"},\"src/contracts-erc20/v06/IEtherTokenV06.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\nimport \\\"./IERC20TokenV06.sol\\\";\\n\\ninterface IEtherTokenV06 is IERC20TokenV06 {\\n    /// @dev Wrap ether.\\n    function deposit() external payable;\\n\\n    /// @dev Unwrap ether.\\n    function withdraw(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x23b6a0e4f6dbed58ab37e6450e0789b6fc30c63ea51670f1924ee4a4d15a9102\",\"license\":\"Apache-2.0\"},\"src/contracts-erc20/v06/LibERC20TokenV06.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\nimport \\\"../../contracts-utils/v06/errors/LibRichErrorsV06.sol\\\";\\nimport \\\"../../contracts-utils/v06/LibBytesV06.sol\\\";\\nimport \\\"./IERC20TokenV06.sol\\\";\\n\\nlibrary LibERC20TokenV06 {\\n    bytes private constant DECIMALS_CALL_DATA = hex\\\"313ce567\\\";\\n\\n    /// @dev Calls `IERC20TokenV06(token).approve()`.\\n    ///      Reverts if the return data is invalid or the call reverts.\\n    /// @param token The address of the token contract.\\n    /// @param spender The address that receives an allowance.\\n    /// @param allowance The allowance to set.\\n    function compatApprove(IERC20TokenV06 token, address spender, uint256 allowance) internal {\\n        bytes memory callData = abi.encodeWithSelector(token.approve.selector, spender, allowance);\\n        _callWithOptionalBooleanResult(address(token), callData);\\n    }\\n\\n    /// @dev Calls `IERC20TokenV06(token).approve()` and sets the allowance to the\\n    ///      maximum if the current approval is not already >= an amount.\\n    ///      Reverts if the return data is invalid or the call reverts.\\n    /// @param token The address of the token contract.\\n    /// @param spender The address that receives an allowance.\\n    /// @param amount The minimum allowance needed.\\n    function approveIfBelow(IERC20TokenV06 token, address spender, uint256 amount) internal {\\n        if (token.allowance(address(this), spender) < amount) {\\n            compatApprove(token, spender, uint256(-1));\\n        }\\n    }\\n\\n    /// @dev Calls `IERC20TokenV06(token).transfer()`.\\n    ///      Reverts if the return data is invalid or the call reverts.\\n    /// @param token The address of the token contract.\\n    /// @param to The address that receives the tokens\\n    /// @param amount Number of tokens to transfer.\\n    function compatTransfer(IERC20TokenV06 token, address to, uint256 amount) internal {\\n        bytes memory callData = abi.encodeWithSelector(token.transfer.selector, to, amount);\\n        _callWithOptionalBooleanResult(address(token), callData);\\n    }\\n\\n    /// @dev Calls `IERC20TokenV06(token).transferFrom()`.\\n    ///      Reverts if the return data is invalid or the call reverts.\\n    /// @param token The address of the token contract.\\n    /// @param from The owner of the tokens.\\n    /// @param to The address that receives the tokens\\n    /// @param amount Number of tokens to transfer.\\n    function compatTransferFrom(IERC20TokenV06 token, address from, address to, uint256 amount) internal {\\n        bytes memory callData = abi.encodeWithSelector(token.transferFrom.selector, from, to, amount);\\n        _callWithOptionalBooleanResult(address(token), callData);\\n    }\\n\\n    /// @dev Retrieves the number of decimals for a token.\\n    ///      Returns `18` if the call reverts.\\n    /// @param token The address of the token contract.\\n    /// @return tokenDecimals The number of decimals places for the token.\\n    function compatDecimals(IERC20TokenV06 token) internal view returns (uint8 tokenDecimals) {\\n        tokenDecimals = 18;\\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(DECIMALS_CALL_DATA);\\n        if (didSucceed && resultData.length >= 32) {\\n            tokenDecimals = uint8(LibBytesV06.readUint256(resultData, 0));\\n        }\\n    }\\n\\n    /// @dev Retrieves the allowance for a token, owner, and spender.\\n    ///      Returns `0` if the call reverts.\\n    /// @param token The address of the token contract.\\n    /// @param owner The owner of the tokens.\\n    /// @param spender The address the spender.\\n    /// @return allowance_ The allowance for a token, owner, and spender.\\n    function compatAllowance(\\n        IERC20TokenV06 token,\\n        address owner,\\n        address spender\\n    ) internal view returns (uint256 allowance_) {\\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\\n            abi.encodeWithSelector(token.allowance.selector, owner, spender)\\n        );\\n        if (didSucceed && resultData.length >= 32) {\\n            allowance_ = LibBytesV06.readUint256(resultData, 0);\\n        }\\n    }\\n\\n    /// @dev Retrieves the balance for a token owner.\\n    ///      Returns `0` if the call reverts.\\n    /// @param token The address of the token contract.\\n    /// @param owner The owner of the tokens.\\n    /// @return balance The token balance of an owner.\\n    function compatBalanceOf(IERC20TokenV06 token, address owner) internal view returns (uint256 balance) {\\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\\n            abi.encodeWithSelector(token.balanceOf.selector, owner)\\n        );\\n        if (didSucceed && resultData.length >= 32) {\\n            balance = LibBytesV06.readUint256(resultData, 0);\\n        }\\n    }\\n\\n    /// @dev Executes a call on address `target` with calldata `callData`\\n    ///      and asserts that either nothing was returned or a single boolean\\n    ///      was returned equal to `true`.\\n    /// @param target The call target.\\n    /// @param callData The abi-encoded call data.\\n    function _callWithOptionalBooleanResult(address target, bytes memory callData) private {\\n        (bool didSucceed, bytes memory resultData) = target.call(callData);\\n        // Revert if the call reverted.\\n        if (!didSucceed) {\\n            LibRichErrorsV06.rrevert(resultData);\\n        }\\n        // If we get back 0 returndata, this may be a non-standard ERC-20 that\\n        // does not return a boolean. Check that it at least contains code.\\n        if (resultData.length == 0) {\\n            uint256 size;\\n            assembly {\\n                size := extcodesize(target)\\n            }\\n            require(size > 0, \\\"invalid token address, contains no code\\\");\\n            return;\\n        }\\n        // If we get back at least 32 bytes, we know the target address\\n        // contains code, and we assume it is a token that returned a boolean\\n        // success value, which must be true.\\n        if (resultData.length >= 32) {\\n            uint256 result = LibBytesV06.readUint256(resultData, 0);\\n            if (result == 1) {\\n                return;\\n            } else {\\n                LibRichErrorsV06.rrevert(resultData);\\n            }\\n        }\\n        // If 0 < returndatasize < 32, the target is a contract, but not a\\n        // valid token.\\n        LibRichErrorsV06.rrevert(resultData);\\n    }\\n}\\n\",\"keccak256\":\"0xa904656f8c2774bde8392caa9f9cce0c0ede27efa42a106968a7106be3ea3a50\",\"license\":\"Apache-2.0\"},\"src/contracts-utils/v06/LibBytesV06.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\nimport \\\"./errors/LibBytesRichErrorsV06.sol\\\";\\nimport \\\"./errors/LibRichErrorsV06.sol\\\";\\n\\nlibrary LibBytesV06 {\\n    using LibBytesV06 for bytes;\\n\\n    /// @dev Gets the memory address for a byte array.\\n    /// @param input Byte array to lookup.\\n    /// @return memoryAddress Memory address of byte array. This\\n    ///         points to the header of the byte array which contains\\n    ///         the length.\\n    function rawAddress(bytes memory input) internal pure returns (uint256 memoryAddress) {\\n        assembly {\\n            memoryAddress := input\\n        }\\n        return memoryAddress;\\n    }\\n\\n    /// @dev Gets the memory address for the contents of a byte array.\\n    /// @param input Byte array to lookup.\\n    /// @return memoryAddress Memory address of the contents of the byte array.\\n    function contentAddress(bytes memory input) internal pure returns (uint256 memoryAddress) {\\n        assembly {\\n            memoryAddress := add(input, 32)\\n        }\\n        return memoryAddress;\\n    }\\n\\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\\n    /// @param dest memory address to copy bytes to.\\n    /// @param source memory address to copy bytes from.\\n    /// @param length number of bytes to copy.\\n    function memCopy(uint256 dest, uint256 source, uint256 length) internal pure {\\n        if (length < 32) {\\n            // Handle a partial word by reading destination and masking\\n            // off the bits we are interested in.\\n            // This correctly handles overlap, zero lengths and source == dest\\n            assembly {\\n                let mask := sub(exp(256, sub(32, length)), 1)\\n                let s := and(mload(source), not(mask))\\n                let d := and(mload(dest), mask)\\n                mstore(dest, or(s, d))\\n            }\\n        } else {\\n            // Skip the O(length) loop when source == dest.\\n            if (source == dest) {\\n                return;\\n            }\\n\\n            // For large copies we copy whole words at a time. The final\\n            // word is aligned to the end of the range (instead of after the\\n            // previous) to handle partial words. So a copy will look like this:\\n            //\\n            //  ####\\n            //      ####\\n            //          ####\\n            //            ####\\n            //\\n            // We handle overlap in the source and destination range by\\n            // changing the copying direction. This prevents us from\\n            // overwriting parts of source that we still need to copy.\\n            //\\n            // This correctly handles source == dest\\n            //\\n            if (source > dest) {\\n                assembly {\\n                    // We subtract 32 from `sEnd` and `dEnd` because it\\n                    // is easier to compare with in the loop, and these\\n                    // are also the addresses we need for copying the\\n                    // last bytes.\\n                    length := sub(length, 32)\\n                    let sEnd := add(source, length)\\n                    let dEnd := add(dest, length)\\n\\n                    // Remember the last 32 bytes of source\\n                    // This needs to be done here and not after the loop\\n                    // because we may have overwritten the last bytes in\\n                    // source already due to overlap.\\n                    let last := mload(sEnd)\\n\\n                    // Copy whole words front to back\\n                    // Note: the first check is always true,\\n                    // this could have been a do-while loop.\\n                    for {\\n\\n                    } lt(source, sEnd) {\\n\\n                    } {\\n                        mstore(dest, mload(source))\\n                        source := add(source, 32)\\n                        dest := add(dest, 32)\\n                    }\\n\\n                    // Write the last 32 bytes\\n                    mstore(dEnd, last)\\n                }\\n            } else {\\n                assembly {\\n                    // We subtract 32 from `sEnd` and `dEnd` because those\\n                    // are the starting points when copying a word at the end.\\n                    length := sub(length, 32)\\n                    let sEnd := add(source, length)\\n                    let dEnd := add(dest, length)\\n\\n                    // Remember the first 32 bytes of source\\n                    // This needs to be done here and not after the loop\\n                    // because we may have overwritten the first bytes in\\n                    // source already due to overlap.\\n                    let first := mload(source)\\n\\n                    // Copy whole words back to front\\n                    // We use a signed comparisson here to allow dEnd to become\\n                    // negative (happens when source and dest < 32). Valid\\n                    // addresses in local memory will never be larger than\\n                    // 2**255, so they can be safely re-interpreted as signed.\\n                    // Note: the first check is always true,\\n                    // this could have been a do-while loop.\\n                    for {\\n\\n                    } slt(dest, dEnd) {\\n\\n                    } {\\n                        mstore(dEnd, mload(sEnd))\\n                        sEnd := sub(sEnd, 32)\\n                        dEnd := sub(dEnd, 32)\\n                    }\\n\\n                    // Write the first 32 bytes\\n                    mstore(dest, first)\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns a slices from a byte array.\\n    /// @param b The byte array to take a slice from.\\n    /// @param from The starting index for the slice (inclusive).\\n    /// @param to The final index for the slice (exclusive).\\n    /// @return result The slice containing bytes at indices [from, to)\\n    function slice(bytes memory b, uint256 from, uint256 to) internal pure returns (bytes memory result) {\\n        // Ensure that the from and to positions are valid positions for a slice within\\n        // the byte array that is being used.\\n        if (from > to) {\\n            LibRichErrorsV06.rrevert(\\n                LibBytesRichErrorsV06.InvalidByteOperationError(\\n                    LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\\n                    from,\\n                    to\\n                )\\n            );\\n        }\\n        if (to > b.length) {\\n            LibRichErrorsV06.rrevert(\\n                LibBytesRichErrorsV06.InvalidByteOperationError(\\n                    LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\\n                    to,\\n                    b.length\\n                )\\n            );\\n        }\\n\\n        // Create a new bytes structure and copy contents\\n        result = new bytes(to - from);\\n        memCopy(result.contentAddress(), b.contentAddress() + from, result.length);\\n        return result;\\n    }\\n\\n    /// @dev Returns a slice from a byte array without preserving the input.\\n    ///      When `from == 0`, the original array will match the slice.\\n    ///      In other cases its state will be corrupted.\\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\\n    /// @param from The starting index for the slice (inclusive).\\n    /// @param to The final index for the slice (exclusive).\\n    /// @return result The slice containing bytes at indices [from, to)\\n    function sliceDestructive(bytes memory b, uint256 from, uint256 to) internal pure returns (bytes memory result) {\\n        // Ensure that the from and to positions are valid positions for a slice within\\n        // the byte array that is being used.\\n        if (from > to) {\\n            LibRichErrorsV06.rrevert(\\n                LibBytesRichErrorsV06.InvalidByteOperationError(\\n                    LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\\n                    from,\\n                    to\\n                )\\n            );\\n        }\\n        if (to > b.length) {\\n            LibRichErrorsV06.rrevert(\\n                LibBytesRichErrorsV06.InvalidByteOperationError(\\n                    LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\\n                    to,\\n                    b.length\\n                )\\n            );\\n        }\\n\\n        // Create a new bytes structure around [from, to) in-place.\\n        assembly {\\n            result := add(b, from)\\n            mstore(result, sub(to, from))\\n        }\\n        return result;\\n    }\\n\\n    /// @dev Pops the last byte off of a byte array by modifying its length.\\n    /// @param b Byte array that will be modified.\\n    /// @return result The byte that was popped off.\\n    function popLastByte(bytes memory b) internal pure returns (bytes1 result) {\\n        if (b.length == 0) {\\n            LibRichErrorsV06.rrevert(\\n                LibBytesRichErrorsV06.InvalidByteOperationError(\\n                    LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanZeroRequired,\\n                    b.length,\\n                    0\\n                )\\n            );\\n        }\\n\\n        // Store last byte.\\n        result = b[b.length - 1];\\n\\n        assembly {\\n            // Decrement length of byte array.\\n            let newLen := sub(mload(b), 1)\\n            mstore(b, newLen)\\n        }\\n        return result;\\n    }\\n\\n    /// @dev Tests equality of two byte arrays.\\n    /// @param lhs First byte array to compare.\\n    /// @param rhs Second byte array to compare.\\n    /// @return equal True if arrays are the same. False otherwise.\\n    function equals(bytes memory lhs, bytes memory rhs) internal pure returns (bool equal) {\\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\\n        // We early exit on unequal lengths, but keccak would also correctly\\n        // handle this.\\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\\n    }\\n\\n    /// @dev Reads an address from a position in a byte array.\\n    /// @param b Byte array containing an address.\\n    /// @param index Index in byte array of address.\\n    /// @return result address from byte array.\\n    function readAddress(bytes memory b, uint256 index) internal pure returns (address result) {\\n        if (b.length < index + 20) {\\n            LibRichErrorsV06.rrevert(\\n                LibBytesRichErrorsV06.InvalidByteOperationError(\\n                    LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\\n                    b.length,\\n                    index + 20 // 20 is length of address\\n                )\\n            );\\n        }\\n\\n        // Add offset to index:\\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\\n        index += 20;\\n\\n        // Read address from array memory\\n        assembly {\\n            // 1. Add index to address of bytes array\\n            // 2. Load 32-byte word from memory\\n            // 3. Apply 20-byte mask to obtain address\\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\\n        }\\n        return result;\\n    }\\n\\n    /// @dev Writes an address into a specific position in a byte array.\\n    /// @param b Byte array to insert address into.\\n    /// @param index Index in byte array of address.\\n    /// @param input Address to put into byte array.\\n    function writeAddress(bytes memory b, uint256 index, address input) internal pure {\\n        if (b.length < index + 20) {\\n            LibRichErrorsV06.rrevert(\\n                LibBytesRichErrorsV06.InvalidByteOperationError(\\n                    LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\\n                    b.length,\\n                    index + 20 // 20 is length of address\\n                )\\n            );\\n        }\\n\\n        // Add offset to index:\\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\\n        index += 20;\\n\\n        // Store address into array memory\\n        assembly {\\n            // The address occupies 20 bytes and mstore stores 32 bytes.\\n            // First fetch the 32-byte word where we'll be storing the address, then\\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\\n\\n            // 1. Add index to address of bytes array\\n            // 2. Load 32-byte word from memory\\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\\n            let neighbors := and(\\n                mload(add(b, index)),\\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\\n            )\\n\\n            // Make sure input address is clean.\\n            // (Solidity does not guarantee this)\\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\\n\\n            // Store the neighbors and address into memory\\n            mstore(add(b, index), xor(input, neighbors))\\n        }\\n    }\\n\\n    /// @dev Reads a bytes32 value from a position in a byte array.\\n    /// @param b Byte array containing a bytes32 value.\\n    /// @param index Index in byte array of bytes32 value.\\n    /// @return result bytes32 value from byte array.\\n    function readBytes32(bytes memory b, uint256 index) internal pure returns (bytes32 result) {\\n        if (b.length < index + 32) {\\n            LibRichErrorsV06.rrevert(\\n                LibBytesRichErrorsV06.InvalidByteOperationError(\\n                    LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\\n                    b.length,\\n                    index + 32\\n                )\\n            );\\n        }\\n\\n        // Arrays are prefixed by a 256 bit length parameter\\n        index += 32;\\n\\n        // Read the bytes32 from array memory\\n        assembly {\\n            result := mload(add(b, index))\\n        }\\n        return result;\\n    }\\n\\n    /// @dev Writes a bytes32 into a specific position in a byte array.\\n    /// @param b Byte array to insert <input> into.\\n    /// @param index Index in byte array of <input>.\\n    /// @param input bytes32 to put into byte array.\\n    function writeBytes32(bytes memory b, uint256 index, bytes32 input) internal pure {\\n        if (b.length < index + 32) {\\n            LibRichErrorsV06.rrevert(\\n                LibBytesRichErrorsV06.InvalidByteOperationError(\\n                    LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\\n                    b.length,\\n                    index + 32\\n                )\\n            );\\n        }\\n\\n        // Arrays are prefixed by a 256 bit length parameter\\n        index += 32;\\n\\n        // Read the bytes32 from array memory\\n        assembly {\\n            mstore(add(b, index), input)\\n        }\\n    }\\n\\n    /// @dev Reads a uint256 value from a position in a byte array.\\n    /// @param b Byte array containing a uint256 value.\\n    /// @param index Index in byte array of uint256 value.\\n    /// @return result uint256 value from byte array.\\n    function readUint256(bytes memory b, uint256 index) internal pure returns (uint256 result) {\\n        result = uint256(readBytes32(b, index));\\n        return result;\\n    }\\n\\n    /// @dev Writes a uint256 into a specific position in a byte array.\\n    /// @param b Byte array to insert <input> into.\\n    /// @param index Index in byte array of <input>.\\n    /// @param input uint256 to put into byte array.\\n    function writeUint256(bytes memory b, uint256 index, uint256 input) internal pure {\\n        writeBytes32(b, index, bytes32(input));\\n    }\\n\\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\\n    /// @param b Byte array containing a bytes4 value.\\n    /// @param index Index in byte array of bytes4 value.\\n    /// @return result bytes4 value from byte array.\\n    function readBytes4(bytes memory b, uint256 index) internal pure returns (bytes4 result) {\\n        if (b.length < index + 4) {\\n            LibRichErrorsV06.rrevert(\\n                LibBytesRichErrorsV06.InvalidByteOperationError(\\n                    LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,\\n                    b.length,\\n                    index + 4\\n                )\\n            );\\n        }\\n\\n        // Arrays are prefixed by a 32 byte length field\\n        index += 32;\\n\\n        // Read the bytes4 from array memory\\n        assembly {\\n            result := mload(add(b, index))\\n            // Solidity does not require us to clean the trailing bytes.\\n            // We do it anyway\\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\\n        }\\n        return result;\\n    }\\n\\n    /// @dev Writes a new length to a byte array.\\n    ///      Decreasing length will lead to removing the corresponding lower order bytes from the byte array.\\n    ///      Increasing length may lead to appending adjacent in-memory bytes to the end of the byte array.\\n    /// @param b Bytes array to write new length to.\\n    /// @param length New length of byte array.\\n    function writeLength(bytes memory b, uint256 length) internal pure {\\n        assembly {\\n            mstore(b, length)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4627b090ebd8db251e6cea36597c906bd4f82c219059395eaf7263067666b856\",\"license\":\"Apache-2.0\"},\"src/contracts-utils/v06/LibSafeMathV06.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\nimport \\\"./errors/LibRichErrorsV06.sol\\\";\\nimport \\\"./errors/LibSafeMathRichErrorsV06.sol\\\";\\n\\nlibrary LibSafeMathV06 {\\n    function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        if (c / a != b) {\\n            LibRichErrorsV06.rrevert(\\n                LibSafeMathRichErrorsV06.Uint256BinOpError(\\n                    LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\\n                    a,\\n                    b\\n                )\\n            );\\n        }\\n        return c;\\n    }\\n\\n    function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            LibRichErrorsV06.rrevert(\\n                LibSafeMathRichErrorsV06.Uint256BinOpError(\\n                    LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\\n                    a,\\n                    b\\n                )\\n            );\\n        }\\n        uint256 c = a / b;\\n        return c;\\n    }\\n\\n    function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b > a) {\\n            LibRichErrorsV06.rrevert(\\n                LibSafeMathRichErrorsV06.Uint256BinOpError(\\n                    LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\\n                    a,\\n                    b\\n                )\\n            );\\n        }\\n        return a - b;\\n    }\\n\\n    function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        if (c < a) {\\n            LibRichErrorsV06.rrevert(\\n                LibSafeMathRichErrorsV06.Uint256BinOpError(\\n                    LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\\n                    a,\\n                    b\\n                )\\n            );\\n        }\\n        return c;\\n    }\\n\\n    function max256(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    function min256(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    function safeMul128(uint128 a, uint128 b) internal pure returns (uint128) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint128 c = a * b;\\n        if (c / a != b) {\\n            LibRichErrorsV06.rrevert(\\n                LibSafeMathRichErrorsV06.Uint256BinOpError(\\n                    LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\\n                    a,\\n                    b\\n                )\\n            );\\n        }\\n        return c;\\n    }\\n\\n    function safeDiv128(uint128 a, uint128 b) internal pure returns (uint128) {\\n        if (b == 0) {\\n            LibRichErrorsV06.rrevert(\\n                LibSafeMathRichErrorsV06.Uint256BinOpError(\\n                    LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\\n                    a,\\n                    b\\n                )\\n            );\\n        }\\n        uint128 c = a / b;\\n        return c;\\n    }\\n\\n    function safeSub128(uint128 a, uint128 b) internal pure returns (uint128) {\\n        if (b > a) {\\n            LibRichErrorsV06.rrevert(\\n                LibSafeMathRichErrorsV06.Uint256BinOpError(\\n                    LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\\n                    a,\\n                    b\\n                )\\n            );\\n        }\\n        return a - b;\\n    }\\n\\n    function safeAdd128(uint128 a, uint128 b) internal pure returns (uint128) {\\n        uint128 c = a + b;\\n        if (c < a) {\\n            LibRichErrorsV06.rrevert(\\n                LibSafeMathRichErrorsV06.Uint256BinOpError(\\n                    LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\\n                    a,\\n                    b\\n                )\\n            );\\n        }\\n        return c;\\n    }\\n\\n    function max128(uint128 a, uint128 b) internal pure returns (uint128) {\\n        return a >= b ? a : b;\\n    }\\n\\n    function min128(uint128 a, uint128 b) internal pure returns (uint128) {\\n        return a < b ? a : b;\\n    }\\n\\n    function safeDowncastToUint128(uint256 a) internal pure returns (uint128) {\\n        if (a > type(uint128).max) {\\n            LibRichErrorsV06.rrevert(\\n                LibSafeMathRichErrorsV06.Uint256DowncastError(\\n                    LibSafeMathRichErrorsV06.DowncastErrorCodes.VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128,\\n                    a\\n                )\\n            );\\n        }\\n        return uint128(a);\\n    }\\n}\\n\",\"keccak256\":\"0xf41503c5323320d0d4a8de4afddbc41c9e0fa205b8b0ee317bd4d98b411bb3ea\",\"license\":\"Apache-2.0\"},\"src/contracts-utils/v06/errors/LibBytesRichErrorsV06.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\nlibrary LibBytesRichErrorsV06 {\\n    enum InvalidByteOperationErrorCodes {\\n        FromLessThanOrEqualsToRequired,\\n        ToLessThanOrEqualsLengthRequired,\\n        LengthGreaterThanZeroRequired,\\n        LengthGreaterThanOrEqualsFourRequired,\\n        LengthGreaterThanOrEqualsTwentyRequired,\\n        LengthGreaterThanOrEqualsThirtyTwoRequired,\\n        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\\n        DestinationLengthGreaterThanOrEqualSourceLengthRequired\\n    }\\n\\n    // bytes4(keccak256(\\\"InvalidByteOperationError(uint8,uint256,uint256)\\\"))\\n    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR = 0x28006595;\\n\\n    function InvalidByteOperationError(\\n        InvalidByteOperationErrorCodes errorCode,\\n        uint256 offset,\\n        uint256 required\\n    ) internal pure returns (bytes memory) {\\n        return abi.encodeWithSelector(INVALID_BYTE_OPERATION_ERROR_SELECTOR, errorCode, offset, required);\\n    }\\n}\\n\",\"keccak256\":\"0x53f172b5aaf453b6372471ab3918bb0c1611ff38c8ad30f1a955f2453fa499c3\",\"license\":\"Apache-2.0\"},\"src/contracts-utils/v06/errors/LibRichErrorsV06.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\nlibrary LibRichErrorsV06 {\\n    // bytes4(keccak256(\\\"Error(string)\\\"))\\n    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\\n\\n    /// @dev ABI encode a standard, string revert error payload.\\n    ///      This is the same payload that would be included by a `revert(string)`\\n    ///      solidity statement. It has the function signature `Error(string)`.\\n    /// @param message The error string.\\n    /// @return The ABI encoded error.\\n    function StandardError(string memory message) internal pure returns (bytes memory) {\\n        return abi.encodeWithSelector(STANDARD_ERROR_SELECTOR, bytes(message));\\n    }\\n\\n    /// @dev Reverts an encoded rich revert reason `errorData`.\\n    /// @param errorData ABI encoded error data.\\n    function rrevert(bytes memory errorData) internal pure {\\n        assembly {\\n            revert(add(errorData, 0x20), mload(errorData))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x94011e576f60b0c5490c9424503a7ef0c9ebb57d1d9573372c87da0ede38f674\",\"license\":\"Apache-2.0\"},\"src/contracts-utils/v06/errors/LibSafeMathRichErrorsV06.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\nlibrary LibSafeMathRichErrorsV06 {\\n    // bytes4(keccak256(\\\"Uint256BinOpError(uint8,uint256,uint256)\\\"))\\n    bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR = 0xe946c1bb;\\n\\n    // bytes4(keccak256(\\\"Uint256DowncastError(uint8,uint256)\\\"))\\n    bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR = 0xc996af7b;\\n\\n    enum BinOpErrorCodes {\\n        ADDITION_OVERFLOW,\\n        MULTIPLICATION_OVERFLOW,\\n        SUBTRACTION_UNDERFLOW,\\n        DIVISION_BY_ZERO\\n    }\\n\\n    enum DowncastErrorCodes {\\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT32,\\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT64,\\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT96,\\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128\\n    }\\n\\n    function Uint256BinOpError(BinOpErrorCodes errorCode, uint256 a, uint256 b) internal pure returns (bytes memory) {\\n        return abi.encodeWithSelector(UINT256_BINOP_ERROR_SELECTOR, errorCode, a, b);\\n    }\\n\\n    function Uint256DowncastError(DowncastErrorCodes errorCode, uint256 a) internal pure returns (bytes memory) {\\n        return abi.encodeWithSelector(UINT256_DOWNCAST_ERROR_SELECTOR, errorCode, a);\\n    }\\n}\\n\",\"keccak256\":\"0xfb01cc2d90995a03f1f72b00226e089d1bf2acf36fe2c115b08ccf048e26cf6b\",\"license\":\"Apache-2.0\"},\"src/zero-ex/transformers/bridges/BridgeAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2021 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IBridgeAdapter.sol\\\";\\nimport \\\"./BridgeProtocols.sol\\\";\\nimport \\\"./mixins/MixinAaveV2.sol\\\";\\nimport \\\"./mixins/MixinBalancer.sol\\\";\\nimport \\\"./mixins/MixinBalancerV2.sol\\\";\\nimport \\\"./mixins/MixinBalancerV2Batch.sol\\\";\\nimport \\\"./mixins/MixinBancor.sol\\\";\\nimport \\\"./mixins/MixinCompound.sol\\\";\\nimport \\\"./mixins/MixinCurve.sol\\\";\\nimport \\\"./mixins/MixinCurveV2.sol\\\";\\nimport \\\"./mixins/MixinCryptoCom.sol\\\";\\nimport \\\"./mixins/MixinDodo.sol\\\";\\nimport \\\"./mixins/MixinDodoV2.sol\\\";\\nimport \\\"./mixins/MixinGMX.sol\\\";\\nimport \\\"./mixins/MixinKyberDmm.sol\\\";\\nimport \\\"./mixins/MixinLido.sol\\\";\\nimport \\\"./mixins/MixinMakerPSM.sol\\\";\\nimport \\\"./mixins/MixinMooniswap.sol\\\";\\nimport \\\"./mixins/MixinMStable.sol\\\";\\nimport \\\"./mixins/MixinNerve.sol\\\";\\nimport \\\"./mixins/MixinOasis.sol\\\";\\nimport \\\"./mixins/MixinPlatypus.sol\\\";\\nimport \\\"./mixins/MixinShell.sol\\\";\\nimport \\\"./mixins/MixinUniswap.sol\\\";\\nimport \\\"./mixins/MixinUniswapV2.sol\\\";\\nimport \\\"./mixins/MixinUniswapV3.sol\\\";\\nimport \\\"./mixins/MixinZeroExBridge.sol\\\";\\n\\ncontract BridgeAdapter is\\n    IBridgeAdapter,\\n    MixinAaveV2,\\n    MixinBalancer,\\n    MixinBalancerV2,\\n    MixinBalancerV2Batch,\\n    MixinBancor,\\n    MixinCompound,\\n    MixinCurve,\\n    MixinCurveV2,\\n    MixinCryptoCom,\\n    MixinDodo,\\n    MixinDodoV2,\\n    MixinGMX,\\n    MixinKyberDmm,\\n    MixinLido,\\n    MixinMakerPSM,\\n    MixinMooniswap,\\n    MixinMStable,\\n    MixinNerve,\\n    MixinOasis,\\n    MixinPlatypus,\\n    MixinShell,\\n    MixinUniswap,\\n    MixinUniswapV2,\\n    MixinUniswapV3,\\n    MixinZeroExBridge\\n{\\n    constructor(IEtherTokenV06 weth)\\n        public\\n        MixinAaveV2()\\n        MixinBalancer()\\n        MixinBalancerV2()\\n        MixinBancor(weth)\\n        MixinCompound(weth)\\n        MixinCurve(weth)\\n        MixinCurveV2()\\n        MixinCryptoCom()\\n        MixinDodo()\\n        MixinDodoV2()\\n        MixinGMX()\\n        MixinLido(weth)\\n        MixinMakerPSM()\\n        MixinMooniswap(weth)\\n        MixinMStable()\\n        MixinNerve()\\n        MixinOasis()\\n        MixinPlatypus()\\n        MixinShell()\\n        MixinUniswap(weth)\\n        MixinUniswapV2()\\n        MixinUniswapV3()\\n        MixinZeroExBridge()\\n    {}\\n\\n    function trade(\\n        BridgeOrder memory order,\\n        IERC20TokenV06 sellToken,\\n        IERC20TokenV06 buyToken,\\n        uint256 sellAmount\\n    )\\n        public\\n        override\\n        returns (uint256 boughtAmount)\\n    {\\n        uint128 protocolId = uint128(uint256(order.source) >> 128);\\n        if (protocolId == BridgeProtocols.CURVE) {\\n            boughtAmount = _tradeCurve(\\n                sellToken,\\n                buyToken,\\n                sellAmount,\\n                order.bridgeData\\n            );\\n        } else if (protocolId == BridgeProtocols.CURVEV2) {\\n            boughtAmount = _tradeCurveV2(\\n                sellToken,\\n                buyToken,\\n                sellAmount,\\n                order.bridgeData\\n            );\\n        } else if (protocolId == BridgeProtocols.UNISWAPV3) {\\n            boughtAmount = _tradeUniswapV3(\\n                sellToken,\\n                sellAmount,\\n                order.bridgeData\\n            );\\n        } else if (protocolId == BridgeProtocols.UNISWAPV2) {\\n            boughtAmount = _tradeUniswapV2(\\n                buyToken,\\n                sellAmount,\\n                order.bridgeData\\n            );\\n        } else if (protocolId == BridgeProtocols.UNISWAP) {\\n            boughtAmount = _tradeUniswap(\\n                sellToken,\\n                buyToken,\\n                sellAmount,\\n                order.bridgeData\\n            );\\n        } else if (protocolId == BridgeProtocols.BALANCER) {\\n            boughtAmount = _tradeBalancer(\\n                sellToken,\\n                buyToken,\\n                sellAmount,\\n                order.bridgeData\\n            );\\n        } else if (protocolId == BridgeProtocols.BALANCERV2) {\\n            boughtAmount = _tradeBalancerV2(\\n                sellToken,\\n                buyToken,\\n                sellAmount,\\n                order.bridgeData\\n            );\\n        } else if (protocolId == BridgeProtocols.BALANCERV2BATCH) {\\n            boughtAmount = _tradeBalancerV2Batch(\\n                sellAmount,\\n                order.bridgeData\\n            );\\n        }else if (protocolId == BridgeProtocols.MAKERPSM) {\\n            boughtAmount = _tradeMakerPsm(\\n                sellToken,\\n                buyToken,\\n                sellAmount,\\n                order.bridgeData\\n            );\\n        } else if (protocolId == BridgeProtocols.MOONISWAP) {\\n            boughtAmount = _tradeMooniswap(\\n                sellToken,\\n                buyToken,\\n                sellAmount,\\n                order.bridgeData\\n            );\\n        } else if (protocolId == BridgeProtocols.MSTABLE) {\\n            boughtAmount = _tradeMStable(\\n                sellToken,\\n                buyToken,\\n                sellAmount,\\n                order.bridgeData\\n            );\\n        } else if (protocolId == BridgeProtocols.OASIS) {\\n            boughtAmount = _tradeOasis(\\n                sellToken,\\n                buyToken,\\n                sellAmount,\\n                order.bridgeData\\n            );\\n        } else if (protocolId == BridgeProtocols.SHELL) {\\n            boughtAmount = _tradeShell(\\n                sellToken,\\n                buyToken,\\n                sellAmount,\\n                order.bridgeData\\n            );\\n        } else if (protocolId == BridgeProtocols.DODO) {\\n            boughtAmount = _tradeDodo(\\n                sellToken,\\n                sellAmount,\\n                order.bridgeData\\n            );\\n        } else if (protocolId == BridgeProtocols.DODOV2) {\\n            boughtAmount = _tradeDodoV2(\\n                sellToken,\\n                sellAmount,\\n                order.bridgeData\\n            );\\n        } else if (protocolId == BridgeProtocols.CRYPTOCOM) {\\n            boughtAmount = _tradeCryptoCom(\\n                buyToken,\\n                sellAmount,\\n                order.bridgeData\\n            );\\n        } else if (protocolId == BridgeProtocols.BANCOR) {\\n            boughtAmount = _tradeBancor(\\n                buyToken,\\n                sellAmount,\\n                order.bridgeData\\n            );\\n        } else if (protocolId == BridgeProtocols.NERVE) {\\n            boughtAmount = _tradeNerve(\\n                sellToken,\\n                sellAmount,\\n                order.bridgeData\\n            );\\n        } else if (protocolId == BridgeProtocols.KYBERDMM) {\\n            boughtAmount = _tradeKyberDmm(\\n                buyToken,\\n                sellAmount,\\n                order.bridgeData\\n            );\\n        } else if (protocolId == BridgeProtocols.LIDO) {\\n            boughtAmount = _tradeLido(\\n                sellToken,\\n                buyToken,\\n                sellAmount,\\n                order.bridgeData\\n            );\\n        } else if (protocolId == BridgeProtocols.AAVEV2) {\\n            boughtAmount = _tradeAaveV2(\\n                sellToken,\\n                buyToken,\\n                sellAmount,\\n                order.bridgeData\\n            );\\n        } else if (protocolId == BridgeProtocols.COMPOUND) {\\n            boughtAmount = _tradeCompound(\\n                sellToken,\\n                buyToken,\\n                sellAmount,\\n                order.bridgeData\\n            );\\n        } else if (protocolId == BridgeProtocols.GMX) {\\n            boughtAmount = _tradeGMX(\\n                buyToken,\\n                sellAmount,\\n                order.bridgeData\\n            );\\n        } else if (protocolId == BridgeProtocols.PLATYPUS) {\\n            boughtAmount = _tradePlatypus(\\n                buyToken,\\n                sellAmount,\\n                order.bridgeData\\n            );\\n        } else {\\n            boughtAmount = _tradeZeroExBridge(\\n                sellToken,\\n                buyToken,\\n                sellAmount,\\n                order.bridgeData\\n            );\\n        }\\n\\n        emit BridgeFill(\\n            order.source,\\n            sellToken,\\n            buyToken,\\n            sellAmount,\\n            boughtAmount\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x703df385d107fd51986078102cd7caf271153f1a0ffbaf323b6637b70266add0\",\"license\":\"Apache-2.0\"},\"src/zero-ex/transformers/bridges/BridgeProtocols.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2021 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../../contracts-erc20/v06/IERC20TokenV06.sol\\\";\\n\\n\\nlibrary BridgeProtocols {\\n    // A incrementally increasing, append-only list of protocol IDs.\\n    // We don't use an enum so solidity doesn't throw when we pass in a\\n    // new protocol ID that hasn't been rolled up yet.\\n    uint128 internal constant UNKNOWN         = 0;\\n    uint128 internal constant CURVE           = 1;\\n    uint128 internal constant UNISWAPV2       = 2;\\n    uint128 internal constant UNISWAP         = 3;\\n    uint128 internal constant BALANCER        = 4;\\n    uint128 internal constant KYBER           = 5;\\n    uint128 internal constant MOONISWAP       = 6;\\n    uint128 internal constant MSTABLE         = 7;\\n    uint128 internal constant OASIS           = 8;\\n    uint128 internal constant SHELL           = 9;\\n    uint128 internal constant DODO            = 10;\\n    uint128 internal constant DODOV2          = 11;\\n    uint128 internal constant CRYPTOCOM       = 12;\\n    uint128 internal constant BANCOR          = 13;\\n    uint128 internal constant COFIX           = 14;\\n    uint128 internal constant NERVE           = 15;\\n    uint128 internal constant MAKERPSM        = 16;\\n    uint128 internal constant BALANCERV2      = 17;\\n    uint128 internal constant UNISWAPV3       = 18;\\n    uint128 internal constant KYBERDMM        = 19;\\n    uint128 internal constant CURVEV2         = 20;\\n    uint128 internal constant LIDO            = 21;\\n    uint128 internal constant CLIPPER         = 22; // Not used: Clipper is now using PLP interface\\n    uint128 internal constant AAVEV2          = 23;\\n    uint128 internal constant COMPOUND        = 24;\\n    uint128 internal constant BALANCERV2BATCH = 25;\\n    uint128 internal constant GMX             = 26;\\n    uint128 internal constant PLATYPUS        = 27;\\n}\\n\",\"keccak256\":\"0x644bc8a9f9c92195fed12abcbfceb689e5224a1d7f84ed91e3b5a80242d9f919\",\"license\":\"Apache-2.0\"},\"src/zero-ex/transformers/bridges/IBridgeAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2021 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../../contracts-erc20/v06/IERC20TokenV06.sol\\\";\\n\\n\\ninterface IBridgeAdapter {\\n\\n    struct BridgeOrder {\\n        // Upper 16 bytes: uint128 protocol ID (right-aligned)\\n        // Lower 16 bytes: ASCII source name (left-aligned)\\n        bytes32 source;\\n        uint256 takerTokenAmount;\\n        uint256 makerTokenAmount;\\n        bytes bridgeData;\\n    }\\n\\n    /// @dev Emitted when tokens are swapped with an external source.\\n    /// @param source A unique ID for the source, where the upper 16 bytes\\n    ///        encodes the (right-aligned) uint128 protocol ID and the\\n    ///        lower 16 bytes encodes an ASCII source name.\\n    /// @param inputToken The token the bridge is converting from.\\n    /// @param outputToken The token the bridge is converting to.\\n    /// @param inputTokenAmount Amount of input token sold.\\n    /// @param outputTokenAmount Amount of output token bought.\\n    event BridgeFill(\\n        bytes32 source,\\n        IERC20TokenV06 inputToken,\\n        IERC20TokenV06 outputToken,\\n        uint256 inputTokenAmount,\\n        uint256 outputTokenAmount\\n    );\\n\\n    function trade(\\n        BridgeOrder calldata order,\\n        IERC20TokenV06 sellToken,\\n        IERC20TokenV06 buyToken,\\n        uint256 sellAmount\\n    )\\n        external\\n        returns (uint256 boughtAmount);\\n}\\n\",\"keccak256\":\"0x1e5dccb1c1a2f7037b140103dba8c38e9c0844263d3f65e918bac29b7137cfda\",\"license\":\"Apache-2.0\"},\"src/zero-ex/transformers/bridges/mixins/MixinAaveV2.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2021 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../../../contracts-erc20/v06/LibERC20TokenV06.sol\\\";\\nimport \\\"../../../../contracts-erc20/v06/IERC20TokenV06.sol\\\";\\n\\n// Minimal Aave V2 LendingPool interface\\ninterface ILendingPool {\\n    /**\\n   * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\\n   * @param asset The address of the underlying asset to deposit\\n   * @param amount The amount to be deposited\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function deposit(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n   * @param asset The address of the underlying asset to withdraw\\n   * @param amount The underlying amount to be withdrawn\\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n   * @param to Address that will receive the underlying, same as msg.sender if the user\\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n   *   different wallet\\n   * @return The final amount withdrawn\\n   **/\\n  function withdraw(\\n    address asset,\\n    uint256 amount,\\n    address to\\n  ) external returns (uint256);\\n}\\n\\ncontract MixinAaveV2 {\\n    using LibERC20TokenV06 for IERC20TokenV06;\\n\\n    function _tradeAaveV2(\\n        IERC20TokenV06 sellToken,\\n        IERC20TokenV06 buyToken,\\n        uint256 sellAmount,\\n        bytes memory bridgeData\\n    )\\n        internal\\n        returns (uint256)\\n    {\\n        (ILendingPool lendingPool, address aToken) = abi.decode(bridgeData, (ILendingPool, address));\\n\\n          sellToken.approveIfBelow(\\n              address(lendingPool),\\n              sellAmount\\n          );\\n\\n        if (address(buyToken) == aToken) {\\n            lendingPool.deposit(address(sellToken), sellAmount, address(this), 0);\\n            // 1:1 mapping token -> aToken and have the same number of decimals as the underlying token\\n            return sellAmount;\\n        } else if (address(sellToken) == aToken) {\\n            return lendingPool.withdraw(address(buyToken), sellAmount, address(this));\\n        }\\n\\n        revert(\\\"MixinAaveV2/UNSUPPORTED_TOKEN_PAIR\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xe4c9d55d0a03bb325f2494c568fa5d21fc7abece210973a35453f263305cf00b\",\"license\":\"Apache-2.0\"},\"src/zero-ex/transformers/bridges/mixins/MixinBalancer.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\nimport \\\"../../../../contracts-erc20/v06/LibERC20TokenV06.sol\\\";\\nimport \\\"../../../../contracts-erc20/v06/IERC20TokenV06.sol\\\";\\n\\ninterface IBalancerPool {\\n    /// @dev Sell `tokenAmountIn` of `tokenIn` and receive `tokenOut`.\\n    /// @param tokenIn The token being sold\\n    /// @param tokenAmountIn The amount of `tokenIn` to sell.\\n    /// @param tokenOut The token being bought.\\n    /// @param minAmountOut The minimum amount of `tokenOut` to buy.\\n    /// @param maxPrice The maximum value for `spotPriceAfter`.\\n    /// @return tokenAmountOut The amount of `tokenOut` bought.\\n    /// @return spotPriceAfter The new marginal spot price of the given\\n    ///         token pair for this pool.\\n    function swapExactAmountIn(\\n        IERC20TokenV06 tokenIn,\\n        uint tokenAmountIn,\\n        IERC20TokenV06 tokenOut,\\n        uint minAmountOut,\\n        uint maxPrice\\n    ) external returns (uint tokenAmountOut, uint spotPriceAfter);\\n}\\n\\ncontract MixinBalancer {\\n\\n    using LibERC20TokenV06 for IERC20TokenV06;\\n\\n    function _tradeBalancer(\\n        IERC20TokenV06 sellToken,\\n        IERC20TokenV06 buyToken,\\n        uint256 sellAmount,\\n        bytes memory bridgeData\\n    )\\n        internal\\n        returns (uint256 boughtAmount)\\n    {\\n        // Decode the bridge data.\\n        (IBalancerPool pool) = abi.decode(\\n            bridgeData,\\n            (IBalancerPool)\\n        );\\n        sellToken.approveIfBelow(\\n            address(pool),\\n            sellAmount\\n        );\\n        // Sell all of this contract's `sellToken` token balance.\\n        (boughtAmount,) = pool.swapExactAmountIn(\\n            sellToken,  // tokenIn\\n            sellAmount, // tokenAmountIn\\n            buyToken,   // tokenOut\\n            1,          // minAmountOut\\n            uint256(-1) // maxPrice\\n        );\\n        return boughtAmount;\\n    }\\n}\\n\",\"keccak256\":\"0x13a392436c4314097ee3188ce92c327155dcc37a7b88fd73406b09df256ac099\",\"license\":\"Apache-2.0\"},\"src/zero-ex/transformers/bridges/mixins/MixinBalancerV2.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../../../contracts-erc20/v06/LibERC20TokenV06.sol\\\";\\nimport \\\"../../../../contracts-erc20/v06/IERC20TokenV06.sol\\\";\\n\\n\\ninterface IBalancerV2Vault {\\n\\n    enum SwapKind { GIVEN_IN, GIVEN_OUT }\\n    /**\\n     * @dev Performs a swap with a single Pool.\\n     *\\n     * If the swap is given in (the number of tokens to send to the Pool is known), returns the amount of tokens\\n     * taken from the Pool, which must be greater than or equal to `limit`.\\n     *\\n     * If the swap is given out (the number of tokens to take from the Pool is known), returns the amount of\\n     * tokens sent to the Pool, which must be less than or equal to `limit`.\\n     *\\n     * Internal Balance usage and the recipient are determined by the `funds` struct.\\n     *\\n     * Emits a `Swap` event.\\n     * For full documentation see https://github.com/balancer-labs/balancer-core-v2/blob/master/contracts/vault/interfaces/IVault.sol\\n     */\\n    function swap(\\n        SingleSwap calldata request,\\n        FundManagement calldata funds,\\n        uint256 limit,\\n        uint256 deadline\\n    ) external payable returns (uint256);\\n\\n    struct SingleSwap {\\n        bytes32 poolId;\\n        SwapKind kind;\\n        IERC20TokenV06 assetIn;\\n        IERC20TokenV06 assetOut;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    struct FundManagement {\\n        address sender;\\n        bool fromInternalBalance;\\n        address payable recipient;\\n        bool toInternalBalance;\\n    }\\n}\\n\\ncontract MixinBalancerV2 {\\n\\n    using LibERC20TokenV06 for IERC20TokenV06;\\n\\n    struct BalancerV2BridgeData {\\n        IBalancerV2Vault vault;\\n        bytes32 poolId;\\n    }\\n\\n    function _tradeBalancerV2(\\n        IERC20TokenV06 sellToken,\\n        IERC20TokenV06 buyToken,\\n        uint256 sellAmount,\\n        bytes memory bridgeData\\n    )\\n        internal\\n        returns (uint256 boughtAmount)\\n    {\\n        // Decode the bridge data.\\n        BalancerV2BridgeData memory data = abi.decode(bridgeData, (BalancerV2BridgeData));\\n\\n        // Grant an allowance to the exchange to spend `fromTokenAddress` token.\\n        sellToken.approveIfBelow(address(data.vault), sellAmount);\\n\\n        // Sell the entire sellAmount\\n        IBalancerV2Vault.SingleSwap memory request = IBalancerV2Vault.SingleSwap({\\n            poolId: data.poolId,\\n            kind: IBalancerV2Vault.SwapKind.GIVEN_IN,\\n            assetIn: sellToken,\\n            assetOut: buyToken,\\n            amount: sellAmount, // amount in\\n            userData: \\\"\\\"\\n        });\\n\\n        IBalancerV2Vault.FundManagement memory funds = IBalancerV2Vault.FundManagement({\\n            sender: address(this),\\n            fromInternalBalance: false,\\n            recipient: payable(address(this)),\\n            toInternalBalance: false\\n        });\\n\\n        boughtAmount = data.vault.swap(\\n            request,\\n            funds,\\n            1, // min amount out\\n            block.timestamp // expires after this block\\n        );\\n        return boughtAmount;\\n    }\\n}\\n\",\"keccak256\":\"0x61a1480b5b6019dcfe9f2dfc305d5d01867466c78c12527f8bcc07901a6f9a01\",\"license\":\"Apache-2.0\"},\"src/zero-ex/transformers/bridges/mixins/MixinBalancerV2Batch.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../../../contracts-erc20/v06/LibERC20TokenV06.sol\\\";\\nimport \\\"../../../../contracts-erc20/v06/IERC20TokenV06.sol\\\";\\n\\n\\ninterface IBalancerV2BatchSwapVault {\\n\\n    enum SwapKind { GIVEN_IN, GIVEN_OUT }\\n\\n    struct BatchSwapStep {\\n        bytes32 poolId;\\n        uint256 assetInIndex;\\n        uint256 assetOutIndex;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    struct FundManagement {\\n        address sender;\\n        bool fromInternalBalance;\\n        address payable recipient;\\n        bool toInternalBalance;\\n    }\\n\\n    function batchSwap(\\n        SwapKind kind,\\n        BatchSwapStep[] calldata swaps,\\n        IERC20TokenV06[] calldata assets,\\n        FundManagement calldata funds,\\n        int256[] calldata limits,\\n        uint256 deadline\\n    ) external returns (int256[] memory amounts);\\n}\\n\\ncontract MixinBalancerV2Batch {\\n\\n    using LibERC20TokenV06 for IERC20TokenV06;\\n\\n    struct BalancerV2BatchBridgeData {\\n        IBalancerV2BatchSwapVault vault;\\n        IBalancerV2BatchSwapVault.BatchSwapStep[] swapSteps;\\n        IERC20TokenV06[] assets;\\n    }\\n\\n    function _tradeBalancerV2Batch(\\n        uint256 sellAmount,\\n        bytes memory bridgeData\\n    )\\n        internal\\n        returns (uint256 boughtAmount)\\n    {\\n        // Decode the bridge data.\\n        (\\n            IBalancerV2BatchSwapVault vault,\\n            IBalancerV2BatchSwapVault.BatchSwapStep[] memory swapSteps,\\n            address[] memory assets_\\n        ) = abi.decode(bridgeData, (IBalancerV2BatchSwapVault, IBalancerV2BatchSwapVault.BatchSwapStep[], address[]));\\n        IERC20TokenV06[] memory assets;\\n        assembly { assets := assets_ }\\n\\n        // Grant an allowance to the exchange to spend `fromTokenAddress` token.\\n        assets[0].approveIfBelow(address(vault), sellAmount);\\n\\n        swapSteps[0].amount = sellAmount;\\n        int256[] memory limits = new int256[](assets.length);\\n        for (uint256 i = 0; i < limits.length; ++i) {\\n            limits[i] = type(int256).max;\\n        }\\n\\n        int256[] memory amounts = vault.batchSwap(\\n            IBalancerV2BatchSwapVault.SwapKind.GIVEN_IN,\\n            swapSteps,\\n            assets,\\n            IBalancerV2BatchSwapVault.FundManagement({\\n                sender: address(this),\\n                fromInternalBalance: false,\\n                recipient: payable(address(this)),\\n                toInternalBalance: false\\n            }),\\n            limits,\\n            block.timestamp + 1\\n        );\\n        require(amounts[amounts.length - 1] <= 0, 'Unexpected BalancerV2Batch output');\\n        return uint256(amounts[amounts.length - 1] * -1);\\n    }\\n}\\n\",\"keccak256\":\"0x5416451935763c8b0d7faa0287dd715c171b193731c9414558354c51214dd529\",\"license\":\"Apache-2.0\"},\"src/zero-ex/transformers/bridges/mixins/MixinBancor.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../../../contracts-erc20/v06/LibERC20TokenV06.sol\\\";\\nimport \\\"../../../../contracts-erc20/v06/IERC20TokenV06.sol\\\";\\nimport \\\"../../../../contracts-erc20/v06/IEtherTokenV06.sol\\\";\\nimport \\\"../IBridgeAdapter.sol\\\";\\n\\n\\ninterface IBancorNetwork {\\n    function convertByPath(\\n        IERC20TokenV06[] calldata _path,\\n        uint256 _amount,\\n        uint256 _minReturn,\\n        address _beneficiary,\\n        address _affiliateAccount,\\n        uint256 _affiliateFee\\n    )\\n        external\\n        payable\\n        returns (uint256);\\n}\\n\\n\\ncontract MixinBancor {\\n\\n    /// @dev Bancor ETH pseudo-address.\\n    IERC20TokenV06 constant public BANCOR_ETH_ADDRESS =\\n        IERC20TokenV06(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\n    IEtherTokenV06 private immutable WETH;\\n\\n    constructor(IEtherTokenV06 weth)\\n        public\\n    {\\n        WETH = weth;\\n    }\\n\\n    function _tradeBancor(\\n        IERC20TokenV06 buyToken,\\n        uint256 sellAmount,\\n        bytes memory bridgeData\\n    )\\n        internal\\n        returns (uint256 boughtAmount)\\n    {\\n        // Decode the bridge data.\\n        IBancorNetwork bancorNetworkAddress;\\n        IERC20TokenV06[] memory path;\\n        {\\n            address[] memory _path;\\n            (\\n                bancorNetworkAddress,\\n                _path\\n            ) = abi.decode(bridgeData, (IBancorNetwork, address[]));\\n            // To get around `abi.decode()` not supporting interface array types.\\n            assembly { path := _path }\\n        }\\n\\n        require(path.length >= 2, \\\"MixinBancor/PATH_LENGTH_MUST_BE_AT_LEAST_TWO\\\");\\n        require(\\n            path[path.length - 1] == buyToken ||\\n            (path[path.length - 1] == BANCOR_ETH_ADDRESS && buyToken == WETH),\\n            \\\"MixinBancor/LAST_ELEMENT_OF_PATH_MUST_MATCH_OUTPUT_TOKEN\\\"\\n        );\\n\\n        uint256 payableAmount = 0;\\n        // If it's ETH in the path then withdraw from WETH\\n        // The Bancor path will have ETH as the 0xeee address\\n        // Bancor expects to be paid in ETH not WETH\\n        if (path[0] == BANCOR_ETH_ADDRESS) {\\n            WETH.withdraw(sellAmount);\\n            payableAmount = sellAmount;\\n        } else {\\n            // Grant an allowance to the Bancor Network.\\n            LibERC20TokenV06.approveIfBelow(\\n                path[0],\\n                address(bancorNetworkAddress),\\n                sellAmount\\n            );\\n        }\\n\\n        // Convert the tokens\\n        boughtAmount = bancorNetworkAddress.convertByPath{value: payableAmount}(\\n            path, // path originating with source token and terminating in destination token\\n            sellAmount, // amount of source token to trade\\n            1, // minimum amount of destination token expected to receive\\n            address(this), // beneficiary\\n            address(0), // affiliateAccount; no fee paid\\n            0 // affiliateFee; no fee paid\\n        );\\n        if (path[path.length - 1] == BANCOR_ETH_ADDRESS) {\\n            WETH.deposit{value: boughtAmount}();\\n        }\\n\\n        return boughtAmount;\\n    }\\n}\\n\",\"keccak256\":\"0xad9a9237daa34189de30c3578f4b38a7f2838d92addb134a7d79711c3705917d\",\"license\":\"Apache-2.0\"},\"src/zero-ex/transformers/bridges/mixins/MixinCompound.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2021 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../../../contracts-erc20/v06/LibERC20TokenV06.sol\\\";\\nimport \\\"../../../../contracts-erc20/v06/IERC20TokenV06.sol\\\";\\nimport \\\"../../../../contracts-erc20/v06/IEtherTokenV06.sol\\\";\\nimport \\\"../../../../contracts-utils/v06/LibSafeMathV06.sol\\\";\\n\\n\\n/// @dev Minimal CToken interface\\ninterface ICToken {\\n    /// @dev deposits specified amount underlying tokens and mints cToken for the sender\\n    /// @param mintAmountInUnderlying amount of underlying tokens to deposit to mint cTokens\\n    /// @return status code of whether the mint was successful or not\\n    function mint(uint256 mintAmountInUnderlying) external returns (uint256);\\n    /// @dev redeems specified amount of cTokens and returns the underlying token to the sender\\n    /// @param redeemTokensInCtokens amount of cTokens to redeem for underlying collateral\\n    /// @return status code of whether the redemption was successful or not\\n    function redeem(uint256 redeemTokensInCtokens) external returns (uint256);\\n}\\n/// @dev Minimal CEther interface\\ninterface ICEther {\\n    /// @dev deposits the amount of Ether sent as value and return mints cEther for the sender\\n    function mint() payable external;\\n    /// @dev redeems specified amount of cETH and returns the underlying ether to the sender\\n    /// @dev redeemTokensInCEther amount of cETH to redeem for underlying ether\\n    /// @return status code of whether the redemption was successful or not\\n    function redeem(uint256 redeemTokensInCEther) external returns (uint256);\\n}\\n\\ncontract MixinCompound {\\n    using LibERC20TokenV06 for IERC20TokenV06;\\n    using LibSafeMathV06 for uint256;\\n\\n    IEtherTokenV06 private immutable WETH;\\n\\n    constructor(IEtherTokenV06 weth)\\n        public\\n    {\\n        WETH = weth;\\n    }\\n\\n    uint256 constant private COMPOUND_SUCCESS_CODE = 0;\\n\\n    function _tradeCompound(\\n        IERC20TokenV06 sellToken,\\n        IERC20TokenV06 buyToken,\\n        uint256 sellAmount,\\n        bytes memory bridgeData\\n    )\\n        internal\\n        returns (uint256)\\n    {\\n        (address cTokenAddress) = abi.decode(bridgeData, (address));\\n        uint256 beforeBalance = buyToken.balanceOf(address(this));\\n\\n        if (address(buyToken) == cTokenAddress) {\\n            if (address(sellToken) == address(WETH)) {\\n                // ETH/WETH -> cETH\\n                ICEther cETH = ICEther(cTokenAddress);\\n                // Compound expects ETH to be sent with mint call\\n                WETH.withdraw(sellAmount);\\n                // NOTE: cETH mint will revert on failure instead of returning a status code\\n                cETH.mint{value: sellAmount}();\\n            } else {\\n                sellToken.approveIfBelow(\\n                    cTokenAddress,\\n                    sellAmount\\n                );\\n                // Token -> cToken\\n                ICToken cToken = ICToken(cTokenAddress);\\n                require(cToken.mint(sellAmount) == COMPOUND_SUCCESS_CODE, \\\"MixinCompound/FAILED_TO_MINT_CTOKEN\\\");\\n            }\\n        } else if (address(sellToken) == cTokenAddress) {\\n            if (address(buyToken) == address(WETH)) {\\n                // cETH -> ETH/WETH\\n                uint256 etherBalanceBefore = address(this).balance;\\n                ICEther cETH = ICEther(cTokenAddress);\\n                require(cETH.redeem(sellAmount) == COMPOUND_SUCCESS_CODE, \\\"MixinCompound/FAILED_TO_REDEEM_CETHER\\\");\\n                uint256 etherBalanceAfter = address(this).balance;\\n                uint256 receivedEtherBalance = etherBalanceAfter.safeSub(etherBalanceBefore);\\n                WETH.deposit{value: receivedEtherBalance}();\\n            } else {\\n                ICToken cToken = ICToken(cTokenAddress);\\n                require(cToken.redeem(sellAmount) == COMPOUND_SUCCESS_CODE, \\\"MixinCompound/FAILED_TO_REDEEM_CTOKEN\\\");\\n            }\\n        }\\n\\n        return buyToken.balanceOf(address(this)).safeSub(beforeBalance);\\n    }\\n}\\n\",\"keccak256\":\"0x4e2238949684bd42ddd5eeeb057167edba009682493cb9a0c79384246939d80e\",\"license\":\"Apache-2.0\"},\"src/zero-ex/transformers/bridges/mixins/MixinCryptoCom.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../../../contracts-erc20/v06/LibERC20TokenV06.sol\\\";\\nimport \\\"../../../../contracts-erc20/v06/IERC20TokenV06.sol\\\";\\nimport \\\"./MixinUniswapV2.sol\\\";\\n\\ncontract MixinCryptoCom\\n{\\n    using LibERC20TokenV06 for IERC20TokenV06;\\n\\n    function _tradeCryptoCom(\\n        IERC20TokenV06 buyToken,\\n        uint256 sellAmount,\\n        bytes memory bridgeData\\n    )\\n        internal\\n        returns (uint256 boughtAmount)\\n    {\\n        IUniswapV2Router02 router;\\n        IERC20TokenV06[] memory path;\\n        {\\n            address[] memory _path;\\n            (router, _path) = abi.decode(bridgeData, (IUniswapV2Router02, address[]));\\n            // To get around `abi.decode()` not supporting interface array types.\\n            assembly { path := _path }\\n        }\\n\\n        require(path.length >= 2, \\\"MixinCryptoCom/PATH_LENGTH_MUST_BE_AT_LEAST_TWO\\\");\\n        require(\\n            path[path.length - 1] == buyToken,\\n            \\\"MixinCryptoCom/LAST_ELEMENT_OF_PATH_MUST_MATCH_OUTPUT_TOKEN\\\"\\n        );\\n        // Grant the CryptoCom router an allowance to sell the first token.\\n        path[0].approveIfBelow(address(router), sellAmount);\\n\\n        uint[] memory amounts = router.swapExactTokensForTokens(\\n             // Sell all tokens we hold.\\n            sellAmount,\\n             // Minimum buy amount.\\n            1,\\n            // Convert to `buyToken` along this path.\\n            path,\\n            // Recipient is `this`.\\n            address(this),\\n            // Expires after this block.\\n            block.timestamp\\n        );\\n        return amounts[amounts.length-1];\\n    }\\n}\\n\",\"keccak256\":\"0xbe41dcd183cadbd97a15e893aaf4563fa64df18d137646c88bbb4b02d631940d\",\"license\":\"Apache-2.0\"},\"src/zero-ex/transformers/bridges/mixins/MixinCurve.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../../../contracts-utils/v06/errors/LibRichErrorsV06.sol\\\";\\nimport \\\"../../../../contracts-erc20/v06/IEtherTokenV06.sol\\\";\\nimport \\\"../../../../contracts-erc20/v06/LibERC20TokenV06.sol\\\";\\nimport \\\"../../../../contracts-erc20/v06/IERC20TokenV06.sol\\\";\\nimport \\\"../../../../contracts-utils/v06/LibSafeMathV06.sol\\\";\\n\\ncontract MixinCurve {\\n\\n    using LibERC20TokenV06 for IERC20TokenV06;\\n    using LibSafeMathV06 for uint256;\\n    using LibRichErrorsV06 for bytes;\\n\\n    /// @dev Mainnet address of the WETH contract.\\n    IEtherTokenV06 private immutable WETH;\\n\\n    constructor(IEtherTokenV06 weth)\\n        public\\n    {\\n        WETH = weth;\\n    }\\n\\n\\n    struct CurveBridgeData {\\n        address curveAddress;\\n        bytes4 exchangeFunctionSelector;\\n        int128 fromCoinIdx;\\n        int128 toCoinIdx;\\n    }\\n\\n    function _tradeCurve(\\n        IERC20TokenV06 sellToken,\\n        IERC20TokenV06 buyToken,\\n        uint256 sellAmount,\\n        bytes memory bridgeData\\n    )\\n        internal\\n        returns (uint256 boughtAmount)\\n    {\\n        // Decode the bridge data to get the Curve metadata.\\n        CurveBridgeData memory data = abi.decode(bridgeData, (CurveBridgeData));\\n        uint256 payableAmount;\\n        if (sellToken == WETH) {\\n            payableAmount = sellAmount;\\n            WETH.withdraw(sellAmount);\\n        } else {\\n            sellToken.approveIfBelow(data.curveAddress, sellAmount);\\n        }\\n\\n        uint256 beforeBalance = buyToken.balanceOf(address(this));\\n        (bool success, bytes memory resultData) =\\n            data.curveAddress.call{value: payableAmount}(abi.encodeWithSelector(\\n                data.exchangeFunctionSelector,\\n                data.fromCoinIdx,\\n                data.toCoinIdx,\\n                // dx\\n                sellAmount,\\n                // min dy\\n                1\\n            ));\\n        if (!success) {\\n            resultData.rrevert();\\n        }\\n\\n        if (buyToken == WETH) {\\n            boughtAmount = address(this).balance;\\n            WETH.deposit{ value: boughtAmount }();\\n        }\\n\\n        return buyToken.balanceOf(address(this)).safeSub(beforeBalance);\\n    }\\n}\\n\",\"keccak256\":\"0x1b0667f2a04a9e280409e525c2fcaf97db9b3ac7351a1886454850dd97dabc4d\",\"license\":\"Apache-2.0\"},\"src/zero-ex/transformers/bridges/mixins/MixinCurveV2.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../../../contracts-utils/v06/errors/LibRichErrorsV06.sol\\\";\\nimport \\\"../../../../contracts-erc20/v06/LibERC20TokenV06.sol\\\";\\nimport \\\"../../../../contracts-erc20/v06/IERC20TokenV06.sol\\\";\\nimport \\\"../../../../contracts-utils/v06/LibSafeMathV06.sol\\\";\\n\\ncontract MixinCurveV2 {\\n\\n    using LibERC20TokenV06 for IERC20TokenV06;\\n    using LibSafeMathV06 for uint256;\\n    using LibRichErrorsV06 for bytes;\\n\\n    struct CurveBridgeDataV2 {\\n        address curveAddress;\\n        bytes4 exchangeFunctionSelector;\\n        int128 fromCoinIdx;\\n        int128 toCoinIdx;\\n    }\\n\\n    function _tradeCurveV2(\\n        IERC20TokenV06 sellToken,\\n        IERC20TokenV06 buyToken,\\n        uint256 sellAmount,\\n        bytes memory bridgeData\\n    )\\n        internal\\n        returns (uint256 boughtAmount)\\n    {\\n        // Decode the bridge data to get the Curve metadata.\\n        CurveBridgeDataV2 memory data = abi.decode(bridgeData, (CurveBridgeDataV2));\\n        sellToken.approveIfBelow(data.curveAddress, sellAmount);\\n\\n        uint256 beforeBalance = buyToken.balanceOf(address(this));\\n        (bool success, bytes memory resultData) =\\n            data.curveAddress.call(abi.encodeWithSelector(\\n                data.exchangeFunctionSelector,\\n                data.fromCoinIdx,\\n                data.toCoinIdx,\\n                // dx\\n                sellAmount,\\n                // min dy\\n                1\\n            ));\\n        if (!success) {\\n            resultData.rrevert();\\n        }\\n\\n        return buyToken.balanceOf(address(this)).safeSub(beforeBalance);\\n    }\\n}\\n\",\"keccak256\":\"0x4749ee451c31121a2648994c9b18a1af7952ff3bcc0390bb0a71aabadbef5575\",\"license\":\"Apache-2.0\"},\"src/zero-ex/transformers/bridges/mixins/MixinDodo.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../../../contracts-erc20/v06/LibERC20TokenV06.sol\\\";\\nimport \\\"../../../../contracts-erc20/v06/IERC20TokenV06.sol\\\";\\nimport \\\"../IBridgeAdapter.sol\\\";\\n\\n\\ninterface IDODO {\\n    function sellBaseToken(\\n        uint256 amount,\\n        uint256 minReceiveQuote,\\n        bytes calldata data\\n    )\\n        external\\n        returns (uint256);\\n\\n    function buyBaseToken(\\n        uint256 amount,\\n        uint256 maxPayQuote,\\n        bytes calldata data\\n    )\\n        external\\n        returns (uint256);\\n}\\n\\n\\ninterface IDODOHelper {\\n    function querySellQuoteToken(\\n        IDODO dodo,\\n        uint256 amount\\n    )\\n        external\\n        view\\n        returns (uint256);\\n}\\n\\n\\ncontract MixinDodo {\\n\\n    using LibERC20TokenV06 for IERC20TokenV06;\\n\\n    function _tradeDodo(\\n        IERC20TokenV06 sellToken,\\n        uint256 sellAmount,\\n        bytes memory bridgeData\\n    )\\n        internal\\n        returns (uint256 boughtAmount)\\n    {\\n        (IDODOHelper helper, IDODO pool, bool isSellBase) =\\n            abi.decode(bridgeData, (IDODOHelper, IDODO, bool));\\n\\n        // Grant the Dodo pool contract an allowance to sell the first token.\\n        sellToken.approveIfBelow(address(pool), sellAmount);\\n\\n        if (isSellBase) {\\n            // Sell the Base token directly against the contract\\n            boughtAmount = pool.sellBaseToken(\\n                // amount to sell\\n                sellAmount,\\n                // min receive amount\\n                1,\\n                new bytes(0)\\n            );\\n        } else {\\n            // Need to re-calculate the sell quote amount into buyBase\\n            boughtAmount = helper.querySellQuoteToken(\\n                pool,\\n                sellAmount\\n            );\\n            pool.buyBaseToken(\\n                // amount to buy\\n                boughtAmount,\\n                // max pay amount\\n                sellAmount,\\n                new bytes(0)\\n            );\\n        }\\n\\n        return boughtAmount;\\n    }\\n}\\n\",\"keccak256\":\"0x802df49ebb23ef3e24fe600484f209cd18ad8ba1e6a26c081ca71f6407347886\",\"license\":\"Apache-2.0\"},\"src/zero-ex/transformers/bridges/mixins/MixinDodoV2.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n\\n  Copyright 2021 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../../../contracts-erc20/v06/LibERC20TokenV06.sol\\\";\\nimport \\\"../../../../contracts-erc20/v06/IERC20TokenV06.sol\\\";\\nimport \\\"../IBridgeAdapter.sol\\\";\\n\\n\\ninterface IDODOV2 {\\n    function sellBase(address recipient)\\n        external\\n        returns (uint256);\\n\\n    function sellQuote(address recipient)\\n        external\\n        returns (uint256);\\n}\\n\\n\\ncontract MixinDodoV2 {\\n\\n    using LibERC20TokenV06 for IERC20TokenV06;\\n\\n    function _tradeDodoV2(\\n        IERC20TokenV06 sellToken,\\n        uint256 sellAmount,\\n        bytes memory bridgeData\\n    )\\n        internal\\n        returns (uint256 boughtAmount)\\n    {\\n        (IDODOV2 pool, bool isSellBase) =\\n            abi.decode(bridgeData, (IDODOV2, bool));\\n\\n        // Transfer the tokens into the pool\\n        sellToken.compatTransfer(address(pool), sellAmount);\\n\\n        boughtAmount = isSellBase ?\\n            pool.sellBase(address(this))\\n            : pool.sellQuote(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x8a2a2a4c3c6c15f896f2eb0b1f39a7d44ebd5a60ee61f0e527d187415231cd66\",\"license\":\"Apache-2.0\"},\"src/zero-ex/transformers/bridges/mixins/MixinGMX.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n  Copyright 2020 ZeroEx Intl.\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n    http://www.apache.org/licenses/LICENSE-2.0\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../../../contracts-erc20/v06/LibERC20TokenV06.sol\\\";\\nimport \\\"../../../../contracts-erc20/v06/IERC20TokenV06.sol\\\";\\nimport \\\"../../../../contracts-utils/v06/LibSafeMathV06.sol\\\";\\nimport \\\"../IBridgeAdapter.sol\\\";\\n\\n/*\\n    UniswapV2\\n*/\\ninterface IGmxRouter {\\n\\n    // /// @dev Swaps an exact amount of input tokens for as many output tokens as possible, along the route determined by the path.\\n    // ///      The first element of path is the input token, the last is the output token, and any intermediate elements represent\\n    // ///      intermediate pairs to trade through (if, for example, a direct pair does not exist).\\n    // /// @param _path An array of token addresses. path.length must be >= 2. Pools for each consecutive pair of addresses must exist and have liquidity.\\n    // /// @param _amountIn The amount of input tokens to send.\\n    // /// @param _minOut The minimum amount of output tokens that must be received for the transaction not to revert.\\n    // /// @param _reciever Recipient of the output tokens.\\n    function swap(\\n       address[] calldata _path, uint256 _amountIn, uint256 _minOut, address _receiver\\n    ) external;\\n}\\n\\ncontract MixinGMX {\\n\\n    using LibERC20TokenV06 for IERC20TokenV06;\\n    using LibSafeMathV06 for uint256;\\n\\n    function _tradeGMX(\\n        IERC20TokenV06 buyToken,\\n        uint256 sellAmount,\\n        bytes memory bridgeData\\n    )\\n        public\\n        returns (uint256 boughtAmount)\\n    {\\n        address _router;\\n        address reader;\\n        address vault;\\n        address[] memory _path;\\n        IGmxRouter router;\\n        IERC20TokenV06[] memory path;\\n\\n        {\\n            //decode the bridge data\\n            (_router, reader, vault, _path) = abi.decode(bridgeData, (address, address, address, address[]));\\n            // To get around `abi.decode()` not supporting interface array types.\\n            assembly { path := _path }\\n        }\\n\\n        require(path.length >= 2, \\\"MixinGMX/PATH_LENGTH_MUST_BE_AT_LEAST_TWO\\\");\\n        require(\\n            path[path.length - 1] == buyToken,\\n            \\\"MixinGMX/LAST_ELEMENT_OF_PATH_MUST_MATCH_OUTPUT_TOKEN\\\"\\n        );\\n\\n        //connect to the GMX router\\n        router = IGmxRouter(_router);\\n\\n        // Grant the GMX router an allowance to sell the first token.\\n        path[0].approveIfBelow(address(router), sellAmount);\\n\\n        //track the balance to know how much we bought\\n        uint256 beforeBalance = buyToken.balanceOf(address(this));\\n        router.swap(\\n            // Convert to `buyToken` along this path.\\n            _path,\\n             // Sell all tokens we hold.\\n            sellAmount,\\n             // Minimum buy amount.\\n            0,\\n            // Recipient is `this`.\\n            address(this)\\n        );\\n\\n        //calculate the difference in balance from preswap->postswap to find how many tokens out\\n        boughtAmount = buyToken.balanceOf(address(this)).safeSub(beforeBalance);\\n\\n        return boughtAmount;\\n    }\\n}\",\"keccak256\":\"0x017ff109568a331ff8f6166c9b4873be3093de0335b3b3421e3da3781a8ee1a3\",\"license\":\"Apache-2.0\"},\"src/zero-ex/transformers/bridges/mixins/MixinKyberDmm.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n\\n  Copyright 2021 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../../../contracts-erc20/v06/LibERC20TokenV06.sol\\\";\\nimport \\\"../../../../contracts-erc20/v06/IERC20TokenV06.sol\\\";\\nimport \\\"../IBridgeAdapter.sol\\\";\\n\\n/*\\n    KyberDmm Router\\n*/\\ninterface IKyberDmmRouter {\\n\\n    /// @dev Swaps an exact amount of input tokens for as many output tokens as possible, along the route determined by the path.\\n    ///      The first element of path is the input token, the last is the output token, and any intermediate elements represent\\n    ///      intermediate pairs to trade through (if, for example, a direct pair does not exist).\\n    /// @param amountIn The amount of input tokens to send.\\n    /// @param amountOutMin The minimum amount of output tokens that must be received for the transaction not to revert.\\n    /// @param pools An array of pool addresses. pools.length must be >= 1.\\n    /// @param path An array of token addresses. path.length must be >= 2. Pools for each consecutive pair of addresses must exist and have liquidity.\\n    /// @param to Recipient of the output tokens.\\n    /// @param deadline Unix timestamp after which the transaction will revert.\\n    /// @return amounts The input token amount and all subsequent output token amounts.\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata pools,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n}\\n\\ncontract MixinKyberDmm {\\n\\n    using LibERC20TokenV06 for IERC20TokenV06;\\n\\n    function _tradeKyberDmm(\\n        IERC20TokenV06 buyToken,\\n        uint256 sellAmount,\\n        bytes memory bridgeData\\n    )\\n        internal\\n        returns (uint256 boughtAmount)\\n    {\\n        address router;\\n        address[] memory pools;\\n        address[] memory path;\\n        (router, pools, path) = abi.decode(bridgeData, (address, address[], address[]));\\n\\n        require(pools.length >= 1, \\\"MixinKyberDmm/POOLS_LENGTH_MUST_BE_AT_LEAST_ONE\\\");\\n        require(path.length == pools.length + 1, \\\"MixinKyberDmm/ARRAY_LENGTH_MISMATCH\\\");\\n         require(\\n             path[path.length - 1] == address(buyToken),\\n             \\\"MixinKyberDmm/LAST_ELEMENT_OF_PATH_MUST_MATCH_OUTPUT_TOKEN\\\"\\n         );\\n        // Grant the KyberDmm router an allowance to sell the first token.\\n        IERC20TokenV06(path[0]).approveIfBelow(address(router), sellAmount);\\n\\n        uint[] memory amounts = IKyberDmmRouter(router).swapExactTokensForTokens(\\n             // Sell all tokens we hold.\\n            sellAmount,\\n             // Minimum buy amount.\\n            1,\\n            pools,\\n            // Convert to `buyToken` along this path.\\n            path,\\n            // Recipient is `this`.\\n            address(this),\\n            // Expires after this block.\\n            block.timestamp\\n        );\\n        return amounts[amounts.length-1];\\n    }\\n}\\n\",\"keccak256\":\"0xed32d09dd76f863268f090b7f9a467c6226e89e32c08f602734cfa6b22202358\",\"license\":\"Apache-2.0\"},\"src/zero-ex/transformers/bridges/mixins/MixinLido.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2021 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../../../contracts-erc20/v06/LibERC20TokenV06.sol\\\";\\nimport \\\"../../../../contracts-erc20/v06/IERC20TokenV06.sol\\\";\\nimport \\\"../../../../contracts-erc20/v06/IEtherTokenV06.sol\\\";\\n\\n\\n/// @dev Minimal interface for minting StETH\\ninterface ILido {\\n    /// @dev Adds eth to the pool\\n    /// @param _referral optional address for referrals\\n    /// @return StETH Amount of shares generated\\n    function submit(address _referral) external payable returns (uint256 StETH);\\n    /// @dev Retrieve the current pooled ETH representation of the shares amount\\n    /// @param _sharesAmount amount of shares\\n    /// @return amount of pooled ETH represented by the shares amount\\n    function getPooledEthByShares(uint256 _sharesAmount) external view returns (uint256);\\n}\\n\\n\\ncontract MixinLido {\\n    using LibERC20TokenV06 for IERC20TokenV06;\\n    using LibERC20TokenV06 for IEtherTokenV06;\\n\\n    IEtherTokenV06 private immutable WETH;\\n\\n    constructor(IEtherTokenV06 weth)\\n        public\\n    {\\n        WETH = weth;\\n    }\\n\\n    function _tradeLido(\\n        IERC20TokenV06 sellToken,\\n        IERC20TokenV06 buyToken,\\n        uint256 sellAmount,\\n        bytes memory bridgeData\\n    )\\n        internal\\n        returns (uint256 boughtAmount)\\n    {\\n        (ILido lido) = abi.decode(bridgeData, (ILido));\\n        if (address(sellToken) == address(WETH) && address(buyToken) == address(lido)) {\\n            WETH.withdraw(sellAmount);\\n            boughtAmount = lido.getPooledEthByShares(lido.submit{ value: sellAmount}(address(0)));\\n        } else {\\n            revert(\\\"MixinLido/UNSUPPORTED_TOKEN_PAIR\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x34428b04d166eb2fdec4b070d81659a239d861d76e1dcd39858267b2a40b7ddc\",\"license\":\"Apache-2.0\"},\"src/zero-ex/transformers/bridges/mixins/MixinMStable.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../../../contracts-erc20/v06/LibERC20TokenV06.sol\\\";\\nimport \\\"../../../../contracts-erc20/v06/IERC20TokenV06.sol\\\";\\nimport \\\"../IBridgeAdapter.sol\\\";\\n\\n\\ninterface IMStable {\\n\\n    function swap(\\n        IERC20TokenV06 sellToken,\\n        IERC20TokenV06 buyToken,\\n        uint256 sellAmount,\\n        uint256 minBoughtAmount,\\n        address recipient\\n    )\\n        external\\n        returns (uint256 boughtAmount);\\n}\\n\\ncontract MixinMStable {\\n\\n    using LibERC20TokenV06 for IERC20TokenV06;\\n\\n    function _tradeMStable(\\n        IERC20TokenV06 sellToken,\\n        IERC20TokenV06 buyToken,\\n        uint256 sellAmount,\\n        bytes memory bridgeData\\n    )\\n        internal\\n        returns (uint256 boughtAmount)\\n    {\\n        (IMStable mstable) = abi.decode(bridgeData, (IMStable));\\n\\n        // Grant an allowance to the exchange to spend `sellToken` token.\\n        sellToken.approveIfBelow(address(mstable), sellAmount);\\n\\n        boughtAmount = mstable.swap(\\n            sellToken,\\n            buyToken,\\n            sellAmount,\\n            // Minimum buy amount.\\n            1,\\n            address(this)\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x048583a4786ceebfc71f99ff252bd95c34947a7498d0f9b9c90ae6df5fad0d97\",\"license\":\"Apache-2.0\"},\"src/zero-ex/transformers/bridges/mixins/MixinMakerPSM.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2021 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../../../contracts-erc20/v06/LibERC20TokenV06.sol\\\";\\nimport \\\"../../../../contracts-erc20/v06/IERC20TokenV06.sol\\\";\\nimport \\\"../../../../contracts-utils/v06/LibSafeMathV06.sol\\\";\\n\\ninterface IPSM {\\n    // @dev Get the fee for selling USDC to DAI in PSM\\n    // @return tin toll in [wad]\\n    function tin() external view returns (uint256);\\n    // @dev Get the fee for selling DAI to USDC in PSM\\n    // @return tout toll out [wad]\\n    function tout() external view returns (uint256);\\n\\n    // @dev Get the address of the PSM state Vat\\n    // @return address of the Vat\\n    function vat() external view returns (address);\\n\\n    // @dev Get the address of the underlying vault powering PSM\\n    // @return address of gemJoin contract\\n    function gemJoin() external view returns (address);\\n\\n    // @dev Sell USDC for DAI\\n    // @param usr The address of the account trading USDC for DAI.\\n    // @param gemAmt The amount of USDC to sell in USDC base units\\n    function sellGem(\\n        address usr,\\n        uint256 gemAmt\\n    ) external;\\n    // @dev Buy USDC for DAI\\n    // @param usr The address of the account trading DAI for USDC\\n    // @param gemAmt The amount of USDC to buy in USDC base units\\n    function buyGem(\\n        address usr,\\n        uint256 gemAmt\\n    ) external;\\n}\\n\\ncontract MixinMakerPSM {\\n\\n    using LibERC20TokenV06 for IERC20TokenV06;\\n    using LibSafeMathV06 for uint256;\\n\\n    struct MakerPsmBridgeData {\\n        address psmAddress;\\n        address gemTokenAddres;\\n    }\\n\\n    // Maker units\\n    // wad: fixed point decimal with 18 decimals (for basic quantities, e.g. balances)\\n    uint256 constant private WAD = 10 ** 18;\\n    // ray: fixed point decimal with 27 decimals (for precise quantites, e.g. ratios)\\n    uint256 constant private RAY = 10 ** 27;\\n    // rad: fixed point decimal with 45 decimals (result of integer multiplication with a wad and a ray)\\n    uint256 constant private RAD = 10 ** 45;\\n    // See https://github.com/makerdao/dss/blob/master/DEVELOPING.md\\n\\n    function _tradeMakerPsm(\\n        IERC20TokenV06 sellToken,\\n        IERC20TokenV06 buyToken,\\n        uint256 sellAmount,\\n        bytes memory bridgeData\\n    )\\n        internal\\n        returns (uint256 boughtAmount)\\n    {\\n        // Decode the bridge data.\\n        MakerPsmBridgeData memory data = abi.decode(bridgeData, (MakerPsmBridgeData));\\n        uint256 beforeBalance = buyToken.balanceOf(address(this));\\n\\n        IPSM psm = IPSM(data.psmAddress);\\n\\n        if (address(sellToken) == data.gemTokenAddres) {\\n            sellToken.approveIfBelow(\\n                psm.gemJoin(),\\n                sellAmount\\n            );\\n\\n            psm.sellGem(address(this), sellAmount);\\n        } else if (address(buyToken) == data.gemTokenAddres) {\\n            uint256 feeDivisor = WAD.safeAdd(psm.tout()); // eg. 1.001 * 10 ** 18 with 0.1% fee [tout is in wad];\\n            uint256 buyTokenBaseUnit = uint256(10) ** uint256(buyToken.decimals());\\n            uint256 gemAmount =  sellAmount.safeMul(buyTokenBaseUnit).safeDiv(feeDivisor);\\n\\n            sellToken.approveIfBelow(\\n                data.psmAddress,\\n                sellAmount\\n            );\\n            psm.buyGem(address(this), gemAmount);\\n        }\\n\\n        return buyToken.balanceOf(address(this)).safeSub(beforeBalance);\\n    }\\n}\\n\",\"keccak256\":\"0x1baeca18f2cecae697674b00973e438214f157b628da4f291257d6138f8fdb1c\",\"license\":\"Apache-2.0\"},\"src/zero-ex/transformers/bridges/mixins/MixinMooniswap.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../../../contracts-erc20/v06/LibERC20TokenV06.sol\\\";\\nimport \\\"../../../../contracts-erc20/v06/IERC20TokenV06.sol\\\";\\nimport \\\"../../../../contracts-erc20/v06/IEtherTokenV06.sol\\\";\\nimport \\\"../IBridgeAdapter.sol\\\";\\n\\n\\n/// @dev Moooniswap pool interface.\\ninterface IMooniswapPool {\\n\\n    function swap(\\n        IERC20TokenV06 sellToken,\\n        IERC20TokenV06 buyToken,\\n        uint256 sellAmount,\\n        uint256 minBoughtAmount,\\n        address referrer\\n    )\\n        external\\n        payable\\n        returns (uint256 boughtAmount);\\n}\\n\\n/// @dev BridgeAdapter mixin for mooniswap.\\ncontract MixinMooniswap {\\n\\n    using LibERC20TokenV06 for IERC20TokenV06;\\n    using LibERC20TokenV06 for IEtherTokenV06;\\n\\n    /// @dev WETH token.\\n    IEtherTokenV06 private immutable WETH;\\n\\n    constructor(IEtherTokenV06 weth)\\n        public\\n    {\\n        WETH = weth;\\n    }\\n\\n    function _tradeMooniswap(\\n        IERC20TokenV06 sellToken,\\n        IERC20TokenV06 buyToken,\\n        uint256 sellAmount,\\n        bytes memory bridgeData\\n    )\\n        internal\\n        returns (uint256 boughtAmount)\\n    {\\n        (IMooniswapPool pool) = abi.decode(bridgeData, (IMooniswapPool));\\n\\n        // Convert WETH to ETH.\\n        uint256 ethValue = 0;\\n        if (sellToken == WETH) {\\n            WETH.withdraw(sellAmount);\\n            ethValue = sellAmount;\\n        } else {\\n            // Grant the pool an allowance.\\n            sellToken.approveIfBelow(\\n                address(pool),\\n                sellAmount\\n            );\\n        }\\n\\n        boughtAmount = pool.swap{value: ethValue}(\\n            sellToken == WETH ? IERC20TokenV06(0) : sellToken,\\n            buyToken == WETH ? IERC20TokenV06(0) : buyToken,\\n            sellAmount,\\n            1,\\n            address(0)\\n        );\\n\\n        // Wrap ETH to WETH.\\n        if (buyToken == WETH) {\\n            WETH.deposit{value:boughtAmount}();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xccd5a84a47f26d42dc42f3e0b987f0e471e164fbf72b6ee027f28513114dd2dc\",\"license\":\"Apache-2.0\"},\"src/zero-ex/transformers/bridges/mixins/MixinNerve.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../../../contracts-utils/v06/errors/LibRichErrorsV06.sol\\\";\\nimport \\\"../../../../contracts-erc20/v06/LibERC20TokenV06.sol\\\";\\nimport \\\"../../../../contracts-erc20/v06/IERC20TokenV06.sol\\\";\\nimport \\\"../../../../contracts-utils/v06/LibSafeMathV06.sol\\\";\\n\\ncontract MixinNerve {\\n\\n    using LibERC20TokenV06 for IERC20TokenV06;\\n    using LibSafeMathV06 for uint256;\\n    using LibRichErrorsV06 for bytes;\\n\\n\\n    struct NerveBridgeData {\\n        address pool;\\n        bytes4 exchangeFunctionSelector;\\n        int128 fromCoinIdx;\\n        int128 toCoinIdx;\\n    }\\n\\n    function _tradeNerve(\\n        IERC20TokenV06 sellToken,\\n        uint256 sellAmount,\\n        bytes memory bridgeData\\n    )\\n        internal\\n        returns (uint256 boughtAmount)\\n    {\\n        // Basically a Curve fork but the swap option has a deadline\\n\\n        // Decode the bridge data to get the Curve metadata.\\n        NerveBridgeData memory data = abi.decode(bridgeData, (NerveBridgeData));\\n        sellToken.approveIfBelow(data.pool, sellAmount);\\n        (bool success, bytes memory resultData) =\\n            data.pool.call(abi.encodeWithSelector(\\n                data.exchangeFunctionSelector,\\n                data.fromCoinIdx,\\n                data.toCoinIdx,\\n                // dx\\n                sellAmount,\\n                // min dy\\n                1,\\n                // deadline\\n                block.timestamp\\n            ));\\n        if (!success) {\\n            resultData.rrevert();\\n        }\\n        return abi.decode(resultData, (uint256));\\n    }\\n}\\n\",\"keccak256\":\"0x793cfe2a4070fddaf7acecaa770c0bf6ceec13213ea9cf09c0cf31c81454da56\",\"license\":\"Apache-2.0\"},\"src/zero-ex/transformers/bridges/mixins/MixinOasis.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../../../contracts-erc20/v06/LibERC20TokenV06.sol\\\";\\nimport \\\"../../../../contracts-erc20/v06/IERC20TokenV06.sol\\\";\\nimport \\\"../IBridgeAdapter.sol\\\";\\n\\ninterface IOasis {\\n\\n    /// @dev Sell `sellAmount` of `sellToken` token and receive `buyToken` token.\\n    /// @param sellToken The token being sold.\\n    /// @param sellAmount The amount of `sellToken` token being sold.\\n    /// @param buyToken The token being bought.\\n    /// @param minBoughtAmount Minimum amount of `buyToken` token to buy.\\n    /// @return boughtAmount Amount of `buyToken` bought.\\n    function sellAllAmount(\\n        IERC20TokenV06 sellToken,\\n        uint256 sellAmount,\\n        IERC20TokenV06 buyToken,\\n        uint256 minBoughtAmount\\n    )\\n        external\\n        returns (uint256 boughtAmount);\\n}\\n\\ncontract MixinOasis {\\n\\n    using LibERC20TokenV06 for IERC20TokenV06;\\n\\n    function _tradeOasis(\\n        IERC20TokenV06 sellToken,\\n        IERC20TokenV06 buyToken,\\n        uint256 sellAmount,\\n        bytes memory bridgeData\\n    )\\n        internal\\n        returns (uint256 boughtAmount)\\n    {\\n\\n        (IOasis oasis) = abi.decode(bridgeData, (IOasis));\\n\\n        // Grant an allowance to the exchange to spend `sellToken` token.\\n        sellToken.approveIfBelow(\\n            address(oasis),\\n            sellAmount\\n        );\\n        // Try to sell all of this contract's `sellToken` token balance.\\n        boughtAmount = oasis.sellAllAmount(\\n            sellToken,\\n            sellAmount,\\n            buyToken,\\n            // min fill amount\\n            1\\n        );\\n        return boughtAmount;\\n    }\\n}\\n\",\"keccak256\":\"0xa32cd9dad74b2fb2672e2191ea78e20c8c488cd0cbe0a0b6fb16028cb05375ef\",\"license\":\"Apache-2.0\"},\"src/zero-ex/transformers/bridges/mixins/MixinPlatypus.sol\":{\"content\":\"pragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../../../contracts-erc20/v06/LibERC20TokenV06.sol\\\";\\nimport \\\"../../../../contracts-erc20/v06/IERC20TokenV06.sol\\\";\\nimport \\\"../../../../contracts-utils/v06/LibSafeMathV06.sol\\\";\\n\\n\\ninterface IPlatypusRouter {\\n\\n    function swapTokensForTokens(\\n        address[] calldata tokenPath,\\n        address[] calldata poolPath,\\n        uint256 fromAmount,\\n        uint256 minimumToAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut, uint256 haircut);\\n}\\n\\ncontract MixinPlatypus {\\n\\n    using LibERC20TokenV06 for IERC20TokenV06;\\n    using LibSafeMathV06 for uint256;\\n\\n    function _tradePlatypus(\\n        IERC20TokenV06 buyToken,\\n        uint256 sellAmount,\\n        bytes memory bridgeData\\n    )\\n        public\\n        returns (uint256 boughtAmount)\\n    {\\n        IPlatypusRouter router;\\n        address _router;\\n        address[] memory _pool;\\n        IERC20TokenV06[] memory path;\\n        address[] memory _path;\\n\\n        {\\n            (_router, _pool, _path) = abi.decode(bridgeData, (address, address[], address[]));\\n\\n            // To get around `abi.decode()` not supporting interface array types.\\n            assembly { path := _path }\\n        }\\n\\n        //connect to the ptp router\\n        router = IPlatypusRouter(_router);\\n\\n        require(path.length >= 2, \\\"MixinPlatypus/PATH_LENGTH_MUST_BE_AT_LEAST_TWO\\\");\\n        require(\\n            path[path.length - 1] == buyToken,\\n            \\\"MixinPlatypus/LAST_ELEMENT_OF_PATH_MUST_MATCH_OUTPUT_TOKEN\\\"\\n        );\\n        // Grant the Platypus router an allowance to sell the first token.\\n        path[0].approveIfBelow(address(router), sellAmount);\\n\\n        //keep track of the previous balance to confirm amount out\\n        uint256 beforeBalance = buyToken.balanceOf(address(this));\\n\\n        (uint256 amountOut, uint256 haircut) = router.swapTokensForTokens(\\n            // Convert to `buyToken` along this path.\\n            _path,\\n            // pool to swap on\\n            _pool,\\n             // Sell all tokens we hold.\\n            sellAmount,\\n             // Minimum buy amount.\\n            0,\\n            // Recipient is `this`.\\n            address(this),\\n\\n            block.timestamp + 1\\n        );\\n        //calculate the buy amount from the tokens we recieved\\n        boughtAmount = buyToken.balanceOf(address(this)).safeSub(beforeBalance);\\n        return boughtAmount;\\n    }\\n}\",\"keccak256\":\"0x22127d6b8ecc0e42a72976e3a98b6b10eaea6fb3de85aeea77f7b91d654f7f5e\"},\"src/zero-ex/transformers/bridges/mixins/MixinShell.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../../../contracts-erc20/v06/LibERC20TokenV06.sol\\\";\\nimport \\\"../../../../contracts-erc20/v06/IERC20TokenV06.sol\\\";\\n\\ninterface IShell {\\n\\n    function originSwap(\\n        IERC20TokenV06 from,\\n        IERC20TokenV06 to,\\n        uint256 fromAmount,\\n        uint256 minTargetAmount,\\n        uint256 deadline\\n    )\\n        external\\n        returns (uint256 toAmount);\\n}\\n\\ncontract MixinShell {\\n\\n    using LibERC20TokenV06 for IERC20TokenV06;\\n\\n    function _tradeShell(\\n        IERC20TokenV06 sellToken,\\n        IERC20TokenV06 buyToken,\\n        uint256 sellAmount,\\n        bytes memory bridgeData\\n    )\\n        internal\\n        returns (uint256 boughtAmount)\\n    {\\n        IShell pool = abi.decode(bridgeData, (IShell));\\n\\n        // Grant the Shell contract an allowance to sell the first token.\\n        IERC20TokenV06(sellToken).approveIfBelow(\\n            address(pool),\\n            sellAmount\\n        );\\n\\n        boughtAmount = pool.originSwap(\\n            sellToken,\\n            buyToken,\\n             // Sell all tokens we hold.\\n            sellAmount,\\n             // Minimum buy amount.\\n            1,\\n            // deadline\\n            block.timestamp + 1\\n        );\\n        return boughtAmount;\\n    }\\n}\\n\",\"keccak256\":\"0x1d6879d50b52295c631605167aac0aa281ad58c846a1880248983461b0f3ad21\",\"license\":\"Apache-2.0\"},\"src/zero-ex/transformers/bridges/mixins/MixinUniswap.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../../../contracts-erc20/v06/LibERC20TokenV06.sol\\\";\\nimport \\\"../../../../contracts-erc20/v06/IERC20TokenV06.sol\\\";\\nimport \\\"../../../../contracts-erc20/v06/IEtherTokenV06.sol\\\";\\nimport \\\"../IBridgeAdapter.sol\\\";\\n\\ninterface IUniswapExchangeFactory {\\n\\n    /// @dev Get the exchange for a token.\\n    /// @param token The token contract.\\n    function getExchange(IERC20TokenV06 token)\\n        external\\n        view\\n        returns (IUniswapExchange exchange);\\n}\\n\\ninterface IUniswapExchange {\\n\\n    /// @dev Buys at least `minTokensBought` tokens with ETH and transfer them\\n    ///      to `recipient`.\\n    /// @param minTokensBought The minimum number of tokens to buy.\\n    /// @param deadline Time when this order expires.\\n    /// @param recipient Who to transfer the tokens to.\\n    /// @return tokensBought Amount of tokens bought.\\n    function ethToTokenTransferInput(\\n        uint256 minTokensBought,\\n        uint256 deadline,\\n        address recipient\\n    )\\n        external\\n        payable\\n        returns (uint256 tokensBought);\\n\\n    /// @dev Buys at least `minEthBought` ETH with tokens.\\n    /// @param tokensSold Amount of tokens to sell.\\n    /// @param minEthBought The minimum amount of ETH to buy.\\n    /// @param deadline Time when this order expires.\\n    /// @return ethBought Amount of tokens bought.\\n    function tokenToEthSwapInput(\\n        uint256 tokensSold,\\n        uint256 minEthBought,\\n        uint256 deadline\\n    )\\n        external\\n        returns (uint256 ethBought);\\n\\n    /// @dev Buys at least `minTokensBought` tokens with the exchange token\\n    ///      and transfer them to `recipient`.\\n    /// @param tokensSold Amount of tokens to sell.\\n    /// @param minTokensBought The minimum number of tokens to buy.\\n    /// @param minEthBought The minimum amount of intermediate ETH to buy.\\n    /// @param deadline Time when this order expires.\\n    /// @param recipient Who to transfer the tokens to.\\n    /// @param buyToken The token being bought.\\n    /// @return tokensBought Amount of tokens bought.\\n    function tokenToTokenTransferInput(\\n        uint256 tokensSold,\\n        uint256 minTokensBought,\\n        uint256 minEthBought,\\n        uint256 deadline,\\n        address recipient,\\n        IERC20TokenV06 buyToken\\n    )\\n        external\\n        returns (uint256 tokensBought);\\n\\n    /// @dev Buys at least `minTokensBought` tokens with the exchange token.\\n    /// @param tokensSold Amount of tokens to sell.\\n    /// @param minTokensBought The minimum number of tokens to buy.\\n    /// @param minEthBought The minimum amount of intermediate ETH to buy.\\n    /// @param deadline Time when this order expires.\\n    /// @param buyToken The token being bought.\\n    /// @return tokensBought Amount of tokens bought.\\n    function tokenToTokenSwapInput(\\n        uint256 tokensSold,\\n        uint256 minTokensBought,\\n        uint256 minEthBought,\\n        uint256 deadline,\\n        IERC20TokenV06 buyToken\\n    )\\n        external\\n        returns (uint256 tokensBought);\\n}\\n\\ncontract MixinUniswap {\\n\\n    using LibERC20TokenV06 for IERC20TokenV06;\\n\\n    /// @dev Mainnet address of the WETH contract.\\n    IEtherTokenV06 private immutable WETH;\\n\\n    constructor(IEtherTokenV06 weth)\\n        public\\n    {\\n        WETH = weth;\\n    }\\n\\n    function _tradeUniswap(\\n        IERC20TokenV06 sellToken,\\n        IERC20TokenV06 buyToken,\\n        uint256 sellAmount,\\n        bytes memory bridgeData\\n    )\\n        internal\\n        returns (uint256 boughtAmount)\\n    {\\n        IUniswapExchangeFactory exchangeFactory =\\n            abi.decode(bridgeData, (IUniswapExchangeFactory));\\n\\n        // Get the exchange for the token pair.\\n        IUniswapExchange exchange = _getUniswapExchangeForTokenPair(\\n            exchangeFactory,\\n            sellToken,\\n            buyToken\\n        );\\n\\n        // Convert from WETH to a token.\\n        if (sellToken == WETH) {\\n            // Unwrap the WETH.\\n            WETH.withdraw(sellAmount);\\n            // Buy as much of `buyToken` token with ETH as possible\\n            boughtAmount = exchange.ethToTokenTransferInput{ value: sellAmount }(\\n                // Minimum buy amount.\\n                1,\\n                // Expires after this block.\\n                block.timestamp,\\n                // Recipient is `this`.\\n                address(this)\\n            );\\n\\n        // Convert from a token to WETH.\\n        } else if (buyToken == WETH) {\\n            // Grant the exchange an allowance.\\n            sellToken.approveIfBelow(\\n                address(exchange),\\n                sellAmount\\n            );\\n            // Buy as much ETH with `sellToken` token as possible.\\n            boughtAmount = exchange.tokenToEthSwapInput(\\n                // Sell all tokens we hold.\\n                sellAmount,\\n                // Minimum buy amount.\\n                1,\\n                // Expires after this block.\\n                block.timestamp\\n            );\\n            // Wrap the ETH.\\n            WETH.deposit{ value: boughtAmount }();\\n        // Convert from one token to another.\\n        } else {\\n            // Grant the exchange an allowance.\\n            sellToken.approveIfBelow(\\n                address(exchange),\\n                sellAmount\\n            );\\n            // Buy as much `buyToken` token with `sellToken` token\\n            boughtAmount = exchange.tokenToTokenSwapInput(\\n                // Sell all tokens we hold.\\n                sellAmount,\\n                // Minimum buy amount.\\n                1,\\n                // Must buy at least 1 intermediate wei of ETH.\\n                1,\\n                // Expires after this block.\\n                block.timestamp,\\n                // Convert to `buyToken`.\\n                buyToken\\n            );\\n        }\\n\\n        return boughtAmount;\\n    }\\n\\n    /// @dev Retrieves the uniswap exchange for a given token pair.\\n    ///      In the case of a WETH-token exchange, this will be the non-WETH token.\\n    ///      In th ecase of a token-token exchange, this will be the first token.\\n    /// @param exchangeFactory The exchange factory.\\n    /// @param sellToken The address of the token we are converting from.\\n    /// @param buyToken The address of the token we are converting to.\\n    /// @return exchange The uniswap exchange.\\n    function _getUniswapExchangeForTokenPair(\\n        IUniswapExchangeFactory exchangeFactory,\\n        IERC20TokenV06 sellToken,\\n        IERC20TokenV06 buyToken\\n    )\\n        private\\n        view\\n        returns (IUniswapExchange exchange)\\n    {\\n        // Whichever isn't WETH is the exchange token.\\n        exchange = sellToken == WETH\\n            ? exchangeFactory.getExchange(buyToken)\\n            : exchangeFactory.getExchange(sellToken);\\n        require(address(exchange) != address(0), \\\"MixinUniswap/NO_EXCHANGE\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x8ed957425b8e702e1a7e8bcd165a5a07823da130ceb857a8b81e0247b282c962\",\"license\":\"Apache-2.0\"},\"src/zero-ex/transformers/bridges/mixins/MixinUniswapV2.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../../../contracts-erc20/v06/LibERC20TokenV06.sol\\\";\\nimport \\\"../../../../contracts-erc20/v06/IERC20TokenV06.sol\\\";\\nimport \\\"../IBridgeAdapter.sol\\\";\\n\\n/*\\n    UniswapV2\\n*/\\ninterface IUniswapV2Router02 {\\n\\n    /// @dev Swaps an exact amount of input tokens for as many output tokens as possible, along the route determined by the path.\\n    ///      The first element of path is the input token, the last is the output token, and any intermediate elements represent\\n    ///      intermediate pairs to trade through (if, for example, a direct pair does not exist).\\n    /// @param amountIn The amount of input tokens to send.\\n    /// @param amountOutMin The minimum amount of output tokens that must be received for the transaction not to revert.\\n    /// @param path An array of token addresses. path.length must be >= 2. Pools for each consecutive pair of addresses must exist and have liquidity.\\n    /// @param to Recipient of the output tokens.\\n    /// @param deadline Unix timestamp after which the transaction will revert.\\n    /// @return amounts The input token amount and all subsequent output token amounts.\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        IERC20TokenV06[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n}\\n\\ncontract MixinUniswapV2 {\\n\\n    using LibERC20TokenV06 for IERC20TokenV06;\\n\\n    function _tradeUniswapV2(\\n        IERC20TokenV06 buyToken,\\n        uint256 sellAmount,\\n        bytes memory bridgeData\\n    )\\n        internal\\n        returns (uint256 boughtAmount)\\n    {\\n        IUniswapV2Router02 router;\\n        IERC20TokenV06[] memory path;\\n        {\\n            address[] memory _path;\\n            (router, _path) = abi.decode(bridgeData, (IUniswapV2Router02, address[]));\\n            // To get around `abi.decode()` not supporting interface array types.\\n            assembly { path := _path }\\n        }\\n\\n        require(path.length >= 2, \\\"MixinUniswapV2/PATH_LENGTH_MUST_BE_AT_LEAST_TWO\\\");\\n        require(\\n            path[path.length - 1] == buyToken,\\n            \\\"MixinUniswapV2/LAST_ELEMENT_OF_PATH_MUST_MATCH_OUTPUT_TOKEN\\\"\\n        );\\n        // Grant the Uniswap router an allowance to sell the first token.\\n        path[0].approveIfBelow(address(router), sellAmount);\\n\\n        uint[] memory amounts = router.swapExactTokensForTokens(\\n             // Sell all tokens we hold.\\n            sellAmount,\\n             // Minimum buy amount.\\n            1,\\n            // Convert to `buyToken` along this path.\\n            path,\\n            // Recipient is `this`.\\n            address(this),\\n            // Expires after this block.\\n            block.timestamp\\n        );\\n        return amounts[amounts.length-1];\\n    }\\n}\\n\",\"keccak256\":\"0x8974a7c4973be50fe4bd911d04c1756a2f7575299448e098703d83e14b7e93c2\",\"license\":\"Apache-2.0\"},\"src/zero-ex/transformers/bridges/mixins/MixinUniswapV3.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n\\n  Copyright 2021 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../../../contracts-erc20/v06/LibERC20TokenV06.sol\\\";\\nimport \\\"../../../../contracts-erc20/v06/IERC20TokenV06.sol\\\";\\nimport \\\"../IBridgeAdapter.sol\\\";\\n\\ninterface IUniswapV3Router {\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    function exactInput(ExactInputParams memory params)\\n        external\\n        payable\\n        returns (uint256 amountOut);\\n}\\n\\ncontract MixinUniswapV3 {\\n\\n    using LibERC20TokenV06 for IERC20TokenV06;\\n\\n    function _tradeUniswapV3(\\n        IERC20TokenV06 sellToken,\\n        uint256 sellAmount,\\n        bytes memory bridgeData\\n    )\\n        internal\\n        returns (uint256 boughtAmount)\\n    {\\n        (IUniswapV3Router router, bytes memory path) =\\n            abi.decode(bridgeData, (IUniswapV3Router, bytes));\\n\\n        // Grant the Uniswap router an allowance to sell the sell token.\\n        sellToken.approveIfBelow(address(router), sellAmount);\\n\\n        boughtAmount = router.exactInput(IUniswapV3Router.ExactInputParams({\\n            path: path,\\n            recipient: address(this),\\n            deadline: block.timestamp,\\n            amountIn: sellAmount,\\n            amountOutMinimum: 1\\n        }));\\n    }\\n}\\n\",\"keccak256\":\"0x5df5461b832c5fe1373d068d5f3ebf8ab9fade72e38338e24a161131b49c7326\",\"license\":\"Apache-2.0\"},\"src/zero-ex/transformers/bridges/mixins/MixinZeroExBridge.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\nimport \\\"../../../../contracts-erc20/v06/LibERC20TokenV06.sol\\\";\\nimport \\\"../../../../contracts-erc20/v06/IERC20TokenV06.sol\\\";\\nimport \\\"../../../../contracts-utils/v06/LibSafeMathV06.sol\\\";\\nimport \\\"../../../vendor/ILiquidityProvider.sol\\\";\\n\\n\\ncontract MixinZeroExBridge {\\n\\n    using LibERC20TokenV06 for IERC20TokenV06;\\n    using LibSafeMathV06 for uint256;\\n\\n    function _tradeZeroExBridge(\\n        IERC20TokenV06 sellToken,\\n        IERC20TokenV06 buyToken,\\n        uint256 sellAmount,\\n        bytes memory bridgeData\\n    )\\n        internal\\n        returns (uint256 boughtAmount)\\n    {\\n        (ILiquidityProvider provider, bytes memory lpData) =\\n            abi.decode(bridgeData, (ILiquidityProvider, bytes));\\n        // Trade the good old fashioned way\\n        sellToken.compatTransfer(\\n            address(provider),\\n            sellAmount\\n        );\\n        boughtAmount = provider.sellTokenForToken(\\n            sellToken,\\n            buyToken,\\n            address(this), // recipient\\n            1, // minBuyAmount\\n            lpData\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x5b0894b8199295e7384b3956b4faba51bdec2c378a6b29f297ffd5e538e85188\",\"license\":\"Apache-2.0\"},\"src/zero-ex/vendor/ILiquidityProvider.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\nimport \\\"../../contracts-erc20/v06/IERC20TokenV06.sol\\\";\\n\\n\\ninterface ILiquidityProvider {\\n\\n    /// @dev An optional event an LP can emit for each fill against a source.\\n    /// @param inputToken The input token.\\n    /// @param outputToken The output token.\\n    /// @param inputTokenAmount How much input token was sold.\\n    /// @param outputTokenAmount How much output token was bought.\\n    /// @param sourceId A bytes32 encoded ascii source ID. E.g., `bytes32('Curve')`/\\n    /// @param sourceAddress An optional address associated with the source (e.g, a curve pool).\\n    /// @param sourceId A bytes32 encoded ascii source ID. E.g., `bytes32('Curve')`/\\n    /// @param sourceAddress An optional address associated with the source (e.g, a curve pool).\\n    /// @param sender The caller of the LP.\\n    /// @param recipient The recipient of the output tokens.\\n    event LiquidityProviderFill(\\n        IERC20TokenV06 inputToken,\\n        IERC20TokenV06 outputToken,\\n        uint256 inputTokenAmount,\\n        uint256 outputTokenAmount,\\n        bytes32 sourceId,\\n        address sourceAddress,\\n        address sender,\\n        address recipient\\n    );\\n\\n    /// @dev Trades `inputToken` for `outputToken`. The amount of `inputToken`\\n    ///      to sell must be transferred to the contract prior to calling this\\n    ///      function to trigger the trade.\\n    /// @param inputToken The token being sold.\\n    /// @param outputToken The token being bought.\\n    /// @param recipient The recipient of the bought tokens.\\n    /// @param minBuyAmount The minimum acceptable amount of `outputToken` to buy.\\n    /// @param auxiliaryData Arbitrary auxiliary data supplied to the contract.\\n    /// @return boughtAmount The amount of `outputToken` bought.\\n    function sellTokenForToken(\\n        IERC20TokenV06 inputToken,\\n        IERC20TokenV06 outputToken,\\n        address recipient,\\n        uint256 minBuyAmount,\\n        bytes calldata auxiliaryData\\n    )\\n        external\\n        returns (uint256 boughtAmount);\\n\\n    /// @dev Trades ETH for token. ETH must either be attached to this function\\n    ///      call or sent to the contract prior to calling this function to\\n    ///      trigger the trade.\\n    /// @param outputToken The token being bought.\\n    /// @param recipient The recipient of the bought tokens.\\n    /// @param minBuyAmount The minimum acceptable amount of `outputToken` to buy.\\n    /// @param auxiliaryData Arbitrary auxiliary data supplied to the contract.\\n    /// @return boughtAmount The amount of `outputToken` bought.\\n    function sellEthForToken(\\n        IERC20TokenV06 outputToken,\\n        address recipient,\\n        uint256 minBuyAmount,\\n        bytes calldata auxiliaryData\\n    )\\n        external\\n        payable\\n        returns (uint256 boughtAmount);\\n\\n    /// @dev Trades token for ETH. The token must be sent to the contract prior\\n    ///      to calling this function to trigger the trade.\\n    /// @param inputToken The token being sold.\\n    /// @param recipient The recipient of the bought tokens.\\n    /// @param minBuyAmount The minimum acceptable amount of ETH to buy.\\n    /// @param auxiliaryData Arbitrary auxiliary data supplied to the contract.\\n    /// @return boughtAmount The amount of ETH bought.\\n    function sellTokenForEth(\\n        IERC20TokenV06 inputToken,\\n        address payable recipient,\\n        uint256 minBuyAmount,\\n        bytes calldata auxiliaryData\\n    )\\n        external\\n        returns (uint256 boughtAmount);\\n\\n    /// @dev Quotes the amount of `outputToken` that would be obtained by\\n    ///      selling `sellAmount` of `inputToken`.\\n    /// @param inputToken Address of the taker token (what to sell). Use\\n    ///        the wETH address if selling ETH.\\n    /// @param outputToken Address of the maker token (what to buy). Use\\n    ///        the wETH address if buying ETH.\\n    /// @param sellAmount Amount of `inputToken` to sell.\\n    /// @return outputTokenAmount Amount of `outputToken` that would be obtained.\\n    function getSellQuote(\\n        IERC20TokenV06 inputToken,\\n        IERC20TokenV06 outputToken,\\n        uint256 sellAmount\\n    )\\n        external\\n        view\\n        returns (uint256 outputTokenAmount);\\n}\\n\",\"keccak256\":\"0xbc026c875350ad912e4d25d0b80e1aa2db448e97e09f16f7bee616a7bccce0e5\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x6101406040523480156200001257600080fd5b506040516200602a3803806200602a833981016040819052620000359162000066565b60601b6001600160601b031916608081905260a081905260c081905260e08190526101008190526101205262000096565b60006020828403121562000078578081fd5b81516001600160a01b03811681146200008f578182fd5b9392505050565b60805160601c60a05160601c60c05160601c60e05160601c6101005160601c6101205160601c615ede6200014c6000398061156352806115f2528061170d528061182d52806141e352508061232f52806123be528061246d52806124c9528061259e52806125f25250806134de52806135a4525080610bdb5280610c6d5280610ec95280610f20525080613a635280613af45280613d005280613e45525080612dcb5280612eea528061308d5250615ede6000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806360574bd2146100515780638dc669fa1461007a578063ca0dfe891461008f578063f712a148146100a2575b600080fd5b61006461005f366004614b99565b6100b5565b6040516100719190615c81565b60405180910390f35b6100826103bc565b6040516100719190614f69565b61006461009d366004614b99565b6103d4565b6100646100b0366004614c94565b61065d565b600080600080606060006060878060200190518101906100d5919061481e565b80519399509197509550935083915060021115610127576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161011e906154c4565b60405180910390fd5b8973ffffffffffffffffffffffffffffffffffffffff168160018351038151811061014e57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16146101a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161011e906159b2565b8591506101e5828a836000815181106101b857fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16610ab29092919063ffffffff16565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff8c16906370a082319061023a903090600401614f69565b60206040518083038186803b15801561025257600080fd5b505afa158015610266573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061028a9190614da7565b6040517f6023e96600000000000000000000000000000000000000000000000000000000815290915073ffffffffffffffffffffffffffffffffffffffff841690636023e966906102e69087908e9060009030906004016150a2565b600060405180830381600087803b15801561030057600080fd5b505af1158015610314573d6000803e3d6000fd5b505050506103ab818c73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016103559190614f69565b60206040518083038186803b15801561036d57600080fd5b505afa158015610381573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a59190614da7565b90610b8e565b9750505050505050505b9392505050565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b60008060006060806060868060200190518101906103f29190614894565b805192975087965090945092508291506002111561043c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161011e90615b26565b8873ffffffffffffffffffffffffffffffffffffffff168260018451038151811061046357fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16146104b8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161011e90615521565b6104ca8589846000815181106101b857fe5b6040517f70a0823100000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff8b16906370a082319061051f903090600401614f69565b60206040518083038186803b15801561053757600080fd5b505afa15801561054b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056f9190614da7565b90506000808773ffffffffffffffffffffffffffffffffffffffff166321579b7985888e600030426001016040518763ffffffff1660e01b81526004016105bb96959493929190615041565b6040805180830381600087803b1580156105d457600080fd5b505af11580156105e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060c9190614dbf565b9150915061064d838d73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016103559190614f69565b9c9b505050505050505050505050565b835160009060801c60018114156106855761067e8585858960600151610bb7565b9150610a69565b6fffffffffffffffffffffffffffffffff8116601414156106b05761067e8585858960600151610fed565b6fffffffffffffffffffffffffffffffff8116601214156106da5761067e85848860600151611245565b6fffffffffffffffffffffffffffffffff8116600214156107045761067e84848860600151611356565b6fffffffffffffffffffffffffffffffff81166003141561072f5761067e8585858960600151611539565b6fffffffffffffffffffffffffffffffff81166004141561075a5761067e858585896060015161198c565b6fffffffffffffffffffffffffffffffff8116601114156107855761067e8585858960600151611a9d565b6fffffffffffffffffffffffffffffffff8116601914156107ae5761067e838760600151611c3e565b6fffffffffffffffffffffffffffffffff8116601014156107d95761067e8585858960600151611eba565b6fffffffffffffffffffffffffffffffff8116600614156108045761067e8585858960600151612312565b6fffffffffffffffffffffffffffffffff81166007141561082f5761067e858585896060015161267b565b6fffffffffffffffffffffffffffffffff81166008141561085a5761067e8585858960600151612710565b6fffffffffffffffffffffffffffffffff8116600914156108855761067e85858589606001516127a3565b6fffffffffffffffffffffffffffffffff8116600a14156108af5761067e8584886060015161283a565b6fffffffffffffffffffffffffffffffff8116600b14156108d95761067e85848860600151612aa7565b6fffffffffffffffffffffffffffffffff8116600c14156109035761067e84848860600151612be6565b6fffffffffffffffffffffffffffffffff8116600d141561092d5761067e84848860600151612cbf565b6fffffffffffffffffffffffffffffffff8116600f14156109575761067e85848860600151613116565b6fffffffffffffffffffffffffffffffff8116601314156109815761067e8484886060015161329e565b6fffffffffffffffffffffffffffffffff8116601514156109ac5761067e85858589606001516134c3565b6fffffffffffffffffffffffffffffffff8116601714156109d75761067e8585858960600151613768565b6fffffffffffffffffffffffffffffffff811660181415610a025761067e8585858960600151613987565b6fffffffffffffffffffffffffffffffff8116601a1415610a2c5761067e848488606001516100b5565b6fffffffffffffffffffffffffffffffff8116601b1415610a565761067e848488606001516103d4565b610a668585858960600151613fec565b91505b85516040517fe59e71a14fe90157eedc866c4f8c767d3943d6b6b2e8cd64dddcc92ab4c55af891610aa191889088908890889061513a565b60405180910390a150949350505050565b6040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152819073ffffffffffffffffffffffffffffffffffffffff85169063dd62ed3e90610b089030908790600401614f8a565b60206040518083038186803b158015610b2057600080fd5b505afa158015610b34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b589190614da7565b1015610b8957610b8983837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff614086565b505050565b600082821115610bac57610bac610ba760028585614132565b6141d7565b508082035b92915050565b6000610bc16145b6565b82806020019051810190610bd59190614d4a565b905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161415610cd957506040517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152849073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690632e1a7d4d90610ca2908490600401615c81565b600060405180830381600087803b158015610cbc57600080fd5b505af1158015610cd0573d6000803e3d6000fd5b50505050610cfd565b8151610cfd9073ffffffffffffffffffffffffffffffffffffffff89169087610ab2565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff8816906370a0823190610d52903090600401614f69565b60206040518083038186803b158015610d6a57600080fd5b505afa158015610d7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da29190614da7565b905060006060846000015173ffffffffffffffffffffffffffffffffffffffff16848660200151876040015188606001518c6001604051602401610de994939291906153b1565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909416939093179092529051610e729190614f4d565b60006040518083038185875af1925050503d8060008114610eaf576040519150601f19603f3d011682016040523d82523d6000602084013e610eb4565b606091505b509150915081610ec757610ec7816141d7565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff161415610fa0574795507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0876040518263ffffffff1660e01b81526004016000604051808303818588803b158015610f8657600080fd5b505af1158015610f9a573d6000803e3d6000fd5b50505050505b610fdd838a73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016103559190614f69565b955050505050505b949350505050565b6000610ff76145b6565b8280602001905181019061100b9190614d4a565b80519091506110329073ffffffffffffffffffffffffffffffffffffffff88169086610ab2565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff8716906370a0823190611087903090600401614f69565b60206040518083038186803b15801561109f57600080fd5b505afa1580156110b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d79190614da7565b905060006060836000015173ffffffffffffffffffffffffffffffffffffffff168460200151856040015186606001518a600160405160240161111d94939291906153b1565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925290516111a69190614f4d565b6000604051808303816000865af19150503d80600081146111e3576040519150601f19603f3d011682016040523d82523d6000602084013e6111e8565b606091505b5091509150816111fb576111fb816141d7565b611238838973ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016103559190614f69565b9998505050505050505050565b60008060608380602001905181019061125e9190614c14565b909250905061128473ffffffffffffffffffffffffffffffffffffffff87168387610ab2565b6040805160a0810182528281523060208201524281830152606081018790526001608082015290517fc04b8d5900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84169163c04b8d59916112fa9190600401615b83565b602060405180830381600087803b15801561131457600080fd5b505af1158015611328573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134c9190614da7565b9695505050505050565b600080606080848060200190518101906113709190614ac5565b805191945092506002111590506113b3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161011e90615695565b8573ffffffffffffffffffffffffffffffffffffffff16816001835103815181106113da57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff161461142f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161011e90615a6c565b6114418286836000815181106101b857fe5b6040517f38ed173900000000000000000000000000000000000000000000000000000000815260609073ffffffffffffffffffffffffffffffffffffffff8416906338ed17399061149f908990600190879030904290600401615ce7565b600060405180830381600087803b1580156114b957600080fd5b505af11580156114cd573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526115139190810190614908565b90508060018251038151811061152557fe5b602002602001015193505050509392505050565b600080828060200190518101906115509190614802565b9050600061155f8288886141df565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff16141561170b576040517f2e1a7d4d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690632e1a7d4d90611627908890600401615c81565b600060405180830381600087803b15801561164157600080fd5b505af1158015611655573d6000803e3d6000fd5b50506040517fad65d76d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416925063ad65d76d915087906116b29060019042903090600401615404565b6020604051808303818588803b1580156116cb57600080fd5b505af11580156116df573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906117049190614da7565b9250611982565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614156118b15761178073ffffffffffffffffffffffffffffffffffffffff88168287610ab2565b6040517f95e3c50b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8216906395e3c50b906117d79088906001904290600401615d91565b602060405180830381600087803b1580156117f157600080fd5b505af1158015611805573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118299190614da7565b92507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0846040518263ffffffff1660e01b81526004016000604051808303818588803b15801561189357600080fd5b505af11580156118a7573d6000803e3d6000fd5b5050505050611982565b6118d273ffffffffffffffffffffffffffffffffffffffff88168287610ab2565b6040517fddf7e1a700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82169063ddf7e1a79061192d908890600190819042908d90600401615d58565b602060405180830381600087803b15801561194757600080fd5b505af115801561195b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061197f9190614da7565b92505b5050949350505050565b600080828060200190518101906119a39190614802565b90506119c673ffffffffffffffffffffffffffffffffffffffff87168286610ab2565b6040517f8201aa3f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821690638201aa3f90611a4190899088908a906001907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9060040161526f565b6040805180830381600087803b158015611a5a57600080fd5b505af1158015611a6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a929190614dbf565b509695505050505050565b6000611aa76145dd565b82806020019051810190611abb9190614c59565b8051909150611ae29073ffffffffffffffffffffffffffffffffffffffff88169086610ab2565b611aea6145f4565b6040805160c0810190915260208084015182528101600081526020018873ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff168152602001868152602001604051806020016040528060008152508152509050611b616145b6565b506040805160808101825230808252600060208301819052828401919091526060820152835191517f52bbbe29000000000000000000000000000000000000000000000000000000008152909173ffffffffffffffffffffffffffffffffffffffff16906352bbbe2990611be090859085906001904290600401615be9565b602060405180830381600087803b158015611bfa57600080fd5b505af1158015611c0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c329190614da7565b98975050505050505050565b60008060608084806020019051810190611c589190614998565b9250925092506060819050611c758488836000815181106101b857fe5b8683600081518110611c8357fe5b602002602001015160600181815250506060815167ffffffffffffffff81118015611cad57600080fd5b50604051908082528060200260200182016040528015611cd7578160200160208202803683370190505b50905060005b8151811015611d26577f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff828281518110611d1357fe5b6020908102919091010152600101611cdd565b50604080516080810182523080825260006020830181905282840191909152606082810182905292517f945bcec900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff89169263945bcec992611daa9290918a91899190899042600101906004016152e0565b600060405180830381600087803b158015611dc457600080fd5b505af1158015611dd8573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052611e1e9190810190614908565b9050600081600183510381518110611e3257fe5b60200260200101511315611e72576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161011e906155db565b80600182510381518110611e8257fe5b60200260200101517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff02965050505050505092915050565b6000611ec46145dd565b82806020019051810190611ed89190614d65565b905060008573ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611f159190614f69565b60206040518083038186803b158015611f2d57600080fd5b505afa158015611f41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f659190614da7565b825160208401519192509073ffffffffffffffffffffffffffffffffffffffff898116911614156120ba5761202f8173ffffffffffffffffffffffffffffffffffffffff166301664f666040518163ffffffff1660e01b815260040160206040518083038186803b158015611fd957600080fd5b505afa158015611fed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120119190614802565b73ffffffffffffffffffffffffffffffffffffffff8a169088610ab2565b6040517f9599127600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8216906395991276906120839030908a90600401614fb1565b600060405180830381600087803b15801561209d57600080fd5b505af11580156120b1573d6000803e3d6000fd5b505050506122d5565b826020015173ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614156122d55760006121848273ffffffffffffffffffffffffffffffffffffffff1663fae036d56040518163ffffffff1660e01b815260040160206040518083038186803b15801561213d57600080fd5b505afa158015612151573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121759190614da7565b670de0b6b3a7640000906143cc565b905060008873ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156121ce57600080fd5b505afa1580156121e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122069190614de2565b60ff16600a0a905060006122248361221e8b856143e8565b90614419565b865190915061224b9073ffffffffffffffffffffffffffffffffffffffff8d16908b610ab2565b6040517f8d7ef9bb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff851690638d7ef9bb9061229f9030908590600401614fb1565b600060405180830381600087803b1580156122b957600080fd5b505af11580156122cd573d6000803e3d6000fd5b505050505050505b611c32828873ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016103559190614f69565b600080828060200190518101906123299190614802565b905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff16141561242d576040517f2e1a7d4d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690632e1a7d4d906123f3908890600401615c81565b600060405180830381600087803b15801561240d57600080fd5b505af1158015612421573d6000803e3d6000fd5b5050505084905061244e565b61244e73ffffffffffffffffffffffffffffffffffffffff88168387610ab2565b8173ffffffffffffffffffffffffffffffffffffffff1663d5bcb9b5827f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff16146124c457896124c7565b60005b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff16146125205789612523565b60005b89600160006040518763ffffffff1660e01b81526004016125489594939291906151bd565b6020604051808303818588803b15801561256157600080fd5b505af1158015612575573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061259a9190614da7565b92507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161415611982577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0846040518263ffffffff1660e01b81526004016000604051808303818588803b15801561265857600080fd5b505af115801561266c573d6000803e3d6000fd5b50505050505050949350505050565b600080828060200190518101906126929190614802565b90506126b573ffffffffffffffffffffffffffffffffffffffff87168286610ab2565b6040517fd5bcb9b500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82169063d5bcb9b5906112fa9089908990899060019030906004016151bd565b600080828060200190518101906127279190614802565b905061274a73ffffffffffffffffffffffffffffffffffffffff87168286610ab2565b6040517f0621b4f600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821690630621b4f6906112fa90899088908a90600190600401615238565b600080828060200190518101906127ba9190614802565b90506127dd73ffffffffffffffffffffffffffffffffffffffff87168286610ab2565b6040517f0b2583c800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821690630b2583c8906112fa90899089908990600190428201906004016151fa565b600080600080848060200190518101906128549190614b14565b9194509250905061287c73ffffffffffffffffffffffffffffffffffffffff88168388610ab2565b801561293f57604080516000815260208101918290527f8dae73330000000000000000000000000000000000000000000000000000000090915273ffffffffffffffffffffffffffffffffffffffff831690638dae7333906128e690899060019060248101615d30565b602060405180830381600087803b15801561290057600080fd5b505af1158015612914573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129389190614da7565b9350612a9d565b6040517fca19ebd900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84169063ca19ebd9906129939085908a90600401614fb1565b60206040518083038186803b1580156129ab57600080fd5b505afa1580156129bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129e39190614da7565b604080516000815260208101918290527fe67ce7060000000000000000000000000000000000000000000000000000000090915290945073ffffffffffffffffffffffffffffffffffffffff83169063e67ce70690612a499087908a9060248101615d30565b602060405180830381600087803b158015612a6357600080fd5b505af1158015612a77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a9b9190614da7565b505b5050509392505050565b600080600083806020019051810190612ac09190614b60565b9092509050612ae673ffffffffffffffffffffffffffffffffffffffff87168387614443565b80612b94576040517fdd93f59a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83169063dd93f59a90612b3d903090600401614f69565b602060405180830381600087803b158015612b5757600080fd5b505af1158015612b6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b8f9190614da7565b61134c565b6040517fbd6015b400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83169063bd6015b4906112fa903090600401614f69565b60008060608084806020019051810190612c009190614ac5565b80519194509250600211159050612c43576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161011e90615638565b8573ffffffffffffffffffffffffffffffffffffffff1681600183510381518110612c6a57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff161461142f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161011e90615ac9565b60008060608084806020019051810190612cd99190614ac5565b80519194509250600211159050612d1c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161011e90615467565b8573ffffffffffffffffffffffffffffffffffffffff1681600183510381518110612d4357fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff161480612e19575073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff1681600183510381518110612da357fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16148015612e1957507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16145b612e4f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161011e9061589b565b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff1682600081518110612e8957fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff161415612f59576040517f2e1a7d4d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690632e1a7d4d90612f1f908990600401615c81565b600060405180830381600087803b158015612f3957600080fd5b505af1158015612f4d573d6000803e3d6000fd5b50505050859050612f78565b612f7882600081518110612f6957fe5b60200260200101518488610ab2565b6040517fb77d239b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84169063b77d239b908390612fd89086908b90600190309060009081906004016150e7565b6020604051808303818588803b158015612ff157600080fd5b505af1158015613005573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061302a9190614da7565b935073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168260018451038151811061306757fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff161415612a9d577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0856040518263ffffffff1660e01b81526004016000604051808303818588803b1580156130f357600080fd5b505af1158015613107573d6000803e3d6000fd5b50505050505050509392505050565b60006131206145b6565b828060200190518101906131349190614d4a565b805190915061315b9073ffffffffffffffffffffffffffffffffffffffff87169086610ab2565b60006060826000015173ffffffffffffffffffffffffffffffffffffffff16836020015184604001518560600151896001426040516024016131a19594939291906153d6565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090941693909317909252905161322a9190614f4d565b6000604051808303816000865af19150503d8060008114613267576040519150601f19603f3d011682016040523d82523d6000602084013e61326c565b606091505b50915091508161327f5761327f816141d7565b808060200190518101906132939190614da7565b979650505050505050565b600080606080848060200190518101906132b89190614894565b81519295509093509150600111156132fc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161011e906158f8565b815160010181511461333a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161011e906156f2565b8673ffffffffffffffffffffffffffffffffffffffff168160018351038151811061336157fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16146133b6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161011e9061557e565b6133c88387836000815181106101b857fe5b6040517fceb757d500000000000000000000000000000000000000000000000000000000815260609073ffffffffffffffffffffffffffffffffffffffff85169063ceb757d590613428908a906001908890889030904290600401615c8a565b600060405180830381600087803b15801561344257600080fd5b505af1158015613456573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261349c9190810190614908565b9050806001825103815181106134ae57fe5b60200260200101519450505050509392505050565b600080828060200190518101906134da9190614802565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614801561356257508073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16145b1561372d576040517f2e1a7d4d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690632e1a7d4d906135d9908790600401615c81565b600060405180830381600087803b1580156135f357600080fd5b505af1158015613607573d6000803e3d6000fd5b50506040517fa1903eab00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84169250637a28fb889150829063a1903eab90889061366890600090600401614f69565b6020604051808303818588803b15801561368157600080fd5b505af1158015613695573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906136ba9190614da7565b6040518263ffffffff1660e01b81526004016136d69190615c81565b60206040518083038186803b1580156136ee57600080fd5b505afa158015613702573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137269190614da7565b915061375f565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161011e9061574f565b50949350505050565b6000806000838060200190518101906137819190614be6565b90925090506137a773ffffffffffffffffffffffffffffffffffffffff88168387610ab2565b8073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161415613870576040517fe8eda9df00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83169063e8eda9df90613834908a9089903090600090600401615007565b600060405180830381600087803b15801561384e57600080fd5b505af1158015613862573d6000803e3d6000fd5b505050508492505050610fe5565b8073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161415613955576040517f69328dec00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8316906369328dec906138fa90899089903090600401614fd7565b602060405180830381600087803b15801561391457600080fd5b505af1158015613928573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061394c9190614da7565b92505050610fe5565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161011e90615a0f565b6000808280602001905181019061399e9190614802565b905060008573ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016139db9190614f69565b60206040518083038186803b1580156139f357600080fd5b505afa158015613a07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a2b9190614da7565b90508173ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161415613cca577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161415613bc2576040517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152829073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690632e1a7d4d90613b29908990600401615c81565b600060405180830381600087803b158015613b4357600080fd5b505af1158015613b57573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16631249c58b876040518263ffffffff1660e01b81526004016000604051808303818588803b158015613ba357600080fd5b505af1158015613bb7573d6000803e3d6000fd5b505050505050613cc5565b613be373ffffffffffffffffffffffffffffffffffffffff88168387610ab2565b6040517fa0712d68000000000000000000000000000000000000000000000000000000008152829060009073ffffffffffffffffffffffffffffffffffffffff83169063a0712d6890613c3a908a90600401615c81565b602060405180830381600087803b158015613c5457600080fd5b505af1158015613c68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c8c9190614da7565b14613cc3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161011e90615784565b505b613faf565b8173ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161415613faf577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161415613ecd576040517fdb006a750000000000000000000000000000000000000000000000000000000081524790839060009073ffffffffffffffffffffffffffffffffffffffff83169063db006a7590613dab908b90600401615c81565b602060405180830381600087803b158015613dc557600080fd5b505af1158015613dd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613dfd9190614da7565b14613e34576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161011e9061583e565b476000613e418285610b8e565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015613eab57600080fd5b505af1158015613ebf573d6000803e3d6000fd5b505050505050505050613faf565b6040517fdb006a75000000000000000000000000000000000000000000000000000000008152829060009073ffffffffffffffffffffffffffffffffffffffff83169063db006a7590613f24908a90600401615c81565b602060405180830381600087803b158015613f3e57600080fd5b505af1158015613f52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f769190614da7565b14613fad576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161011e90615955565b505b61197f818773ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016103559190614f69565b6000806060838060200190518101906140059190614c14565b909250905061402b73ffffffffffffffffffffffffffffffffffffffff88168387614443565b6040517f65d02b0400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8316906365d02b049061192d908a908a9030906001908890600401615176565b606063095ea7b360e01b83836040516024016140a3929190614fb1565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152905061412c8482614460565b50505050565b606063e946c1bb60e01b848484604051602401614151939291906152b0565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915290509392505050565b805160208201fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146142db576040517f06f2bf6200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8516906306f2bf6290614286908690600401614f69565b60206040518083038186803b15801561429e57600080fd5b505afa1580156142b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142d69190614802565b61437d565b6040517f06f2bf6200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8516906306f2bf629061432d908590600401614f69565b60206040518083038186803b15801561434557600080fd5b505afa158015614359573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061437d9190614802565b905073ffffffffffffffffffffffffffffffffffffffff81166103b5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161011e90615430565b6000828201838110156103b5576103b5610ba760008686614132565b6000826143f757506000610bb1565b8282028284828161440457fe5b04146103b5576103b5610ba760018686614132565b60008161442f5761442f610ba760038585614132565b600082848161443a57fe5b04949350505050565b606063a9059cbb60e01b83836040516024016140a3929190614fb1565b600060608373ffffffffffffffffffffffffffffffffffffffff16836040516144899190614f4d565b6000604051808303816000865af19150503d80600081146144c6576040519150601f19603f3d011682016040523d82523d6000602084013e6144cb565b606091505b5091509150816144de576144de816141d7565b805161452557833b8061451d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161011e906157e1565b505050614562565b602081511061455957600061453b826000614566565b9050806001141561454e57505050614562565b614557826141d7565b505b61412c816141d7565b5050565b60006103b583836000816020018351101561458e5761458e610ba76005855185602001614597565b50016020015190565b6060632800659560e01b848484604051602401614151939291906152d2565b60408051608081018252600080825260208201819052918101829052606081019190915290565b604080518082019091526000808252602082015290565b6040805160c08101909152600080825260208201908152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001606081525090565b600082601f830112614667578081fd5b815161467a61467582615dce565b615da7565b81815291506020808301908481018184028601820187101561469b57600080fd5b60005b848110156146c35781516146b181615e69565b8452928201929082019060010161469e565b505050505092915050565b600082601f8301126146de578081fd5b81356146ec61467582615dee565b915080825283602082850101111561470357600080fd5b8060208401602084013760009082016020015292915050565b600082601f83011261472c578081fd5b815161473a61467582615dee565b915080825283602082850101111561475157600080fd5b614762816020840160208601615e30565b5092915050565b8035610bb181615e69565b600060808284031215614785578081fd5b61478f6080615da7565b9050815161479c81615e69565b815260208201517fffffffff00000000000000000000000000000000000000000000000000000000811681146147d157600080fd5b602082015260408201516147e481615e99565b604082015260608201516147f781615e99565b606082015292915050565b600060208284031215614813578081fd5b81516103b581615e69565b60008060008060808587031215614833578283fd5b845161483e81615e69565b602086015190945061484f81615e69565b604086015190935061486081615e69565b606086015190925067ffffffffffffffff81111561487c578182fd5b61488887828801614657565b91505092959194509250565b6000806000606084860312156148a8578081fd5b83516148b381615e69565b602085015190935067ffffffffffffffff808211156148d0578283fd5b6148dc87838801614657565b935060408601519150808211156148f1578283fd5b506148fe86828701614657565b9150509250925092565b6000602080838503121561491a578182fd5b825167ffffffffffffffff811115614930578283fd5b8301601f81018513614940578283fd5b805161494e61467582615dce565b818152838101908385018584028501860189101561496a578687fd5b8694505b8385101561498c57805183526001949094019391850191850161496e565b50979650505050505050565b6000806000606084860312156149ac578081fd5b83516149b781615e69565b602085015190935067ffffffffffffffff808211156149d4578283fd5b818601915086601f8301126149e7578283fd5b81516149f561467582615dce565b818152602080820191908501865b84811015614aab578151870160a07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0828f03011215614a40578889fd5b614a4a60a0615da7565b6020820151815260408201516020820152606082015160408201526080820151606082015260a082015188811115614a80578a8bfd5b614a8f8f60208386010161471c565b6080830152508552506020938401939190910190600101614a03565b5050604089015190965093505050808211156148f1578283fd5b60008060408385031215614ad7578182fd5b8251614ae281615e69565b602084015190925067ffffffffffffffff811115614afe578182fd5b614b0a85828601614657565b9150509250929050565b600080600060608486031215614b28578081fd5b8351614b3381615e69565b6020850151909350614b4481615e69565b6040850151909250614b5581615e8b565b809150509250925092565b60008060408385031215614b72578182fd5b8251614b7d81615e69565b6020840151909250614b8e81615e8b565b809150509250929050565b600080600060608486031215614bad578081fd5b8335614bb881615e69565b925060208401359150604084013567ffffffffffffffff811115614bda578182fd5b6148fe868287016146ce565b60008060408385031215614bf8578182fd5b8251614c0381615e69565b6020840151909250614b8e81615e69565b60008060408385031215614c26578182fd5b8251614c3181615e69565b602084015190925067ffffffffffffffff811115614c4d578182fd5b614b0a8582860161471c565b600060408284031215614c6a578081fd5b614c746040615da7565b8251614c7f81615e69565b81526020928301519281019290925250919050565b60008060008060808587031215614ca9578182fd5b843567ffffffffffffffff80821115614cc0578384fd5b9086019060808289031215614cd3578384fd5b614cdd6080615da7565b823581526020830135602082015260408301356040820152606083013582811115614d06578586fd5b614d128a8286016146ce565b606083015250809650505050614d2b8660208701614769565b9250614d3a8660408701614769565b9396929550929360600135925050565b600060808284031215614d5b578081fd5b6103b58383614774565b600060408284031215614d76578081fd5b614d806040615da7565b8251614d8b81615e69565b81526020830151614d9b81615e69565b60208201529392505050565b600060208284031215614db8578081fd5b5051919050565b60008060408385031215614dd1578182fd5b505080516020909101519092909150565b600060208284031215614df3578081fd5b815160ff811681146103b5578182fd5b6000815180845260208085019450808401835b83811015614e4857815173ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101614e16565b509495945050505050565b6000815180845260208085019450808401835b83811015614e4857815187529582019590820190600101614e66565b60008151808452614e9a816020860160208601615e30565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b600081518352602082015160208401526040820151604084015260608201516060840152608082015160a06080850152610fe560a0850182614e82565b73ffffffffffffffffffffffffffffffffffffffff808251168352602082015115156020840152806040830151166040840152506060810151151560608301525050565b60008251614f5f818460208701615e30565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff93841681526020810192909252909116604082015260600190565b73ffffffffffffffffffffffffffffffffffffffff948516815260208101939093529216604082015261ffff909116606082015260800190565b600060c0825261505460c0830189614e03565b82810360208401526150668189614e03565b91505085604083015284606083015273ffffffffffffffffffffffffffffffffffffffff841660808301528260a0830152979650505050505050565b6000608082526150b56080830187614e03565b602083019590955250604081019290925273ffffffffffffffffffffffffffffffffffffffff16606090910152919050565b600060c082526150fa60c0830189614e03565b602083019790975250604081019490945273ffffffffffffffffffffffffffffffffffffffff92831660608501529116608083015260a090910152919050565b94855273ffffffffffffffffffffffffffffffffffffffff93841660208601529190921660408401526060830191909152608082015260a00190565b600073ffffffffffffffffffffffffffffffffffffffff8088168352808716602084015280861660408401525083606083015260a0608083015261329360a0830184614e82565b73ffffffffffffffffffffffffffffffffffffffff9586168152938516602085015260408401929092526060830152909116608082015260a00190565b73ffffffffffffffffffffffffffffffffffffffff958616815293909416602084015260408301919091526060820152608081019190915260a00190565b73ffffffffffffffffffffffffffffffffffffffff9485168152602081019390935292166040820152606081019190915260800190565b73ffffffffffffffffffffffffffffffffffffffff958616815260208101949094529190931660408301526060820192909252608081019190915260a00190565b60608101600485106152be57fe5b938152602081019290925260409091015290565b60608101600885106152be57fe5b60006101208083016152f18a615e5c565b898452602080850192909252885190819052610140808501928281028601909101918a8201855b82811015615364577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec0888603018652615352858351614ecc565b95840195945090830190600101615318565b50505050838103604085015261537a8189614e03565b91505061538a6060840187614f09565b82810360e084015261539c8186614e53565b91505082610100830152979650505050505050565b600f94850b81529290930b6020830152604082015260ff909116606082015260800190565b600f95860b81529390940b6020840152604083019190915260ff166060820152608081019190915260a00190565b928352602083019190915273ffffffffffffffffffffffffffffffffffffffff16604082015260600190565b60208082526018908201527f4d6978696e556e69737761702f4e4f5f45584348414e47450000000000000000604082015260600190565b6020808252602c908201527f4d6978696e42616e636f722f504154485f4c454e4754485f4d5553545f42455f60408201527f41545f4c454153545f54574f0000000000000000000000000000000000000000606082015260800190565b60208082526029908201527f4d6978696e474d582f504154485f4c454e4754485f4d5553545f42455f41545f60408201527f4c454153545f54574f0000000000000000000000000000000000000000000000606082015260800190565b6020808252603a908201527f4d6978696e506c6174797075732f4c4153545f454c454d454e545f4f465f504160408201527f54485f4d5553545f4d415443485f4f55545055545f544f4b454e000000000000606082015260800190565b6020808252603a908201527f4d6978696e4b79626572446d6d2f4c4153545f454c454d454e545f4f465f504160408201527f54485f4d5553545f4d415443485f4f55545055545f544f4b454e000000000000606082015260800190565b60208082526021908201527f556e65787065637465642042616c616e63657256324261746368206f7574707560408201527f7400000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602f908201527f4d6978696e43727970746f436f6d2f504154485f4c454e4754485f4d5553545f60408201527f42455f41545f4c454153545f54574f0000000000000000000000000000000000606082015260800190565b6020808252602f908201527f4d6978696e556e697377617056322f504154485f4c454e4754485f4d5553545f60408201527f42455f41545f4c454153545f54574f0000000000000000000000000000000000606082015260800190565b60208082526023908201527f4d6978696e4b79626572446d6d2f41525241595f4c454e4754485f4d49534d4160408201527f5443480000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252818101527f4d6978696e4c69646f2f554e535550504f525445445f544f4b454e5f50414952604082015260600190565b60208082526023908201527f4d6978696e436f6d706f756e642f4641494c45445f544f5f4d494e545f43544f60408201527f4b454e0000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526027908201527f696e76616c696420746f6b656e20616464726573732c20636f6e7461696e732060408201527f6e6f20636f646500000000000000000000000000000000000000000000000000606082015260800190565b60208082526025908201527f4d6978696e436f6d706f756e642f4641494c45445f544f5f52454445454d5f4360408201527f4554484552000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526038908201527f4d6978696e42616e636f722f4c4153545f454c454d454e545f4f465f5041544860408201527f5f4d5553545f4d415443485f4f55545055545f544f4b454e0000000000000000606082015260800190565b6020808252602f908201527f4d6978696e4b79626572446d6d2f504f4f4c535f4c454e4754485f4d5553545f60408201527f42455f41545f4c454153545f4f4e450000000000000000000000000000000000606082015260800190565b60208082526025908201527f4d6978696e436f6d706f756e642f4641494c45445f544f5f52454445454d5f4360408201527f544f4b454e000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526035908201527f4d6978696e474d582f4c4153545f454c454d454e545f4f465f504154485f4d5560408201527f53545f4d415443485f4f55545055545f544f4b454e0000000000000000000000606082015260800190565b60208082526022908201527f4d6978696e4161766556322f554e535550504f525445445f544f4b454e5f504160408201527f4952000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252603b908201527f4d6978696e556e697377617056322f4c4153545f454c454d454e545f4f465f5060408201527f4154485f4d5553545f4d415443485f4f55545055545f544f4b454e0000000000606082015260800190565b6020808252603b908201527f4d6978696e43727970746f436f6d2f4c4153545f454c454d454e545f4f465f5060408201527f4154485f4d5553545f4d415443485f4f55545055545f544f4b454e0000000000606082015260800190565b6020808252602e908201527f4d6978696e506c6174797075732f504154485f4c454e4754485f4d5553545f4260408201527f455f41545f4c454153545f54574f000000000000000000000000000000000000606082015260800190565b600060208252825160a06020840152615b9f60c0840182614e82565b905073ffffffffffffffffffffffffffffffffffffffff60208501511660408401526040840151606084015260608401516080840152608084015160a08401528091505092915050565b600060e08252855160e08301526020860151615c0481615e5c565b610100830152604086015173ffffffffffffffffffffffffffffffffffffffff908116610120840152606087015116610140830152608086015161016083015260a086015160c0610180840152615c5f6101a0840182614e82565b915050615c6f6020830186614f09565b60a082019390935260c0015292915050565b90815260200190565b600087825286602083015260c06040830152615ca960c0830187614e03565b8281036060840152615cbb8187614e03565b73ffffffffffffffffffffffffffffffffffffffff959095166080840152505060a00152949350505050565b600086825285602083015260a06040830152615d0660a0830186614e03565b73ffffffffffffffffffffffffffffffffffffffff94909416606083015250608001529392505050565b600084825283602083015260606040830152615d4f6060830184614e82565b95945050505050565b94855260208501939093526040840191909152606083015273ffffffffffffffffffffffffffffffffffffffff16608082015260a00190565b9283526020830191909152604082015260600190565b60405181810167ffffffffffffffff81118282101715615dc657600080fd5b604052919050565b600067ffffffffffffffff821115615de4578081fd5b5060209081020190565b600067ffffffffffffffff821115615e04578081fd5b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60005b83811015615e4b578181015183820152602001615e33565b8381111561412c5750506000910152565b60028110615e6657fe5b50565b73ffffffffffffffffffffffffffffffffffffffff81168114615e6657600080fd5b8015158114615e6657600080fd5b80600f0b8114615e6657600080fdfea264697066735822122076b3563c2b8b87fce9e5153af2b3587ea63cc58822af9bc49bd5232bc7c65f9f64736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c806360574bd2146100515780638dc669fa1461007a578063ca0dfe891461008f578063f712a148146100a2575b600080fd5b61006461005f366004614b99565b6100b5565b6040516100719190615c81565b60405180910390f35b6100826103bc565b6040516100719190614f69565b61006461009d366004614b99565b6103d4565b6100646100b0366004614c94565b61065d565b600080600080606060006060878060200190518101906100d5919061481e565b80519399509197509550935083915060021115610127576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161011e906154c4565b60405180910390fd5b8973ffffffffffffffffffffffffffffffffffffffff168160018351038151811061014e57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16146101a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161011e906159b2565b8591506101e5828a836000815181106101b857fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16610ab29092919063ffffffff16565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff8c16906370a082319061023a903090600401614f69565b60206040518083038186803b15801561025257600080fd5b505afa158015610266573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061028a9190614da7565b6040517f6023e96600000000000000000000000000000000000000000000000000000000815290915073ffffffffffffffffffffffffffffffffffffffff841690636023e966906102e69087908e9060009030906004016150a2565b600060405180830381600087803b15801561030057600080fd5b505af1158015610314573d6000803e3d6000fd5b505050506103ab818c73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016103559190614f69565b60206040518083038186803b15801561036d57600080fd5b505afa158015610381573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a59190614da7565b90610b8e565b9750505050505050505b9392505050565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b60008060006060806060868060200190518101906103f29190614894565b805192975087965090945092508291506002111561043c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161011e90615b26565b8873ffffffffffffffffffffffffffffffffffffffff168260018451038151811061046357fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16146104b8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161011e90615521565b6104ca8589846000815181106101b857fe5b6040517f70a0823100000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff8b16906370a082319061051f903090600401614f69565b60206040518083038186803b15801561053757600080fd5b505afa15801561054b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056f9190614da7565b90506000808773ffffffffffffffffffffffffffffffffffffffff166321579b7985888e600030426001016040518763ffffffff1660e01b81526004016105bb96959493929190615041565b6040805180830381600087803b1580156105d457600080fd5b505af11580156105e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060c9190614dbf565b9150915061064d838d73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016103559190614f69565b9c9b505050505050505050505050565b835160009060801c60018114156106855761067e8585858960600151610bb7565b9150610a69565b6fffffffffffffffffffffffffffffffff8116601414156106b05761067e8585858960600151610fed565b6fffffffffffffffffffffffffffffffff8116601214156106da5761067e85848860600151611245565b6fffffffffffffffffffffffffffffffff8116600214156107045761067e84848860600151611356565b6fffffffffffffffffffffffffffffffff81166003141561072f5761067e8585858960600151611539565b6fffffffffffffffffffffffffffffffff81166004141561075a5761067e858585896060015161198c565b6fffffffffffffffffffffffffffffffff8116601114156107855761067e8585858960600151611a9d565b6fffffffffffffffffffffffffffffffff8116601914156107ae5761067e838760600151611c3e565b6fffffffffffffffffffffffffffffffff8116601014156107d95761067e8585858960600151611eba565b6fffffffffffffffffffffffffffffffff8116600614156108045761067e8585858960600151612312565b6fffffffffffffffffffffffffffffffff81166007141561082f5761067e858585896060015161267b565b6fffffffffffffffffffffffffffffffff81166008141561085a5761067e8585858960600151612710565b6fffffffffffffffffffffffffffffffff8116600914156108855761067e85858589606001516127a3565b6fffffffffffffffffffffffffffffffff8116600a14156108af5761067e8584886060015161283a565b6fffffffffffffffffffffffffffffffff8116600b14156108d95761067e85848860600151612aa7565b6fffffffffffffffffffffffffffffffff8116600c14156109035761067e84848860600151612be6565b6fffffffffffffffffffffffffffffffff8116600d141561092d5761067e84848860600151612cbf565b6fffffffffffffffffffffffffffffffff8116600f14156109575761067e85848860600151613116565b6fffffffffffffffffffffffffffffffff8116601314156109815761067e8484886060015161329e565b6fffffffffffffffffffffffffffffffff8116601514156109ac5761067e85858589606001516134c3565b6fffffffffffffffffffffffffffffffff8116601714156109d75761067e8585858960600151613768565b6fffffffffffffffffffffffffffffffff811660181415610a025761067e8585858960600151613987565b6fffffffffffffffffffffffffffffffff8116601a1415610a2c5761067e848488606001516100b5565b6fffffffffffffffffffffffffffffffff8116601b1415610a565761067e848488606001516103d4565b610a668585858960600151613fec565b91505b85516040517fe59e71a14fe90157eedc866c4f8c767d3943d6b6b2e8cd64dddcc92ab4c55af891610aa191889088908890889061513a565b60405180910390a150949350505050565b6040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152819073ffffffffffffffffffffffffffffffffffffffff85169063dd62ed3e90610b089030908790600401614f8a565b60206040518083038186803b158015610b2057600080fd5b505afa158015610b34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b589190614da7565b1015610b8957610b8983837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff614086565b505050565b600082821115610bac57610bac610ba760028585614132565b6141d7565b508082035b92915050565b6000610bc16145b6565b82806020019051810190610bd59190614d4a565b905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161415610cd957506040517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152849073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690632e1a7d4d90610ca2908490600401615c81565b600060405180830381600087803b158015610cbc57600080fd5b505af1158015610cd0573d6000803e3d6000fd5b50505050610cfd565b8151610cfd9073ffffffffffffffffffffffffffffffffffffffff89169087610ab2565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff8816906370a0823190610d52903090600401614f69565b60206040518083038186803b158015610d6a57600080fd5b505afa158015610d7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da29190614da7565b905060006060846000015173ffffffffffffffffffffffffffffffffffffffff16848660200151876040015188606001518c6001604051602401610de994939291906153b1565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909416939093179092529051610e729190614f4d565b60006040518083038185875af1925050503d8060008114610eaf576040519150601f19603f3d011682016040523d82523d6000602084013e610eb4565b606091505b509150915081610ec757610ec7816141d7565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff161415610fa0574795507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0876040518263ffffffff1660e01b81526004016000604051808303818588803b158015610f8657600080fd5b505af1158015610f9a573d6000803e3d6000fd5b50505050505b610fdd838a73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016103559190614f69565b955050505050505b949350505050565b6000610ff76145b6565b8280602001905181019061100b9190614d4a565b80519091506110329073ffffffffffffffffffffffffffffffffffffffff88169086610ab2565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff8716906370a0823190611087903090600401614f69565b60206040518083038186803b15801561109f57600080fd5b505afa1580156110b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d79190614da7565b905060006060836000015173ffffffffffffffffffffffffffffffffffffffff168460200151856040015186606001518a600160405160240161111d94939291906153b1565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925290516111a69190614f4d565b6000604051808303816000865af19150503d80600081146111e3576040519150601f19603f3d011682016040523d82523d6000602084013e6111e8565b606091505b5091509150816111fb576111fb816141d7565b611238838973ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016103559190614f69565b9998505050505050505050565b60008060608380602001905181019061125e9190614c14565b909250905061128473ffffffffffffffffffffffffffffffffffffffff87168387610ab2565b6040805160a0810182528281523060208201524281830152606081018790526001608082015290517fc04b8d5900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84169163c04b8d59916112fa9190600401615b83565b602060405180830381600087803b15801561131457600080fd5b505af1158015611328573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134c9190614da7565b9695505050505050565b600080606080848060200190518101906113709190614ac5565b805191945092506002111590506113b3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161011e90615695565b8573ffffffffffffffffffffffffffffffffffffffff16816001835103815181106113da57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff161461142f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161011e90615a6c565b6114418286836000815181106101b857fe5b6040517f38ed173900000000000000000000000000000000000000000000000000000000815260609073ffffffffffffffffffffffffffffffffffffffff8416906338ed17399061149f908990600190879030904290600401615ce7565b600060405180830381600087803b1580156114b957600080fd5b505af11580156114cd573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526115139190810190614908565b90508060018251038151811061152557fe5b602002602001015193505050509392505050565b600080828060200190518101906115509190614802565b9050600061155f8288886141df565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff16141561170b576040517f2e1a7d4d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690632e1a7d4d90611627908890600401615c81565b600060405180830381600087803b15801561164157600080fd5b505af1158015611655573d6000803e3d6000fd5b50506040517fad65d76d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416925063ad65d76d915087906116b29060019042903090600401615404565b6020604051808303818588803b1580156116cb57600080fd5b505af11580156116df573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906117049190614da7565b9250611982565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614156118b15761178073ffffffffffffffffffffffffffffffffffffffff88168287610ab2565b6040517f95e3c50b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8216906395e3c50b906117d79088906001904290600401615d91565b602060405180830381600087803b1580156117f157600080fd5b505af1158015611805573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118299190614da7565b92507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0846040518263ffffffff1660e01b81526004016000604051808303818588803b15801561189357600080fd5b505af11580156118a7573d6000803e3d6000fd5b5050505050611982565b6118d273ffffffffffffffffffffffffffffffffffffffff88168287610ab2565b6040517fddf7e1a700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82169063ddf7e1a79061192d908890600190819042908d90600401615d58565b602060405180830381600087803b15801561194757600080fd5b505af115801561195b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061197f9190614da7565b92505b5050949350505050565b600080828060200190518101906119a39190614802565b90506119c673ffffffffffffffffffffffffffffffffffffffff87168286610ab2565b6040517f8201aa3f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821690638201aa3f90611a4190899088908a906001907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9060040161526f565b6040805180830381600087803b158015611a5a57600080fd5b505af1158015611a6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a929190614dbf565b509695505050505050565b6000611aa76145dd565b82806020019051810190611abb9190614c59565b8051909150611ae29073ffffffffffffffffffffffffffffffffffffffff88169086610ab2565b611aea6145f4565b6040805160c0810190915260208084015182528101600081526020018873ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff168152602001868152602001604051806020016040528060008152508152509050611b616145b6565b506040805160808101825230808252600060208301819052828401919091526060820152835191517f52bbbe29000000000000000000000000000000000000000000000000000000008152909173ffffffffffffffffffffffffffffffffffffffff16906352bbbe2990611be090859085906001904290600401615be9565b602060405180830381600087803b158015611bfa57600080fd5b505af1158015611c0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c329190614da7565b98975050505050505050565b60008060608084806020019051810190611c589190614998565b9250925092506060819050611c758488836000815181106101b857fe5b8683600081518110611c8357fe5b602002602001015160600181815250506060815167ffffffffffffffff81118015611cad57600080fd5b50604051908082528060200260200182016040528015611cd7578160200160208202803683370190505b50905060005b8151811015611d26577f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff828281518110611d1357fe5b6020908102919091010152600101611cdd565b50604080516080810182523080825260006020830181905282840191909152606082810182905292517f945bcec900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff89169263945bcec992611daa9290918a91899190899042600101906004016152e0565b600060405180830381600087803b158015611dc457600080fd5b505af1158015611dd8573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052611e1e9190810190614908565b9050600081600183510381518110611e3257fe5b60200260200101511315611e72576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161011e906155db565b80600182510381518110611e8257fe5b60200260200101517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff02965050505050505092915050565b6000611ec46145dd565b82806020019051810190611ed89190614d65565b905060008573ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611f159190614f69565b60206040518083038186803b158015611f2d57600080fd5b505afa158015611f41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f659190614da7565b825160208401519192509073ffffffffffffffffffffffffffffffffffffffff898116911614156120ba5761202f8173ffffffffffffffffffffffffffffffffffffffff166301664f666040518163ffffffff1660e01b815260040160206040518083038186803b158015611fd957600080fd5b505afa158015611fed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120119190614802565b73ffffffffffffffffffffffffffffffffffffffff8a169088610ab2565b6040517f9599127600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8216906395991276906120839030908a90600401614fb1565b600060405180830381600087803b15801561209d57600080fd5b505af11580156120b1573d6000803e3d6000fd5b505050506122d5565b826020015173ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614156122d55760006121848273ffffffffffffffffffffffffffffffffffffffff1663fae036d56040518163ffffffff1660e01b815260040160206040518083038186803b15801561213d57600080fd5b505afa158015612151573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121759190614da7565b670de0b6b3a7640000906143cc565b905060008873ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156121ce57600080fd5b505afa1580156121e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122069190614de2565b60ff16600a0a905060006122248361221e8b856143e8565b90614419565b865190915061224b9073ffffffffffffffffffffffffffffffffffffffff8d16908b610ab2565b6040517f8d7ef9bb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff851690638d7ef9bb9061229f9030908590600401614fb1565b600060405180830381600087803b1580156122b957600080fd5b505af11580156122cd573d6000803e3d6000fd5b505050505050505b611c32828873ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016103559190614f69565b600080828060200190518101906123299190614802565b905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff16141561242d576040517f2e1a7d4d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690632e1a7d4d906123f3908890600401615c81565b600060405180830381600087803b15801561240d57600080fd5b505af1158015612421573d6000803e3d6000fd5b5050505084905061244e565b61244e73ffffffffffffffffffffffffffffffffffffffff88168387610ab2565b8173ffffffffffffffffffffffffffffffffffffffff1663d5bcb9b5827f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff16146124c457896124c7565b60005b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff16146125205789612523565b60005b89600160006040518763ffffffff1660e01b81526004016125489594939291906151bd565b6020604051808303818588803b15801561256157600080fd5b505af1158015612575573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061259a9190614da7565b92507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161415611982577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0846040518263ffffffff1660e01b81526004016000604051808303818588803b15801561265857600080fd5b505af115801561266c573d6000803e3d6000fd5b50505050505050949350505050565b600080828060200190518101906126929190614802565b90506126b573ffffffffffffffffffffffffffffffffffffffff87168286610ab2565b6040517fd5bcb9b500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82169063d5bcb9b5906112fa9089908990899060019030906004016151bd565b600080828060200190518101906127279190614802565b905061274a73ffffffffffffffffffffffffffffffffffffffff87168286610ab2565b6040517f0621b4f600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821690630621b4f6906112fa90899088908a90600190600401615238565b600080828060200190518101906127ba9190614802565b90506127dd73ffffffffffffffffffffffffffffffffffffffff87168286610ab2565b6040517f0b2583c800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821690630b2583c8906112fa90899089908990600190428201906004016151fa565b600080600080848060200190518101906128549190614b14565b9194509250905061287c73ffffffffffffffffffffffffffffffffffffffff88168388610ab2565b801561293f57604080516000815260208101918290527f8dae73330000000000000000000000000000000000000000000000000000000090915273ffffffffffffffffffffffffffffffffffffffff831690638dae7333906128e690899060019060248101615d30565b602060405180830381600087803b15801561290057600080fd5b505af1158015612914573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129389190614da7565b9350612a9d565b6040517fca19ebd900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84169063ca19ebd9906129939085908a90600401614fb1565b60206040518083038186803b1580156129ab57600080fd5b505afa1580156129bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129e39190614da7565b604080516000815260208101918290527fe67ce7060000000000000000000000000000000000000000000000000000000090915290945073ffffffffffffffffffffffffffffffffffffffff83169063e67ce70690612a499087908a9060248101615d30565b602060405180830381600087803b158015612a6357600080fd5b505af1158015612a77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a9b9190614da7565b505b5050509392505050565b600080600083806020019051810190612ac09190614b60565b9092509050612ae673ffffffffffffffffffffffffffffffffffffffff87168387614443565b80612b94576040517fdd93f59a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83169063dd93f59a90612b3d903090600401614f69565b602060405180830381600087803b158015612b5757600080fd5b505af1158015612b6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b8f9190614da7565b61134c565b6040517fbd6015b400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83169063bd6015b4906112fa903090600401614f69565b60008060608084806020019051810190612c009190614ac5565b80519194509250600211159050612c43576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161011e90615638565b8573ffffffffffffffffffffffffffffffffffffffff1681600183510381518110612c6a57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff161461142f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161011e90615ac9565b60008060608084806020019051810190612cd99190614ac5565b80519194509250600211159050612d1c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161011e90615467565b8573ffffffffffffffffffffffffffffffffffffffff1681600183510381518110612d4357fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff161480612e19575073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff1681600183510381518110612da357fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16148015612e1957507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16145b612e4f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161011e9061589b565b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff1682600081518110612e8957fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff161415612f59576040517f2e1a7d4d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690632e1a7d4d90612f1f908990600401615c81565b600060405180830381600087803b158015612f3957600080fd5b505af1158015612f4d573d6000803e3d6000fd5b50505050859050612f78565b612f7882600081518110612f6957fe5b60200260200101518488610ab2565b6040517fb77d239b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84169063b77d239b908390612fd89086908b90600190309060009081906004016150e7565b6020604051808303818588803b158015612ff157600080fd5b505af1158015613005573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061302a9190614da7565b935073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168260018451038151811061306757fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff161415612a9d577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0856040518263ffffffff1660e01b81526004016000604051808303818588803b1580156130f357600080fd5b505af1158015613107573d6000803e3d6000fd5b50505050505050509392505050565b60006131206145b6565b828060200190518101906131349190614d4a565b805190915061315b9073ffffffffffffffffffffffffffffffffffffffff87169086610ab2565b60006060826000015173ffffffffffffffffffffffffffffffffffffffff16836020015184604001518560600151896001426040516024016131a19594939291906153d6565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090941693909317909252905161322a9190614f4d565b6000604051808303816000865af19150503d8060008114613267576040519150601f19603f3d011682016040523d82523d6000602084013e61326c565b606091505b50915091508161327f5761327f816141d7565b808060200190518101906132939190614da7565b979650505050505050565b600080606080848060200190518101906132b89190614894565b81519295509093509150600111156132fc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161011e906158f8565b815160010181511461333a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161011e906156f2565b8673ffffffffffffffffffffffffffffffffffffffff168160018351038151811061336157fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16146133b6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161011e9061557e565b6133c88387836000815181106101b857fe5b6040517fceb757d500000000000000000000000000000000000000000000000000000000815260609073ffffffffffffffffffffffffffffffffffffffff85169063ceb757d590613428908a906001908890889030904290600401615c8a565b600060405180830381600087803b15801561344257600080fd5b505af1158015613456573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261349c9190810190614908565b9050806001825103815181106134ae57fe5b60200260200101519450505050509392505050565b600080828060200190518101906134da9190614802565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614801561356257508073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16145b1561372d576040517f2e1a7d4d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690632e1a7d4d906135d9908790600401615c81565b600060405180830381600087803b1580156135f357600080fd5b505af1158015613607573d6000803e3d6000fd5b50506040517fa1903eab00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84169250637a28fb889150829063a1903eab90889061366890600090600401614f69565b6020604051808303818588803b15801561368157600080fd5b505af1158015613695573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906136ba9190614da7565b6040518263ffffffff1660e01b81526004016136d69190615c81565b60206040518083038186803b1580156136ee57600080fd5b505afa158015613702573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137269190614da7565b915061375f565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161011e9061574f565b50949350505050565b6000806000838060200190518101906137819190614be6565b90925090506137a773ffffffffffffffffffffffffffffffffffffffff88168387610ab2565b8073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161415613870576040517fe8eda9df00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83169063e8eda9df90613834908a9089903090600090600401615007565b600060405180830381600087803b15801561384e57600080fd5b505af1158015613862573d6000803e3d6000fd5b505050508492505050610fe5565b8073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161415613955576040517f69328dec00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8316906369328dec906138fa90899089903090600401614fd7565b602060405180830381600087803b15801561391457600080fd5b505af1158015613928573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061394c9190614da7565b92505050610fe5565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161011e90615a0f565b6000808280602001905181019061399e9190614802565b905060008573ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016139db9190614f69565b60206040518083038186803b1580156139f357600080fd5b505afa158015613a07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a2b9190614da7565b90508173ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161415613cca577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161415613bc2576040517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152829073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690632e1a7d4d90613b29908990600401615c81565b600060405180830381600087803b158015613b4357600080fd5b505af1158015613b57573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16631249c58b876040518263ffffffff1660e01b81526004016000604051808303818588803b158015613ba357600080fd5b505af1158015613bb7573d6000803e3d6000fd5b505050505050613cc5565b613be373ffffffffffffffffffffffffffffffffffffffff88168387610ab2565b6040517fa0712d68000000000000000000000000000000000000000000000000000000008152829060009073ffffffffffffffffffffffffffffffffffffffff83169063a0712d6890613c3a908a90600401615c81565b602060405180830381600087803b158015613c5457600080fd5b505af1158015613c68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c8c9190614da7565b14613cc3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161011e90615784565b505b613faf565b8173ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161415613faf577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161415613ecd576040517fdb006a750000000000000000000000000000000000000000000000000000000081524790839060009073ffffffffffffffffffffffffffffffffffffffff83169063db006a7590613dab908b90600401615c81565b602060405180830381600087803b158015613dc557600080fd5b505af1158015613dd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613dfd9190614da7565b14613e34576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161011e9061583e565b476000613e418285610b8e565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015613eab57600080fd5b505af1158015613ebf573d6000803e3d6000fd5b505050505050505050613faf565b6040517fdb006a75000000000000000000000000000000000000000000000000000000008152829060009073ffffffffffffffffffffffffffffffffffffffff83169063db006a7590613f24908a90600401615c81565b602060405180830381600087803b158015613f3e57600080fd5b505af1158015613f52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f769190614da7565b14613fad576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161011e90615955565b505b61197f818773ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016103559190614f69565b6000806060838060200190518101906140059190614c14565b909250905061402b73ffffffffffffffffffffffffffffffffffffffff88168387614443565b6040517f65d02b0400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8316906365d02b049061192d908a908a9030906001908890600401615176565b606063095ea7b360e01b83836040516024016140a3929190614fb1565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152905061412c8482614460565b50505050565b606063e946c1bb60e01b848484604051602401614151939291906152b0565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915290509392505050565b805160208201fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146142db576040517f06f2bf6200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8516906306f2bf6290614286908690600401614f69565b60206040518083038186803b15801561429e57600080fd5b505afa1580156142b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142d69190614802565b61437d565b6040517f06f2bf6200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8516906306f2bf629061432d908590600401614f69565b60206040518083038186803b15801561434557600080fd5b505afa158015614359573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061437d9190614802565b905073ffffffffffffffffffffffffffffffffffffffff81166103b5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161011e90615430565b6000828201838110156103b5576103b5610ba760008686614132565b6000826143f757506000610bb1565b8282028284828161440457fe5b04146103b5576103b5610ba760018686614132565b60008161442f5761442f610ba760038585614132565b600082848161443a57fe5b04949350505050565b606063a9059cbb60e01b83836040516024016140a3929190614fb1565b600060608373ffffffffffffffffffffffffffffffffffffffff16836040516144899190614f4d565b6000604051808303816000865af19150503d80600081146144c6576040519150601f19603f3d011682016040523d82523d6000602084013e6144cb565b606091505b5091509150816144de576144de816141d7565b805161452557833b8061451d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161011e906157e1565b505050614562565b602081511061455957600061453b826000614566565b9050806001141561454e57505050614562565b614557826141d7565b505b61412c816141d7565b5050565b60006103b583836000816020018351101561458e5761458e610ba76005855185602001614597565b50016020015190565b6060632800659560e01b848484604051602401614151939291906152d2565b60408051608081018252600080825260208201819052918101829052606081019190915290565b604080518082019091526000808252602082015290565b6040805160c08101909152600080825260208201908152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001606081525090565b600082601f830112614667578081fd5b815161467a61467582615dce565b615da7565b81815291506020808301908481018184028601820187101561469b57600080fd5b60005b848110156146c35781516146b181615e69565b8452928201929082019060010161469e565b505050505092915050565b600082601f8301126146de578081fd5b81356146ec61467582615dee565b915080825283602082850101111561470357600080fd5b8060208401602084013760009082016020015292915050565b600082601f83011261472c578081fd5b815161473a61467582615dee565b915080825283602082850101111561475157600080fd5b614762816020840160208601615e30565b5092915050565b8035610bb181615e69565b600060808284031215614785578081fd5b61478f6080615da7565b9050815161479c81615e69565b815260208201517fffffffff00000000000000000000000000000000000000000000000000000000811681146147d157600080fd5b602082015260408201516147e481615e99565b604082015260608201516147f781615e99565b606082015292915050565b600060208284031215614813578081fd5b81516103b581615e69565b60008060008060808587031215614833578283fd5b845161483e81615e69565b602086015190945061484f81615e69565b604086015190935061486081615e69565b606086015190925067ffffffffffffffff81111561487c578182fd5b61488887828801614657565b91505092959194509250565b6000806000606084860312156148a8578081fd5b83516148b381615e69565b602085015190935067ffffffffffffffff808211156148d0578283fd5b6148dc87838801614657565b935060408601519150808211156148f1578283fd5b506148fe86828701614657565b9150509250925092565b6000602080838503121561491a578182fd5b825167ffffffffffffffff811115614930578283fd5b8301601f81018513614940578283fd5b805161494e61467582615dce565b818152838101908385018584028501860189101561496a578687fd5b8694505b8385101561498c57805183526001949094019391850191850161496e565b50979650505050505050565b6000806000606084860312156149ac578081fd5b83516149b781615e69565b602085015190935067ffffffffffffffff808211156149d4578283fd5b818601915086601f8301126149e7578283fd5b81516149f561467582615dce565b818152602080820191908501865b84811015614aab578151870160a07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0828f03011215614a40578889fd5b614a4a60a0615da7565b6020820151815260408201516020820152606082015160408201526080820151606082015260a082015188811115614a80578a8bfd5b614a8f8f60208386010161471c565b6080830152508552506020938401939190910190600101614a03565b5050604089015190965093505050808211156148f1578283fd5b60008060408385031215614ad7578182fd5b8251614ae281615e69565b602084015190925067ffffffffffffffff811115614afe578182fd5b614b0a85828601614657565b9150509250929050565b600080600060608486031215614b28578081fd5b8351614b3381615e69565b6020850151909350614b4481615e69565b6040850151909250614b5581615e8b565b809150509250925092565b60008060408385031215614b72578182fd5b8251614b7d81615e69565b6020840151909250614b8e81615e8b565b809150509250929050565b600080600060608486031215614bad578081fd5b8335614bb881615e69565b925060208401359150604084013567ffffffffffffffff811115614bda578182fd5b6148fe868287016146ce565b60008060408385031215614bf8578182fd5b8251614c0381615e69565b6020840151909250614b8e81615e69565b60008060408385031215614c26578182fd5b8251614c3181615e69565b602084015190925067ffffffffffffffff811115614c4d578182fd5b614b0a8582860161471c565b600060408284031215614c6a578081fd5b614c746040615da7565b8251614c7f81615e69565b81526020928301519281019290925250919050565b60008060008060808587031215614ca9578182fd5b843567ffffffffffffffff80821115614cc0578384fd5b9086019060808289031215614cd3578384fd5b614cdd6080615da7565b823581526020830135602082015260408301356040820152606083013582811115614d06578586fd5b614d128a8286016146ce565b606083015250809650505050614d2b8660208701614769565b9250614d3a8660408701614769565b9396929550929360600135925050565b600060808284031215614d5b578081fd5b6103b58383614774565b600060408284031215614d76578081fd5b614d806040615da7565b8251614d8b81615e69565b81526020830151614d9b81615e69565b60208201529392505050565b600060208284031215614db8578081fd5b5051919050565b60008060408385031215614dd1578182fd5b505080516020909101519092909150565b600060208284031215614df3578081fd5b815160ff811681146103b5578182fd5b6000815180845260208085019450808401835b83811015614e4857815173ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101614e16565b509495945050505050565b6000815180845260208085019450808401835b83811015614e4857815187529582019590820190600101614e66565b60008151808452614e9a816020860160208601615e30565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b600081518352602082015160208401526040820151604084015260608201516060840152608082015160a06080850152610fe560a0850182614e82565b73ffffffffffffffffffffffffffffffffffffffff808251168352602082015115156020840152806040830151166040840152506060810151151560608301525050565b60008251614f5f818460208701615e30565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff93841681526020810192909252909116604082015260600190565b73ffffffffffffffffffffffffffffffffffffffff948516815260208101939093529216604082015261ffff909116606082015260800190565b600060c0825261505460c0830189614e03565b82810360208401526150668189614e03565b91505085604083015284606083015273ffffffffffffffffffffffffffffffffffffffff841660808301528260a0830152979650505050505050565b6000608082526150b56080830187614e03565b602083019590955250604081019290925273ffffffffffffffffffffffffffffffffffffffff16606090910152919050565b600060c082526150fa60c0830189614e03565b602083019790975250604081019490945273ffffffffffffffffffffffffffffffffffffffff92831660608501529116608083015260a090910152919050565b94855273ffffffffffffffffffffffffffffffffffffffff93841660208601529190921660408401526060830191909152608082015260a00190565b600073ffffffffffffffffffffffffffffffffffffffff8088168352808716602084015280861660408401525083606083015260a0608083015261329360a0830184614e82565b73ffffffffffffffffffffffffffffffffffffffff9586168152938516602085015260408401929092526060830152909116608082015260a00190565b73ffffffffffffffffffffffffffffffffffffffff958616815293909416602084015260408301919091526060820152608081019190915260a00190565b73ffffffffffffffffffffffffffffffffffffffff9485168152602081019390935292166040820152606081019190915260800190565b73ffffffffffffffffffffffffffffffffffffffff958616815260208101949094529190931660408301526060820192909252608081019190915260a00190565b60608101600485106152be57fe5b938152602081019290925260409091015290565b60608101600885106152be57fe5b60006101208083016152f18a615e5c565b898452602080850192909252885190819052610140808501928281028601909101918a8201855b82811015615364577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec0888603018652615352858351614ecc565b95840195945090830190600101615318565b50505050838103604085015261537a8189614e03565b91505061538a6060840187614f09565b82810360e084015261539c8186614e53565b91505082610100830152979650505050505050565b600f94850b81529290930b6020830152604082015260ff909116606082015260800190565b600f95860b81529390940b6020840152604083019190915260ff166060820152608081019190915260a00190565b928352602083019190915273ffffffffffffffffffffffffffffffffffffffff16604082015260600190565b60208082526018908201527f4d6978696e556e69737761702f4e4f5f45584348414e47450000000000000000604082015260600190565b6020808252602c908201527f4d6978696e42616e636f722f504154485f4c454e4754485f4d5553545f42455f60408201527f41545f4c454153545f54574f0000000000000000000000000000000000000000606082015260800190565b60208082526029908201527f4d6978696e474d582f504154485f4c454e4754485f4d5553545f42455f41545f60408201527f4c454153545f54574f0000000000000000000000000000000000000000000000606082015260800190565b6020808252603a908201527f4d6978696e506c6174797075732f4c4153545f454c454d454e545f4f465f504160408201527f54485f4d5553545f4d415443485f4f55545055545f544f4b454e000000000000606082015260800190565b6020808252603a908201527f4d6978696e4b79626572446d6d2f4c4153545f454c454d454e545f4f465f504160408201527f54485f4d5553545f4d415443485f4f55545055545f544f4b454e000000000000606082015260800190565b60208082526021908201527f556e65787065637465642042616c616e63657256324261746368206f7574707560408201527f7400000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602f908201527f4d6978696e43727970746f436f6d2f504154485f4c454e4754485f4d5553545f60408201527f42455f41545f4c454153545f54574f0000000000000000000000000000000000606082015260800190565b6020808252602f908201527f4d6978696e556e697377617056322f504154485f4c454e4754485f4d5553545f60408201527f42455f41545f4c454153545f54574f0000000000000000000000000000000000606082015260800190565b60208082526023908201527f4d6978696e4b79626572446d6d2f41525241595f4c454e4754485f4d49534d4160408201527f5443480000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252818101527f4d6978696e4c69646f2f554e535550504f525445445f544f4b454e5f50414952604082015260600190565b60208082526023908201527f4d6978696e436f6d706f756e642f4641494c45445f544f5f4d494e545f43544f60408201527f4b454e0000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526027908201527f696e76616c696420746f6b656e20616464726573732c20636f6e7461696e732060408201527f6e6f20636f646500000000000000000000000000000000000000000000000000606082015260800190565b60208082526025908201527f4d6978696e436f6d706f756e642f4641494c45445f544f5f52454445454d5f4360408201527f4554484552000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526038908201527f4d6978696e42616e636f722f4c4153545f454c454d454e545f4f465f5041544860408201527f5f4d5553545f4d415443485f4f55545055545f544f4b454e0000000000000000606082015260800190565b6020808252602f908201527f4d6978696e4b79626572446d6d2f504f4f4c535f4c454e4754485f4d5553545f60408201527f42455f41545f4c454153545f4f4e450000000000000000000000000000000000606082015260800190565b60208082526025908201527f4d6978696e436f6d706f756e642f4641494c45445f544f5f52454445454d5f4360408201527f544f4b454e000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526035908201527f4d6978696e474d582f4c4153545f454c454d454e545f4f465f504154485f4d5560408201527f53545f4d415443485f4f55545055545f544f4b454e0000000000000000000000606082015260800190565b60208082526022908201527f4d6978696e4161766556322f554e535550504f525445445f544f4b454e5f504160408201527f4952000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252603b908201527f4d6978696e556e697377617056322f4c4153545f454c454d454e545f4f465f5060408201527f4154485f4d5553545f4d415443485f4f55545055545f544f4b454e0000000000606082015260800190565b6020808252603b908201527f4d6978696e43727970746f436f6d2f4c4153545f454c454d454e545f4f465f5060408201527f4154485f4d5553545f4d415443485f4f55545055545f544f4b454e0000000000606082015260800190565b6020808252602e908201527f4d6978696e506c6174797075732f504154485f4c454e4754485f4d5553545f4260408201527f455f41545f4c454153545f54574f000000000000000000000000000000000000606082015260800190565b600060208252825160a06020840152615b9f60c0840182614e82565b905073ffffffffffffffffffffffffffffffffffffffff60208501511660408401526040840151606084015260608401516080840152608084015160a08401528091505092915050565b600060e08252855160e08301526020860151615c0481615e5c565b610100830152604086015173ffffffffffffffffffffffffffffffffffffffff908116610120840152606087015116610140830152608086015161016083015260a086015160c0610180840152615c5f6101a0840182614e82565b915050615c6f6020830186614f09565b60a082019390935260c0015292915050565b90815260200190565b600087825286602083015260c06040830152615ca960c0830187614e03565b8281036060840152615cbb8187614e03565b73ffffffffffffffffffffffffffffffffffffffff959095166080840152505060a00152949350505050565b600086825285602083015260a06040830152615d0660a0830186614e03565b73ffffffffffffffffffffffffffffffffffffffff94909416606083015250608001529392505050565b600084825283602083015260606040830152615d4f6060830184614e82565b95945050505050565b94855260208501939093526040840191909152606083015273ffffffffffffffffffffffffffffffffffffffff16608082015260a00190565b9283526020830191909152604082015260600190565b60405181810167ffffffffffffffff81118282101715615dc657600080fd5b604052919050565b600067ffffffffffffffff821115615de4578081fd5b5060209081020190565b600067ffffffffffffffff821115615e04578081fd5b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60005b83811015615e4b578181015183820152602001615e33565b8381111561412c5750506000910152565b60028110615e6657fe5b50565b73ffffffffffffffffffffffffffffffffffffffff81168114615e6657600080fd5b8015158114615e6657600080fd5b80600f0b8114615e6657600080fdfea264697066735822122076b3563c2b8b87fce9e5153af2b3587ea63cc58822af9bc49bd5232bc7c65f9f64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}