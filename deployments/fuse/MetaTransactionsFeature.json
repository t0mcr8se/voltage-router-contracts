{
  "address": "0x23E4Fe8bE32d03190dcfa8056c0deacf27284847",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "zeroExAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "signer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "MetaTransactionExecuted",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "EIP712_DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEATURE_NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEATURE_VERSION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MTX_EIP712_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "signer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "minGasPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxGasPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expirationTimeSeconds",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "contract IERC20TokenV06",
              "name": "feeToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "feeAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IMetaTransactionsFeature.MetaTransactionData[]",
          "name": "mtxs",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "enum LibSignature.SignatureType",
              "name": "signatureType",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct LibSignature.Signature[]",
          "name": "signatures",
          "type": "tuple[]"
        }
      ],
      "name": "batchExecuteMetaTransactions",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "returnResults",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "signer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "minGasPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxGasPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expirationTimeSeconds",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "contract IERC20TokenV06",
              "name": "feeToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "feeAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IMetaTransactionsFeature.MetaTransactionData",
          "name": "mtx",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "enum LibSignature.SignatureType",
              "name": "signatureType",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct LibSignature.Signature",
          "name": "signature",
          "type": "tuple"
        }
      ],
      "name": "executeMetaTransaction",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "returnResult",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "signer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "minGasPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxGasPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expirationTimeSeconds",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "contract IERC20TokenV06",
              "name": "feeToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "feeAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IMetaTransactionsFeature.MetaTransactionData",
          "name": "mtx",
          "type": "tuple"
        }
      ],
      "name": "getMetaTransactionExecutedBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "signer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "minGasPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxGasPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expirationTimeSeconds",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "contract IERC20TokenV06",
              "name": "feeToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "feeAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IMetaTransactionsFeature.MetaTransactionData",
          "name": "mtx",
          "type": "tuple"
        }
      ],
      "name": "getMetaTransactionHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "mtxHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "mtxHash",
          "type": "bytes32"
        }
      ],
      "name": "getMetaTransactionHashExecutedBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "migrate",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "success",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf22d55593821f4453e3ae6346bd8d6b8b3d832e99cfb330802f41bc5c70660f0",
  "receipt": {
    "to": null,
    "from": "0x560215A59247d47Bd949786DE7A7561bcc1E43ED",
    "contractAddress": "0x23E4Fe8bE32d03190dcfa8056c0deacf27284847",
    "transactionIndex": 0,
    "gasUsed": "2487818",
    "logsBloom": "0x
    "blockHash": "0xf73f5723c038291b1ba19cd65edc10134bdc2fd8bf16abe1a73e3c3d581ee011",
    "transactionHash": "0xf22d55593821f4453e3ae6346bd8d6b8b3d832e99cfb330802f41bc5c70660f0",
    "logs": [],
    "blockNumber": 22120313,
    "cumulativeGasUsed": "2487818",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xEcA6055ac01E717cEF70b8C6fC5F9ca32Cb4118a"
  ],
  "numDeployments": 1,
  "solcInputHash": "d824bfd18a929a7d770611c578d2def3",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"zeroExAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"MetaTransactionExecuted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EIP712_DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEATURE_NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEATURE_VERSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MTX_EIP712_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minGasPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxGasPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTimeSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20TokenV06\",\"name\":\"feeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IMetaTransactionsFeature.MetaTransactionData[]\",\"name\":\"mtxs\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"enum LibSignature.SignatureType\",\"name\":\"signatureType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct LibSignature.Signature[]\",\"name\":\"signatures\",\"type\":\"tuple[]\"}],\"name\":\"batchExecuteMetaTransactions\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"returnResults\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minGasPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxGasPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTimeSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20TokenV06\",\"name\":\"feeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IMetaTransactionsFeature.MetaTransactionData\",\"name\":\"mtx\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum LibSignature.SignatureType\",\"name\":\"signatureType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct LibSignature.Signature\",\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"executeMetaTransaction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"returnResult\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minGasPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxGasPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTimeSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20TokenV06\",\"name\":\"feeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IMetaTransactionsFeature.MetaTransactionData\",\"name\":\"mtx\",\"type\":\"tuple\"}],\"name\":\"getMetaTransactionExecutedBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minGasPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxGasPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTimeSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20TokenV06\",\"name\":\"feeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IMetaTransactionsFeature.MetaTransactionData\",\"name\":\"mtx\",\"type\":\"tuple\"}],\"name\":\"getMetaTransactionHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"mtxHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"mtxHash\",\"type\":\"bytes32\"}],\"name\":\"getMetaTransactionHashExecutedBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrate\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"success\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"MetaTransactions feature.\",\"kind\":\"dev\",\"methods\":{\"batchExecuteMetaTransactions((address,address,uint256,uint256,uint256,uint256,bytes,uint256,address,uint256)[],(uint8,uint8,bytes32,bytes32)[])\":{\"details\":\"Execute multiple meta-transactions.\",\"params\":{\"mtxs\":\"The meta-transactions.\",\"signatures\":\"The signature by each respective `mtx.signer`.\"},\"returns\":{\"returnResults\":\"The ABI-encoded results of the underlying calls.\"}},\"executeMetaTransaction((address,address,uint256,uint256,uint256,uint256,bytes,uint256,address,uint256),(uint8,uint8,bytes32,bytes32))\":{\"details\":\"Execute a single meta-transaction.\",\"params\":{\"mtx\":\"The meta-transaction.\",\"signature\":\"The signature by `mtx.signer`.\"},\"returns\":{\"returnResult\":\"The ABI-encoded result of the underlying call.\"}},\"getMetaTransactionExecutedBlock((address,address,uint256,uint256,uint256,uint256,bytes,uint256,address,uint256))\":{\"details\":\"Get the block at which a meta-transaction has been executed.\",\"params\":{\"mtx\":\"The meta-transaction.\"},\"returns\":{\"blockNumber\":\"The block height when the meta-transactioin was executed.\"}},\"getMetaTransactionHash((address,address,uint256,uint256,uint256,uint256,bytes,uint256,address,uint256))\":{\"details\":\"Get the EIP712 hash of a meta-transaction.\",\"params\":{\"mtx\":\"The meta-transaction.\"},\"returns\":{\"mtxHash\":\"The EIP712 hash of `mtx`.\"}},\"getMetaTransactionHashExecutedBlock(bytes32)\":{\"details\":\"Get the block at which a meta-transaction hash has been executed.\",\"params\":{\"mtxHash\":\"The meta-transaction hash.\"},\"returns\":{\"blockNumber\":\"The block height when the meta-transactioin was executed.\"}},\"migrate()\":{\"details\":\"Initialize and register this feature.      Should be delegatecalled by `Migrate.migrate()`.\",\"returns\":{\"success\":\"`LibMigrate.SUCCESS` on success.\"}}},\"stateVariables\":{\"FEATURE_NAME\":{\"details\":\"Name of this feature.\"},\"FEATURE_VERSION\":{\"details\":\"Version of this feature.\"},\"MTX_EIP712_TYPEHASH\":{\"details\":\"EIP712 typehash of the `MetaTransactionData` struct.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/zero-ex/features/MetaTransactionsFeature.sol\":\"MetaTransactionsFeature\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"src/contracts-erc20/v06/IERC20TokenV06.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\ninterface IERC20TokenV06 {\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @dev send `value` token to `to` from `msg.sender`\\n    /// @param to The address of the recipient\\n    /// @param value The amount of token to be transferred\\n    /// @return True if transfer was successful\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\\n    /// @param from The address of the sender\\n    /// @param to The address of the recipient\\n    /// @param value The amount of token to be transferred\\n    /// @return True if transfer was successful\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n\\n    /// @dev `msg.sender` approves `spender` to spend `value` tokens\\n    /// @param spender The address of the account able to transfer the tokens\\n    /// @param value The amount of wei to be approved for transfer\\n    /// @return Always true if the call has enough gas to complete execution\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /// @dev Query total supply of token\\n    /// @return Total supply of token\\n    function totalSupply() external view returns (uint256);\\n\\n    /// @dev Get the balance of `owner`.\\n    /// @param owner The address from which the balance will be retrieved\\n    /// @return Balance of owner\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    /// @dev Get the allowance for `spender` to spend from `owner`.\\n    /// @param owner The address of the account owning tokens\\n    /// @param spender The address of the account able to transfer the tokens\\n    /// @return Amount of remaining tokens allowed to spent\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /// @dev Get the number of decimals this token has.\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x738fc3ee22931305f16e783b286180c32f6c6390ebbeb86b8b28b4f2715e9805\",\"license\":\"Apache-2.0\"},\"src/contracts-utils/v06/LibBytesV06.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\nimport \\\"./errors/LibBytesRichErrorsV06.sol\\\";\\nimport \\\"./errors/LibRichErrorsV06.sol\\\";\\n\\nlibrary LibBytesV06 {\\n    using LibBytesV06 for bytes;\\n\\n    /// @dev Gets the memory address for a byte array.\\n    /// @param input Byte array to lookup.\\n    /// @return memoryAddress Memory address of byte array. This\\n    ///         points to the header of the byte array which contains\\n    ///         the length.\\n    function rawAddress(bytes memory input) internal pure returns (uint256 memoryAddress) {\\n        assembly {\\n            memoryAddress := input\\n        }\\n        return memoryAddress;\\n    }\\n\\n    /// @dev Gets the memory address for the contents of a byte array.\\n    /// @param input Byte array to lookup.\\n    /// @return memoryAddress Memory address of the contents of the byte array.\\n    function contentAddress(bytes memory input) internal pure returns (uint256 memoryAddress) {\\n        assembly {\\n            memoryAddress := add(input, 32)\\n        }\\n        return memoryAddress;\\n    }\\n\\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\\n    /// @param dest memory address to copy bytes to.\\n    /// @param source memory address to copy bytes from.\\n    /// @param length number of bytes to copy.\\n    function memCopy(uint256 dest, uint256 source, uint256 length) internal pure {\\n        if (length < 32) {\\n            // Handle a partial word by reading destination and masking\\n            // off the bits we are interested in.\\n            // This correctly handles overlap, zero lengths and source == dest\\n            assembly {\\n                let mask := sub(exp(256, sub(32, length)), 1)\\n                let s := and(mload(source), not(mask))\\n                let d := and(mload(dest), mask)\\n                mstore(dest, or(s, d))\\n            }\\n        } else {\\n            // Skip the O(length) loop when source == dest.\\n            if (source == dest) {\\n                return;\\n            }\\n\\n            // For large copies we copy whole words at a time. The final\\n            // word is aligned to the end of the range (instead of after the\\n            // previous) to handle partial words. So a copy will look like this:\\n            //\\n            //  ####\\n            //      ####\\n            //          ####\\n            //            ####\\n            //\\n            // We handle overlap in the source and destination range by\\n            // changing the copying direction. This prevents us from\\n            // overwriting parts of source that we still need to copy.\\n            //\\n            // This correctly handles source == dest\\n            //\\n            if (source > dest) {\\n                assembly {\\n                    // We subtract 32 from `sEnd` and `dEnd` because it\\n                    // is easier to compare with in the loop, and these\\n                    // are also the addresses we need for copying the\\n                    // last bytes.\\n                    length := sub(length, 32)\\n                    let sEnd := add(source, length)\\n                    let dEnd := add(dest, length)\\n\\n                    // Remember the last 32 bytes of source\\n                    // This needs to be done here and not after the loop\\n                    // because we may have overwritten the last bytes in\\n                    // source already due to overlap.\\n                    let last := mload(sEnd)\\n\\n                    // Copy whole words front to back\\n                    // Note: the first check is always true,\\n                    // this could have been a do-while loop.\\n                    for {\\n\\n                    } lt(source, sEnd) {\\n\\n                    } {\\n                        mstore(dest, mload(source))\\n                        source := add(source, 32)\\n                        dest := add(dest, 32)\\n                    }\\n\\n                    // Write the last 32 bytes\\n                    mstore(dEnd, last)\\n                }\\n            } else {\\n                assembly {\\n                    // We subtract 32 from `sEnd` and `dEnd` because those\\n                    // are the starting points when copying a word at the end.\\n                    length := sub(length, 32)\\n                    let sEnd := add(source, length)\\n                    let dEnd := add(dest, length)\\n\\n                    // Remember the first 32 bytes of source\\n                    // This needs to be done here and not after the loop\\n                    // because we may have overwritten the first bytes in\\n                    // source already due to overlap.\\n                    let first := mload(source)\\n\\n                    // Copy whole words back to front\\n                    // We use a signed comparisson here to allow dEnd to become\\n                    // negative (happens when source and dest < 32). Valid\\n                    // addresses in local memory will never be larger than\\n                    // 2**255, so they can be safely re-interpreted as signed.\\n                    // Note: the first check is always true,\\n                    // this could have been a do-while loop.\\n                    for {\\n\\n                    } slt(dest, dEnd) {\\n\\n                    } {\\n                        mstore(dEnd, mload(sEnd))\\n                        sEnd := sub(sEnd, 32)\\n                        dEnd := sub(dEnd, 32)\\n                    }\\n\\n                    // Write the first 32 bytes\\n                    mstore(dest, first)\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns a slices from a byte array.\\n    /// @param b The byte array to take a slice from.\\n    /// @param from The starting index for the slice (inclusive).\\n    /// @param to The final index for the slice (exclusive).\\n    /// @return result The slice containing bytes at indices [from, to)\\n    function slice(bytes memory b, uint256 from, uint256 to) internal pure returns (bytes memory result) {\\n        // Ensure that the from and to positions are valid positions for a slice within\\n        // the byte array that is being used.\\n        if (from > to) {\\n            LibRichErrorsV06.rrevert(\\n                LibBytesRichErrorsV06.InvalidByteOperationError(\\n                    LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\\n                    from,\\n                    to\\n                )\\n            );\\n        }\\n        if (to > b.length) {\\n            LibRichErrorsV06.rrevert(\\n                LibBytesRichErrorsV06.InvalidByteOperationError(\\n                    LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\\n                    to,\\n                    b.length\\n                )\\n            );\\n        }\\n\\n        // Create a new bytes structure and copy contents\\n        result = new bytes(to - from);\\n        memCopy(result.contentAddress(), b.contentAddress() + from, result.length);\\n        return result;\\n    }\\n\\n    /// @dev Returns a slice from a byte array without preserving the input.\\n    ///      When `from == 0`, the original array will match the slice.\\n    ///      In other cases its state will be corrupted.\\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\\n    /// @param from The starting index for the slice (inclusive).\\n    /// @param to The final index for the slice (exclusive).\\n    /// @return result The slice containing bytes at indices [from, to)\\n    function sliceDestructive(bytes memory b, uint256 from, uint256 to) internal pure returns (bytes memory result) {\\n        // Ensure that the from and to positions are valid positions for a slice within\\n        // the byte array that is being used.\\n        if (from > to) {\\n            LibRichErrorsV06.rrevert(\\n                LibBytesRichErrorsV06.InvalidByteOperationError(\\n                    LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\\n                    from,\\n                    to\\n                )\\n            );\\n        }\\n        if (to > b.length) {\\n            LibRichErrorsV06.rrevert(\\n                LibBytesRichErrorsV06.InvalidByteOperationError(\\n                    LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\\n                    to,\\n                    b.length\\n                )\\n            );\\n        }\\n\\n        // Create a new bytes structure around [from, to) in-place.\\n        assembly {\\n            result := add(b, from)\\n            mstore(result, sub(to, from))\\n        }\\n        return result;\\n    }\\n\\n    /// @dev Pops the last byte off of a byte array by modifying its length.\\n    /// @param b Byte array that will be modified.\\n    /// @return result The byte that was popped off.\\n    function popLastByte(bytes memory b) internal pure returns (bytes1 result) {\\n        if (b.length == 0) {\\n            LibRichErrorsV06.rrevert(\\n                LibBytesRichErrorsV06.InvalidByteOperationError(\\n                    LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanZeroRequired,\\n                    b.length,\\n                    0\\n                )\\n            );\\n        }\\n\\n        // Store last byte.\\n        result = b[b.length - 1];\\n\\n        assembly {\\n            // Decrement length of byte array.\\n            let newLen := sub(mload(b), 1)\\n            mstore(b, newLen)\\n        }\\n        return result;\\n    }\\n\\n    /// @dev Tests equality of two byte arrays.\\n    /// @param lhs First byte array to compare.\\n    /// @param rhs Second byte array to compare.\\n    /// @return equal True if arrays are the same. False otherwise.\\n    function equals(bytes memory lhs, bytes memory rhs) internal pure returns (bool equal) {\\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\\n        // We early exit on unequal lengths, but keccak would also correctly\\n        // handle this.\\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\\n    }\\n\\n    /// @dev Reads an address from a position in a byte array.\\n    /// @param b Byte array containing an address.\\n    /// @param index Index in byte array of address.\\n    /// @return result address from byte array.\\n    function readAddress(bytes memory b, uint256 index) internal pure returns (address result) {\\n        if (b.length < index + 20) {\\n            LibRichErrorsV06.rrevert(\\n                LibBytesRichErrorsV06.InvalidByteOperationError(\\n                    LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\\n                    b.length,\\n                    index + 20 // 20 is length of address\\n                )\\n            );\\n        }\\n\\n        // Add offset to index:\\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\\n        index += 20;\\n\\n        // Read address from array memory\\n        assembly {\\n            // 1. Add index to address of bytes array\\n            // 2. Load 32-byte word from memory\\n            // 3. Apply 20-byte mask to obtain address\\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\\n        }\\n        return result;\\n    }\\n\\n    /// @dev Writes an address into a specific position in a byte array.\\n    /// @param b Byte array to insert address into.\\n    /// @param index Index in byte array of address.\\n    /// @param input Address to put into byte array.\\n    function writeAddress(bytes memory b, uint256 index, address input) internal pure {\\n        if (b.length < index + 20) {\\n            LibRichErrorsV06.rrevert(\\n                LibBytesRichErrorsV06.InvalidByteOperationError(\\n                    LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\\n                    b.length,\\n                    index + 20 // 20 is length of address\\n                )\\n            );\\n        }\\n\\n        // Add offset to index:\\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\\n        index += 20;\\n\\n        // Store address into array memory\\n        assembly {\\n            // The address occupies 20 bytes and mstore stores 32 bytes.\\n            // First fetch the 32-byte word where we'll be storing the address, then\\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\\n\\n            // 1. Add index to address of bytes array\\n            // 2. Load 32-byte word from memory\\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\\n            let neighbors := and(\\n                mload(add(b, index)),\\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\\n            )\\n\\n            // Make sure input address is clean.\\n            // (Solidity does not guarantee this)\\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\\n\\n            // Store the neighbors and address into memory\\n            mstore(add(b, index), xor(input, neighbors))\\n        }\\n    }\\n\\n    /// @dev Reads a bytes32 value from a position in a byte array.\\n    /// @param b Byte array containing a bytes32 value.\\n    /// @param index Index in byte array of bytes32 value.\\n    /// @return result bytes32 value from byte array.\\n    function readBytes32(bytes memory b, uint256 index) internal pure returns (bytes32 result) {\\n        if (b.length < index + 32) {\\n            LibRichErrorsV06.rrevert(\\n                LibBytesRichErrorsV06.InvalidByteOperationError(\\n                    LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\\n                    b.length,\\n                    index + 32\\n                )\\n            );\\n        }\\n\\n        // Arrays are prefixed by a 256 bit length parameter\\n        index += 32;\\n\\n        // Read the bytes32 from array memory\\n        assembly {\\n            result := mload(add(b, index))\\n        }\\n        return result;\\n    }\\n\\n    /// @dev Writes a bytes32 into a specific position in a byte array.\\n    /// @param b Byte array to insert <input> into.\\n    /// @param index Index in byte array of <input>.\\n    /// @param input bytes32 to put into byte array.\\n    function writeBytes32(bytes memory b, uint256 index, bytes32 input) internal pure {\\n        if (b.length < index + 32) {\\n            LibRichErrorsV06.rrevert(\\n                LibBytesRichErrorsV06.InvalidByteOperationError(\\n                    LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\\n                    b.length,\\n                    index + 32\\n                )\\n            );\\n        }\\n\\n        // Arrays are prefixed by a 256 bit length parameter\\n        index += 32;\\n\\n        // Read the bytes32 from array memory\\n        assembly {\\n            mstore(add(b, index), input)\\n        }\\n    }\\n\\n    /// @dev Reads a uint256 value from a position in a byte array.\\n    /// @param b Byte array containing a uint256 value.\\n    /// @param index Index in byte array of uint256 value.\\n    /// @return result uint256 value from byte array.\\n    function readUint256(bytes memory b, uint256 index) internal pure returns (uint256 result) {\\n        result = uint256(readBytes32(b, index));\\n        return result;\\n    }\\n\\n    /// @dev Writes a uint256 into a specific position in a byte array.\\n    /// @param b Byte array to insert <input> into.\\n    /// @param index Index in byte array of <input>.\\n    /// @param input uint256 to put into byte array.\\n    function writeUint256(bytes memory b, uint256 index, uint256 input) internal pure {\\n        writeBytes32(b, index, bytes32(input));\\n    }\\n\\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\\n    /// @param b Byte array containing a bytes4 value.\\n    /// @param index Index in byte array of bytes4 value.\\n    /// @return result bytes4 value from byte array.\\n    function readBytes4(bytes memory b, uint256 index) internal pure returns (bytes4 result) {\\n        if (b.length < index + 4) {\\n            LibRichErrorsV06.rrevert(\\n                LibBytesRichErrorsV06.InvalidByteOperationError(\\n                    LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,\\n                    b.length,\\n                    index + 4\\n                )\\n            );\\n        }\\n\\n        // Arrays are prefixed by a 32 byte length field\\n        index += 32;\\n\\n        // Read the bytes4 from array memory\\n        assembly {\\n            result := mload(add(b, index))\\n            // Solidity does not require us to clean the trailing bytes.\\n            // We do it anyway\\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\\n        }\\n        return result;\\n    }\\n\\n    /// @dev Writes a new length to a byte array.\\n    ///      Decreasing length will lead to removing the corresponding lower order bytes from the byte array.\\n    ///      Increasing length may lead to appending adjacent in-memory bytes to the end of the byte array.\\n    /// @param b Bytes array to write new length to.\\n    /// @param length New length of byte array.\\n    function writeLength(bytes memory b, uint256 length) internal pure {\\n        assembly {\\n            mstore(b, length)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4627b090ebd8db251e6cea36597c906bd4f82c219059395eaf7263067666b856\",\"license\":\"Apache-2.0\"},\"src/contracts-utils/v06/LibSafeMathV06.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\nimport \\\"./errors/LibRichErrorsV06.sol\\\";\\nimport \\\"./errors/LibSafeMathRichErrorsV06.sol\\\";\\n\\nlibrary LibSafeMathV06 {\\n    function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        if (c / a != b) {\\n            LibRichErrorsV06.rrevert(\\n                LibSafeMathRichErrorsV06.Uint256BinOpError(\\n                    LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\\n                    a,\\n                    b\\n                )\\n            );\\n        }\\n        return c;\\n    }\\n\\n    function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            LibRichErrorsV06.rrevert(\\n                LibSafeMathRichErrorsV06.Uint256BinOpError(\\n                    LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\\n                    a,\\n                    b\\n                )\\n            );\\n        }\\n        uint256 c = a / b;\\n        return c;\\n    }\\n\\n    function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b > a) {\\n            LibRichErrorsV06.rrevert(\\n                LibSafeMathRichErrorsV06.Uint256BinOpError(\\n                    LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\\n                    a,\\n                    b\\n                )\\n            );\\n        }\\n        return a - b;\\n    }\\n\\n    function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        if (c < a) {\\n            LibRichErrorsV06.rrevert(\\n                LibSafeMathRichErrorsV06.Uint256BinOpError(\\n                    LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\\n                    a,\\n                    b\\n                )\\n            );\\n        }\\n        return c;\\n    }\\n\\n    function max256(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    function min256(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    function safeMul128(uint128 a, uint128 b) internal pure returns (uint128) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint128 c = a * b;\\n        if (c / a != b) {\\n            LibRichErrorsV06.rrevert(\\n                LibSafeMathRichErrorsV06.Uint256BinOpError(\\n                    LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\\n                    a,\\n                    b\\n                )\\n            );\\n        }\\n        return c;\\n    }\\n\\n    function safeDiv128(uint128 a, uint128 b) internal pure returns (uint128) {\\n        if (b == 0) {\\n            LibRichErrorsV06.rrevert(\\n                LibSafeMathRichErrorsV06.Uint256BinOpError(\\n                    LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\\n                    a,\\n                    b\\n                )\\n            );\\n        }\\n        uint128 c = a / b;\\n        return c;\\n    }\\n\\n    function safeSub128(uint128 a, uint128 b) internal pure returns (uint128) {\\n        if (b > a) {\\n            LibRichErrorsV06.rrevert(\\n                LibSafeMathRichErrorsV06.Uint256BinOpError(\\n                    LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\\n                    a,\\n                    b\\n                )\\n            );\\n        }\\n        return a - b;\\n    }\\n\\n    function safeAdd128(uint128 a, uint128 b) internal pure returns (uint128) {\\n        uint128 c = a + b;\\n        if (c < a) {\\n            LibRichErrorsV06.rrevert(\\n                LibSafeMathRichErrorsV06.Uint256BinOpError(\\n                    LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\\n                    a,\\n                    b\\n                )\\n            );\\n        }\\n        return c;\\n    }\\n\\n    function max128(uint128 a, uint128 b) internal pure returns (uint128) {\\n        return a >= b ? a : b;\\n    }\\n\\n    function min128(uint128 a, uint128 b) internal pure returns (uint128) {\\n        return a < b ? a : b;\\n    }\\n\\n    function safeDowncastToUint128(uint256 a) internal pure returns (uint128) {\\n        if (a > type(uint128).max) {\\n            LibRichErrorsV06.rrevert(\\n                LibSafeMathRichErrorsV06.Uint256DowncastError(\\n                    LibSafeMathRichErrorsV06.DowncastErrorCodes.VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128,\\n                    a\\n                )\\n            );\\n        }\\n        return uint128(a);\\n    }\\n}\\n\",\"keccak256\":\"0xf41503c5323320d0d4a8de4afddbc41c9e0fa205b8b0ee317bd4d98b411bb3ea\",\"license\":\"Apache-2.0\"},\"src/contracts-utils/v06/errors/LibBytesRichErrorsV06.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\nlibrary LibBytesRichErrorsV06 {\\n    enum InvalidByteOperationErrorCodes {\\n        FromLessThanOrEqualsToRequired,\\n        ToLessThanOrEqualsLengthRequired,\\n        LengthGreaterThanZeroRequired,\\n        LengthGreaterThanOrEqualsFourRequired,\\n        LengthGreaterThanOrEqualsTwentyRequired,\\n        LengthGreaterThanOrEqualsThirtyTwoRequired,\\n        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\\n        DestinationLengthGreaterThanOrEqualSourceLengthRequired\\n    }\\n\\n    // bytes4(keccak256(\\\"InvalidByteOperationError(uint8,uint256,uint256)\\\"))\\n    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR = 0x28006595;\\n\\n    function InvalidByteOperationError(\\n        InvalidByteOperationErrorCodes errorCode,\\n        uint256 offset,\\n        uint256 required\\n    ) internal pure returns (bytes memory) {\\n        return abi.encodeWithSelector(INVALID_BYTE_OPERATION_ERROR_SELECTOR, errorCode, offset, required);\\n    }\\n}\\n\",\"keccak256\":\"0x53f172b5aaf453b6372471ab3918bb0c1611ff38c8ad30f1a955f2453fa499c3\",\"license\":\"Apache-2.0\"},\"src/contracts-utils/v06/errors/LibRichErrorsV06.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\nlibrary LibRichErrorsV06 {\\n    // bytes4(keccak256(\\\"Error(string)\\\"))\\n    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\\n\\n    /// @dev ABI encode a standard, string revert error payload.\\n    ///      This is the same payload that would be included by a `revert(string)`\\n    ///      solidity statement. It has the function signature `Error(string)`.\\n    /// @param message The error string.\\n    /// @return The ABI encoded error.\\n    function StandardError(string memory message) internal pure returns (bytes memory) {\\n        return abi.encodeWithSelector(STANDARD_ERROR_SELECTOR, bytes(message));\\n    }\\n\\n    /// @dev Reverts an encoded rich revert reason `errorData`.\\n    /// @param errorData ABI encoded error data.\\n    function rrevert(bytes memory errorData) internal pure {\\n        assembly {\\n            revert(add(errorData, 0x20), mload(errorData))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x94011e576f60b0c5490c9424503a7ef0c9ebb57d1d9573372c87da0ede38f674\",\"license\":\"Apache-2.0\"},\"src/contracts-utils/v06/errors/LibSafeMathRichErrorsV06.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\nlibrary LibSafeMathRichErrorsV06 {\\n    // bytes4(keccak256(\\\"Uint256BinOpError(uint8,uint256,uint256)\\\"))\\n    bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR = 0xe946c1bb;\\n\\n    // bytes4(keccak256(\\\"Uint256DowncastError(uint8,uint256)\\\"))\\n    bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR = 0xc996af7b;\\n\\n    enum BinOpErrorCodes {\\n        ADDITION_OVERFLOW,\\n        MULTIPLICATION_OVERFLOW,\\n        SUBTRACTION_UNDERFLOW,\\n        DIVISION_BY_ZERO\\n    }\\n\\n    enum DowncastErrorCodes {\\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT32,\\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT64,\\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT96,\\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128\\n    }\\n\\n    function Uint256BinOpError(BinOpErrorCodes errorCode, uint256 a, uint256 b) internal pure returns (bytes memory) {\\n        return abi.encodeWithSelector(UINT256_BINOP_ERROR_SELECTOR, errorCode, a, b);\\n    }\\n\\n    function Uint256DowncastError(DowncastErrorCodes errorCode, uint256 a) internal pure returns (bytes memory) {\\n        return abi.encodeWithSelector(UINT256_DOWNCAST_ERROR_SELECTOR, errorCode, a);\\n    }\\n}\\n\",\"keccak256\":\"0xfb01cc2d90995a03f1f72b00226e089d1bf2acf36fe2c115b08ccf048e26cf6b\",\"license\":\"Apache-2.0\"},\"src/contracts-utils/v06/interfaces/IOwnableV06.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\ninterface IOwnableV06 {\\n    /// @dev Emitted by Ownable when ownership is transferred.\\n    /// @param previousOwner The previous owner of the contract.\\n    /// @param newOwner The new owner of the contract.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @dev Transfers ownership of the contract to a new address.\\n    /// @param newOwner The address that will become the owner.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @dev The owner of this contract.\\n    /// @return ownerAddress The owner address.\\n    function owner() external view returns (address ownerAddress);\\n}\\n\",\"keccak256\":\"0xeece431192381bde56ade8a936295e85a842a222c46c4df5d9e457aeb25b6fb8\",\"license\":\"Apache-2.0\"},\"src/zero-ex/errors/LibCommonRichErrors.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\n\\nlibrary LibCommonRichErrors {\\n\\n    // solhint-disable func-name-mixedcase\\n\\n    function OnlyCallableBySelfError(address sender)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"OnlyCallableBySelfError(address)\\\")),\\n            sender\\n        );\\n    }\\n\\n    function IllegalReentrancyError(bytes4 selector, uint256 reentrancyFlags)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"IllegalReentrancyError(bytes4,uint256)\\\")),\\n            selector,\\n            reentrancyFlags\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x73c4cc0dc27c71e96f5c5262ba349e39cda3051698c772f01f23b7c089762ebe\",\"license\":\"Apache-2.0\"},\"src/zero-ex/errors/LibMetaTransactionsRichErrors.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\n\\nlibrary LibMetaTransactionsRichErrors {\\n\\n    // solhint-disable func-name-mixedcase\\n\\n    function InvalidMetaTransactionsArrayLengthsError(\\n        uint256 mtxCount,\\n        uint256 signatureCount\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"InvalidMetaTransactionsArrayLengthsError(uint256,uint256)\\\")),\\n            mtxCount,\\n            signatureCount\\n        );\\n    }\\n\\n    function MetaTransactionUnsupportedFunctionError(\\n        bytes32 mtxHash,\\n        bytes4 selector\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"MetaTransactionUnsupportedFunctionError(bytes32,bytes4)\\\")),\\n            mtxHash,\\n            selector\\n        );\\n    }\\n\\n    function MetaTransactionWrongSenderError(\\n        bytes32 mtxHash,\\n        address sender,\\n        address expectedSender\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"MetaTransactionWrongSenderError(bytes32,address,address)\\\")),\\n            mtxHash,\\n            sender,\\n            expectedSender\\n        );\\n    }\\n\\n    function MetaTransactionExpiredError(\\n        bytes32 mtxHash,\\n        uint256 time,\\n        uint256 expirationTime\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"MetaTransactionExpiredError(bytes32,uint256,uint256)\\\")),\\n            mtxHash,\\n            time,\\n            expirationTime\\n        );\\n    }\\n\\n    function MetaTransactionGasPriceError(\\n        bytes32 mtxHash,\\n        uint256 gasPrice,\\n        uint256 minGasPrice,\\n        uint256 maxGasPrice\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"MetaTransactionGasPriceError(bytes32,uint256,uint256,uint256)\\\")),\\n            mtxHash,\\n            gasPrice,\\n            minGasPrice,\\n            maxGasPrice\\n        );\\n    }\\n\\n    function MetaTransactionInsufficientEthError(\\n        bytes32 mtxHash,\\n        uint256 ethBalance,\\n        uint256 ethRequired\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"MetaTransactionInsufficientEthError(bytes32,uint256,uint256)\\\")),\\n            mtxHash,\\n            ethBalance,\\n            ethRequired\\n        );\\n    }\\n\\n    function MetaTransactionInvalidSignatureError(\\n        bytes32 mtxHash,\\n        bytes memory signature,\\n        bytes memory errData\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"MetaTransactionInvalidSignatureError(bytes32,bytes,bytes)\\\")),\\n            mtxHash,\\n            signature,\\n            errData\\n        );\\n    }\\n\\n    function MetaTransactionAlreadyExecutedError(\\n        bytes32 mtxHash,\\n        uint256 executedBlockNumber\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"MetaTransactionAlreadyExecutedError(bytes32,uint256)\\\")),\\n            mtxHash,\\n            executedBlockNumber\\n        );\\n    }\\n\\n    function MetaTransactionCallFailedError(\\n        bytes32 mtxHash,\\n        bytes memory callData,\\n        bytes memory returnData\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"MetaTransactionCallFailedError(bytes32,bytes,bytes)\\\")),\\n            mtxHash,\\n            callData,\\n            returnData\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x2a33be3f58a24489704dbaadba07b270231462f74fbd3bf113087128abfc8f7d\",\"license\":\"Apache-2.0\"},\"src/zero-ex/errors/LibNativeOrdersRichErrors.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\n\\nlibrary LibNativeOrdersRichErrors {\\n\\n    // solhint-disable func-name-mixedcase\\n\\n    function ProtocolFeeRefundFailed(\\n        address receiver,\\n        uint256 refundAmount\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"ProtocolFeeRefundFailed(address,uint256)\\\")),\\n            receiver,\\n            refundAmount\\n        );\\n    }\\n\\n    function OrderNotFillableByOriginError(\\n        bytes32 orderHash,\\n        address txOrigin,\\n        address orderTxOrigin\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"OrderNotFillableByOriginError(bytes32,address,address)\\\")),\\n            orderHash,\\n            txOrigin,\\n            orderTxOrigin\\n        );\\n    }\\n\\n    function OrderNotFillableError(\\n        bytes32 orderHash,\\n        uint8 orderStatus\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"OrderNotFillableError(bytes32,uint8)\\\")),\\n            orderHash,\\n            orderStatus\\n        );\\n    }\\n\\n    function OrderNotSignedByMakerError(\\n        bytes32 orderHash,\\n        address signer,\\n        address maker\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"OrderNotSignedByMakerError(bytes32,address,address)\\\")),\\n            orderHash,\\n            signer,\\n            maker\\n        );\\n    }\\n\\n    function InvalidSignerError(\\n        address maker,\\n        address signer\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"InvalidSignerError(address,address)\\\")),\\n            maker,\\n            signer\\n        );\\n    }\\n\\n    function OrderNotFillableBySenderError(\\n        bytes32 orderHash,\\n        address sender,\\n        address orderSender\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"OrderNotFillableBySenderError(bytes32,address,address)\\\")),\\n            orderHash,\\n            sender,\\n            orderSender\\n        );\\n    }\\n\\n    function OrderNotFillableByTakerError(\\n        bytes32 orderHash,\\n        address taker,\\n        address orderTaker\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"OrderNotFillableByTakerError(bytes32,address,address)\\\")),\\n            orderHash,\\n            taker,\\n            orderTaker\\n        );\\n    }\\n\\n    function CancelSaltTooLowError(\\n        uint256 minValidSalt,\\n        uint256 oldMinValidSalt\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"CancelSaltTooLowError(uint256,uint256)\\\")),\\n            minValidSalt,\\n            oldMinValidSalt\\n        );\\n    }\\n\\n    function FillOrKillFailedError(\\n        bytes32 orderHash,\\n        uint256 takerTokenFilledAmount,\\n        uint256 takerTokenFillAmount\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"FillOrKillFailedError(bytes32,uint256,uint256)\\\")),\\n            orderHash,\\n            takerTokenFilledAmount,\\n            takerTokenFillAmount\\n        );\\n    }\\n\\n    function OnlyOrderMakerAllowed(\\n        bytes32 orderHash,\\n        address sender,\\n        address maker\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"OnlyOrderMakerAllowed(bytes32,address,address)\\\")),\\n            orderHash,\\n            sender,\\n            maker\\n        );\\n    }\\n\\n    function BatchFillIncompleteError(\\n        bytes32 orderHash,\\n        uint256 takerTokenFilledAmount,\\n        uint256 takerTokenFillAmount\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"BatchFillIncompleteError(bytes32,uint256,uint256)\\\")),\\n            orderHash,\\n            takerTokenFilledAmount,\\n            takerTokenFillAmount\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xac30e78055912f30d30bffcb75fd26a9801230f3fdeb22514d6fefec3e4487be\",\"license\":\"Apache-2.0\"},\"src/zero-ex/errors/LibOwnableRichErrors.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\n\\nlibrary LibOwnableRichErrors {\\n\\n    // solhint-disable func-name-mixedcase\\n\\n    function OnlyOwnerError(\\n        address sender,\\n        address owner\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"OnlyOwnerError(address,address)\\\")),\\n            sender,\\n            owner\\n        );\\n    }\\n\\n    function TransferOwnerToZeroError()\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"TransferOwnerToZeroError()\\\"))\\n        );\\n    }\\n\\n    function MigrateCallFailedError(address target, bytes memory resultData)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"MigrateCallFailedError(address,bytes)\\\")),\\n            target,\\n            resultData\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xddddbadb4349323acf3e8570c21d117ead3113a1b3869b3fa7ad123a22e9bad9\",\"license\":\"Apache-2.0\"},\"src/zero-ex/errors/LibSignatureRichErrors.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\n\\nlibrary LibSignatureRichErrors {\\n\\n    enum SignatureValidationErrorCodes {\\n        ALWAYS_INVALID,\\n        INVALID_LENGTH,\\n        UNSUPPORTED,\\n        ILLEGAL,\\n        WRONG_SIGNER,\\n        BAD_SIGNATURE_DATA\\n    }\\n\\n    // solhint-disable func-name-mixedcase\\n\\n    function SignatureValidationError(\\n        SignatureValidationErrorCodes code,\\n        bytes32 hash,\\n        address signerAddress,\\n        bytes memory signature\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"SignatureValidationError(uint8,bytes32,address,bytes)\\\")),\\n            code,\\n            hash,\\n            signerAddress,\\n            signature\\n        );\\n    }\\n\\n    function SignatureValidationError(\\n        SignatureValidationErrorCodes code,\\n        bytes32 hash\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"SignatureValidationError(uint8,bytes32)\\\")),\\n            code,\\n            hash\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xed5ce173a4def5baf4c7b1ca44e9a7060b80fc1de95203410cc4a0ccbc12eda4\",\"license\":\"Apache-2.0\"},\"src/zero-ex/external/IFlashWallet.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../contracts-utils/v06/interfaces/IOwnableV06.sol\\\";\\n\\n\\n/// @dev A contract that can execute arbitrary calls from its owner.\\ninterface IFlashWallet {\\n\\n    /// @dev Execute an arbitrary call. Only an authority can call this.\\n    /// @param target The call target.\\n    /// @param callData The call data.\\n    /// @param value Ether to attach to the call.\\n    /// @return resultData The data returned by the call.\\n    function executeCall(\\n        address payable target,\\n        bytes calldata callData,\\n        uint256 value\\n    )\\n        external\\n        payable\\n        returns (bytes memory resultData);\\n\\n    /// @dev Execute an arbitrary delegatecall, in the context of this puppet.\\n    ///      Only an authority can call this.\\n    /// @param target The call target.\\n    /// @param callData The call data.\\n    /// @return resultData The data returned by the call.\\n    function executeDelegateCall(\\n        address payable target,\\n        bytes calldata callData\\n    )\\n        external\\n        payable\\n        returns (bytes memory resultData);\\n\\n    /// @dev Allows the puppet to receive ETH.\\n    receive() external payable;\\n\\n    /// @dev Fetch the immutable owner/deployer of this contract.\\n    /// @return owner_ The immutable owner/deployer/\\n    function owner() external view returns (address owner_);\\n}\\n\",\"keccak256\":\"0x6964f58bfc4485061b987f633f9af53fb08db34755032a6fad26e3abb6e6b4bc\",\"license\":\"Apache-2.0\"},\"src/zero-ex/features/MetaTransactionsFeature.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../contracts-utils/v06/errors/LibRichErrorsV06.sol\\\";\\nimport \\\"../../contracts-utils/v06/LibBytesV06.sol\\\";\\nimport \\\"../../contracts-utils/v06/LibSafeMathV06.sol\\\";\\nimport \\\"../errors/LibMetaTransactionsRichErrors.sol\\\";\\nimport \\\"../fixins/FixinCommon.sol\\\";\\nimport \\\"../fixins/FixinReentrancyGuard.sol\\\";\\nimport \\\"../fixins/FixinTokenSpender.sol\\\";\\nimport \\\"../fixins/FixinEIP712.sol\\\";\\nimport \\\"../migrations/LibMigrate.sol\\\";\\nimport \\\"../storage/LibMetaTransactionsStorage.sol\\\";\\nimport \\\"./interfaces/IFeature.sol\\\";\\nimport \\\"./interfaces/IMetaTransactionsFeature.sol\\\";\\nimport \\\"./interfaces/INativeOrdersFeature.sol\\\";\\nimport \\\"./interfaces/ITransformERC20Feature.sol\\\";\\nimport \\\"./libs/LibSignature.sol\\\";\\n\\n/// @dev MetaTransactions feature.\\ncontract MetaTransactionsFeature is\\n    IFeature,\\n    IMetaTransactionsFeature,\\n    FixinCommon,\\n    FixinReentrancyGuard,\\n    FixinEIP712,\\n    FixinTokenSpender\\n{\\n    using LibBytesV06 for bytes;\\n    using LibRichErrorsV06 for bytes;\\n\\n    /// @dev Describes the state of a meta transaction.\\n    struct ExecuteState {\\n        // Sender of the meta-transaction.\\n        address sender;\\n        // Hash of the meta-transaction data.\\n        bytes32 hash;\\n        // The meta-transaction data.\\n        MetaTransactionData mtx;\\n        // The meta-transaction signature (by `mtx.signer`).\\n        LibSignature.Signature signature;\\n        // The selector of the function being called.\\n        bytes4 selector;\\n        // The ETH balance of this contract before performing the call.\\n        uint256 selfBalance;\\n        // The block number at which the meta-transaction was executed.\\n        uint256 executedBlockNumber;\\n    }\\n\\n    /// @dev Arguments for a `TransformERC20.transformERC20()` call.\\n    struct ExternalTransformERC20Args {\\n        IERC20TokenV06 inputToken;\\n        IERC20TokenV06 outputToken;\\n        uint256 inputTokenAmount;\\n        uint256 minOutputTokenAmount;\\n        ITransformERC20Feature.Transformation[] transformations;\\n    }\\n\\n    /// @dev Name of this feature.\\n    string public constant override FEATURE_NAME = \\\"MetaTransactions\\\";\\n    /// @dev Version of this feature.\\n    uint256 public immutable override FEATURE_VERSION = _encodeVersion(1, 2, 1);\\n    /// @dev EIP712 typehash of the `MetaTransactionData` struct.\\n    bytes32 public immutable MTX_EIP712_TYPEHASH = keccak256(\\n        \\\"MetaTransactionData(\\\"\\n            \\\"address signer,\\\"\\n            \\\"address sender,\\\"\\n            \\\"uint256 minGasPrice,\\\"\\n            \\\"uint256 maxGasPrice,\\\"\\n            \\\"uint256 expirationTimeSeconds,\\\"\\n            \\\"uint256 salt,\\\"\\n            \\\"bytes callData,\\\"\\n            \\\"uint256 value,\\\"\\n            \\\"address feeToken,\\\"\\n            \\\"uint256 feeAmount\\\"\\n        \\\")\\\"\\n    );\\n\\n    /// @dev Refunds up to `msg.value` leftover ETH at the end of the call.\\n    modifier refundsAttachedEth() {\\n        _;\\n        uint256 remainingBalance =\\n            LibSafeMathV06.min256(msg.value, address(this).balance);\\n        if (remainingBalance > 0) {\\n            msg.sender.transfer(remainingBalance);\\n        }\\n    }\\n\\n    /// @dev Ensures that the ETH balance of `this` does not go below the\\n    ///      initial ETH balance before the call (excluding ETH attached to the call).\\n    modifier doesNotReduceEthBalance() {\\n        uint256 initialBalance = address(this).balance - msg.value;\\n        _;\\n        require(\\n            initialBalance <= address(this).balance,\\n            \\\"MetaTransactionsFeature/ETH_LEAK\\\"\\n        );\\n    }\\n\\n    constructor(address zeroExAddress)\\n        public\\n        FixinCommon()\\n        FixinEIP712(zeroExAddress)\\n    {\\n        // solhint-disable-next-line no-empty-blocks\\n    }\\n\\n    /// @dev Initialize and register this feature.\\n    ///      Should be delegatecalled by `Migrate.migrate()`.\\n    /// @return success `LibMigrate.SUCCESS` on success.\\n    function migrate()\\n        external\\n        returns (bytes4 success)\\n    {\\n        _registerFeatureFunction(this.executeMetaTransaction.selector);\\n        _registerFeatureFunction(this.batchExecuteMetaTransactions.selector);\\n        _registerFeatureFunction(this.getMetaTransactionExecutedBlock.selector);\\n        _registerFeatureFunction(this.getMetaTransactionHashExecutedBlock.selector);\\n        _registerFeatureFunction(this.getMetaTransactionHash.selector);\\n        return LibMigrate.MIGRATE_SUCCESS;\\n    }\\n\\n    /// @dev Execute a single meta-transaction.\\n    /// @param mtx The meta-transaction.\\n    /// @param signature The signature by `mtx.signer`.\\n    /// @return returnResult The ABI-encoded result of the underlying call.\\n    function executeMetaTransaction(\\n        MetaTransactionData memory mtx,\\n        LibSignature.Signature memory signature\\n    )\\n        public\\n        payable\\n        override\\n        nonReentrant(REENTRANCY_MTX)\\n        doesNotReduceEthBalance\\n        refundsAttachedEth\\n        returns (bytes memory returnResult)\\n    {\\n        ExecuteState memory state;\\n        state.sender = msg.sender;\\n        state.mtx = mtx;\\n        state.hash = getMetaTransactionHash(mtx);\\n        state.signature = signature;\\n\\n        returnResult = _executeMetaTransactionPrivate(state);\\n    }\\n\\n    /// @dev Execute multiple meta-transactions.\\n    /// @param mtxs The meta-transactions.\\n    /// @param signatures The signature by each respective `mtx.signer`.\\n    /// @return returnResults The ABI-encoded results of the underlying calls.\\n    function batchExecuteMetaTransactions(\\n        MetaTransactionData[] memory mtxs,\\n        LibSignature.Signature[] memory signatures\\n    )\\n        public\\n        payable\\n        override\\n        nonReentrant(REENTRANCY_MTX)\\n        doesNotReduceEthBalance\\n        refundsAttachedEth\\n        returns (bytes[] memory returnResults)\\n    {\\n        if (mtxs.length != signatures.length) {\\n            LibMetaTransactionsRichErrors.InvalidMetaTransactionsArrayLengthsError(\\n                mtxs.length,\\n                signatures.length\\n            ).rrevert();\\n        }\\n        returnResults = new bytes[](mtxs.length);\\n        for (uint256 i = 0; i < mtxs.length; ++i) {\\n            ExecuteState memory state;\\n            state.sender = msg.sender;\\n            state.mtx = mtxs[i];\\n            state.hash = getMetaTransactionHash(mtxs[i]);\\n            state.signature = signatures[i];\\n\\n            returnResults[i] = _executeMetaTransactionPrivate(state);\\n        }\\n    }\\n\\n    /// @dev Get the block at which a meta-transaction has been executed.\\n    /// @param mtx The meta-transaction.\\n    /// @return blockNumber The block height when the meta-transactioin was executed.\\n    function getMetaTransactionExecutedBlock(MetaTransactionData memory mtx)\\n        public\\n        override\\n        view\\n        returns (uint256 blockNumber)\\n    {\\n        return getMetaTransactionHashExecutedBlock(getMetaTransactionHash(mtx));\\n    }\\n\\n    /// @dev Get the block at which a meta-transaction hash has been executed.\\n    /// @param mtxHash The meta-transaction hash.\\n    /// @return blockNumber The block height when the meta-transactioin was executed.\\n    function getMetaTransactionHashExecutedBlock(bytes32 mtxHash)\\n        public\\n        override\\n        view\\n        returns (uint256 blockNumber)\\n    {\\n        return LibMetaTransactionsStorage.getStorage().mtxHashToExecutedBlockNumber[mtxHash];\\n    }\\n\\n    /// @dev Get the EIP712 hash of a meta-transaction.\\n    /// @param mtx The meta-transaction.\\n    /// @return mtxHash The EIP712 hash of `mtx`.\\n    function getMetaTransactionHash(MetaTransactionData memory mtx)\\n        public\\n        override\\n        view\\n        returns (bytes32 mtxHash)\\n    {\\n        return _getEIP712Hash(keccak256(abi.encode(\\n            MTX_EIP712_TYPEHASH,\\n            mtx.signer,\\n            mtx.sender,\\n            mtx.minGasPrice,\\n            mtx.maxGasPrice,\\n            mtx.expirationTimeSeconds,\\n            mtx.salt,\\n            keccak256(mtx.callData),\\n            mtx.value,\\n            mtx.feeToken,\\n            mtx.feeAmount\\n        )));\\n    }\\n\\n    /// @dev Execute a meta-transaction by `sender`. Low-level, hidden variant.\\n    /// @param state The `ExecuteState` for this metatransaction, with `sender`,\\n    ///              `hash`, `mtx`, and `signature` fields filled.\\n    /// @return returnResult The ABI-encoded result of the underlying call.\\n    function _executeMetaTransactionPrivate(ExecuteState memory state)\\n        private\\n        returns (bytes memory returnResult)\\n    {\\n        _validateMetaTransaction(state);\\n\\n        // Mark the transaction executed by storing the block at which it was executed.\\n        // Currently the block number just indicates that the mtx was executed and\\n        // serves no other purpose from within this contract.\\n        LibMetaTransactionsStorage.getStorage()\\n            .mtxHashToExecutedBlockNumber[state.hash] = block.number;\\n\\n        // Pay the fee to the sender.\\n        if (state.mtx.feeAmount > 0) {\\n            _transferERC20TokensFrom(\\n                state.mtx.feeToken,\\n                state.mtx.signer,\\n                state.sender,\\n                state.mtx.feeAmount\\n            );\\n        }\\n\\n        // Execute the call based on the selector.\\n        state.selector = state.mtx.callData.readBytes4(0);\\n        if (state.selector == ITransformERC20Feature.transformERC20.selector) {\\n            returnResult = _executeTransformERC20Call(state);\\n        } else if (state.selector == INativeOrdersFeature.fillLimitOrder.selector) {\\n            returnResult = _executeFillLimitOrderCall(state);\\n        } else if (state.selector == INativeOrdersFeature.fillRfqOrder.selector) {\\n            returnResult = _executeFillRfqOrderCall(state);\\n        } else {\\n            LibMetaTransactionsRichErrors\\n                .MetaTransactionUnsupportedFunctionError(state.hash, state.selector)\\n                .rrevert();\\n        }\\n        emit MetaTransactionExecuted(\\n            state.hash,\\n            state.selector,\\n            state.mtx.signer,\\n            state.mtx.sender\\n        );\\n    }\\n\\n    /// @dev Validate that a meta-transaction is executable.\\n    function _validateMetaTransaction(ExecuteState memory state)\\n        private\\n        view\\n    {\\n        // Must be from the required sender, if set.\\n        if (state.mtx.sender != address(0) && state.mtx.sender != state.sender) {\\n            LibMetaTransactionsRichErrors\\n                .MetaTransactionWrongSenderError(\\n                    state.hash,\\n                    state.sender,\\n                    state.mtx.sender\\n                ).rrevert();\\n        }\\n        // Must not be expired.\\n        if (state.mtx.expirationTimeSeconds <= block.timestamp) {\\n            LibMetaTransactionsRichErrors\\n                .MetaTransactionExpiredError(\\n                    state.hash,\\n                    block.timestamp,\\n                    state.mtx.expirationTimeSeconds\\n                ).rrevert();\\n        }\\n        // Must have a valid gas price.\\n        if (state.mtx.minGasPrice > tx.gasprice || state.mtx.maxGasPrice < tx.gasprice) {\\n            LibMetaTransactionsRichErrors\\n                .MetaTransactionGasPriceError(\\n                    state.hash,\\n                    tx.gasprice,\\n                    state.mtx.minGasPrice,\\n                    state.mtx.maxGasPrice\\n                ).rrevert();\\n        }\\n        // Must have enough ETH.\\n        state.selfBalance  = address(this).balance;\\n        if (state.mtx.value > state.selfBalance) {\\n            LibMetaTransactionsRichErrors\\n                .MetaTransactionInsufficientEthError(\\n                    state.hash,\\n                    state.selfBalance,\\n                    state.mtx.value\\n                ).rrevert();\\n        }\\n\\n        if (LibSignature.getSignerOfHash(state.hash, state.signature) !=\\n                state.mtx.signer) {\\n            LibSignatureRichErrors.SignatureValidationError(\\n                LibSignatureRichErrors.SignatureValidationErrorCodes.WRONG_SIGNER,\\n                state.hash,\\n                state.mtx.signer,\\n                // TODO: Remove this field from SignatureValidationError\\n                //       when rich reverts are part of the protocol repo.\\n                \\\"\\\"\\n            ).rrevert();\\n        }\\n        // Transaction must not have been already executed.\\n        state.executedBlockNumber = LibMetaTransactionsStorage\\n            .getStorage().mtxHashToExecutedBlockNumber[state.hash];\\n        if (state.executedBlockNumber != 0) {\\n            LibMetaTransactionsRichErrors\\n                .MetaTransactionAlreadyExecutedError(\\n                    state.hash,\\n                    state.executedBlockNumber\\n                ).rrevert();\\n        }\\n    }\\n\\n    /// @dev Execute a `ITransformERC20Feature.transformERC20()` meta-transaction call\\n    ///      by decoding the call args and translating the call to the internal\\n    ///      `ITransformERC20Feature._transformERC20()` variant, where we can override\\n    ///      the taker address.\\n    function _executeTransformERC20Call(ExecuteState memory state)\\n        private\\n        returns (bytes memory returnResult)\\n    {\\n        // HACK(dorothy-zbornak): `abi.decode()` with the individual args\\n        // will cause a stack overflow. But we can prefix the call data with an\\n        // offset to transform it into the encoding for the equivalent single struct arg,\\n        // since decoding a single struct arg consumes far less stack space than\\n        // decoding multiple struct args.\\n\\n        // Where the encoding for multiple args (with the selector ommitted)\\n        // would typically look like:\\n        // | argument                 |  offset |\\n        // |--------------------------|---------|\\n        // | inputToken               |       0 |\\n        // | outputToken              |      32 |\\n        // | inputTokenAmount         |      64 |\\n        // | minOutputTokenAmount     |      96 |\\n        // | transformations (offset) |     128 | = 32\\n        // | transformations (data)   |     160 |\\n\\n        // We will ABI-decode a single struct arg copy with the layout:\\n        // | argument                 |  offset |\\n        // |--------------------------|---------|\\n        // | (arg 1 offset)           |       0 | = 32\\n        // | inputToken               |      32 |\\n        // | outputToken              |      64 |\\n        // | inputTokenAmount         |      96 |\\n        // | minOutputTokenAmount     |     128 |\\n        // | transformations (offset) |     160 | = 32\\n        // | transformations (data)   |     192 |\\n\\n        ExternalTransformERC20Args memory args;\\n        {\\n            bytes memory encodedStructArgs = new bytes(state.mtx.callData.length - 4 + 32);\\n            // Copy the args data from the original, after the new struct offset prefix.\\n            bytes memory fromCallData = state.mtx.callData;\\n            assert(fromCallData.length >= 160);\\n            uint256 fromMem;\\n            uint256 toMem;\\n            assembly {\\n                // Prefix the calldata with a struct offset,\\n                // which points to just one word over.\\n                mstore(add(encodedStructArgs, 32), 32)\\n                // Copy everything after the selector.\\n                fromMem := add(fromCallData, 36)\\n                // Start copying after the struct offset.\\n                toMem := add(encodedStructArgs, 64)\\n            }\\n            LibBytesV06.memCopy(toMem, fromMem, fromCallData.length - 4);\\n            // Decode call args for `ITransformERC20Feature.transformERC20()` as a struct.\\n            args = abi.decode(encodedStructArgs, (ExternalTransformERC20Args));\\n        }\\n        // Call `ITransformERC20Feature._transformERC20()` (internal variant).\\n        return _callSelf(\\n            state.hash,\\n            abi.encodeWithSelector(\\n                ITransformERC20Feature._transformERC20.selector,\\n                ITransformERC20Feature.TransformERC20Args({\\n                    taker: state.mtx.signer, // taker is mtx signer\\n                    inputToken: args.inputToken,\\n                    outputToken: args.outputToken,\\n                    inputTokenAmount: args.inputTokenAmount,\\n                    minOutputTokenAmount: args.minOutputTokenAmount,\\n                    transformations: args.transformations,\\n                    useSelfBalance: false,\\n                    recipient: state.mtx.signer\\n              })\\n            ),\\n            state.mtx.value\\n        );\\n    }\\n\\n    /// @dev Extract arguments from call data by copying everything after the\\n    ///      4-byte selector into a new byte array.\\n    /// @param callData The call data from which arguments are to be extracted.\\n    /// @return args The extracted arguments as a byte array.\\n    function _extractArgumentsFromCallData(\\n        bytes memory callData\\n    )\\n        private\\n        pure\\n        returns (bytes memory args)\\n    {\\n        args = new bytes(callData.length - 4);\\n        uint256 fromMem;\\n        uint256 toMem;\\n\\n        assembly {\\n            fromMem := add(callData, 36) // skip length and 4-byte selector\\n            toMem := add(args, 32)       // write after length prefix\\n        }\\n\\n        LibBytesV06.memCopy(toMem, fromMem, args.length);\\n\\n        return args;\\n    }\\n\\n    /// @dev Execute a `INativeOrdersFeature.fillLimitOrder()` meta-transaction call\\n    ///      by decoding the call args and translating the call to the internal\\n    ///      `INativeOrdersFeature._fillLimitOrder()` variant, where we can override\\n    ///      the taker address.\\n    function _executeFillLimitOrderCall(ExecuteState memory state)\\n        private\\n        returns (bytes memory returnResult)\\n    {\\n        LibNativeOrder.LimitOrder memory order;\\n        LibSignature.Signature memory signature;\\n        uint128 takerTokenFillAmount;\\n\\n        bytes memory args = _extractArgumentsFromCallData(state.mtx.callData);\\n        (order, signature, takerTokenFillAmount) = abi.decode(args, (LibNativeOrder.LimitOrder, LibSignature.Signature, uint128));\\n\\n        return _callSelf(\\n            state.hash,\\n            abi.encodeWithSelector(\\n                INativeOrdersFeature._fillLimitOrder.selector,\\n                order,\\n                signature,\\n                takerTokenFillAmount,\\n                state.mtx.signer, // taker is mtx signer\\n                msg.sender\\n            ),\\n            state.mtx.value\\n        );\\n    }\\n\\n    /// @dev Execute a `INativeOrdersFeature.fillRfqOrder()` meta-transaction call\\n    ///      by decoding the call args and translating the call to the internal\\n    ///      `INativeOrdersFeature._fillRfqOrder()` variant, where we can overrideunimpleme\\n    ///      the taker address.\\n    function _executeFillRfqOrderCall(ExecuteState memory state)\\n        private\\n        returns (bytes memory returnResult)\\n    {\\n        LibNativeOrder.RfqOrder memory order;\\n        LibSignature.Signature memory signature;\\n        uint128 takerTokenFillAmount;\\n\\n        bytes memory args = _extractArgumentsFromCallData(state.mtx.callData);\\n        (order, signature, takerTokenFillAmount) = abi.decode(args, (LibNativeOrder.RfqOrder, LibSignature.Signature, uint128));\\n\\n        return _callSelf(\\n            state.hash,\\n            abi.encodeWithSelector(\\n                INativeOrdersFeature._fillRfqOrder.selector,\\n                order,\\n                signature,\\n                takerTokenFillAmount,\\n                state.mtx.signer, // taker is mtx signer\\n                false,\\n                state.mtx.signer\\n            ),\\n            state.mtx.value\\n        );\\n    }\\n\\n    /// @dev Make an arbitrary internal, meta-transaction call.\\n    ///      Warning: Do not let unadulterated `callData` into this function.\\n    function _callSelf(bytes32 hash, bytes memory callData, uint256 value)\\n        private\\n        returns (bytes memory returnResult)\\n    {\\n        bool success;\\n        (success, returnResult) = address(this).call{value: value}(callData);\\n        if (!success) {\\n            LibMetaTransactionsRichErrors.MetaTransactionCallFailedError(\\n                hash,\\n                callData,\\n                returnResult\\n            ).rrevert();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51af0935ba4304ff4e7f0cc55eda7acae24c72cb0ce2ed7f7ec7fe0e917add26\",\"license\":\"Apache-2.0\"},\"src/zero-ex/features/interfaces/IFeature.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\n\\n/// @dev Basic interface for a feature contract.\\ninterface IFeature {\\n\\n    // solhint-disable func-name-mixedcase\\n\\n    /// @dev The name of this feature set.\\n    function FEATURE_NAME() external view returns (string memory name);\\n\\n    /// @dev The version of this feature set.\\n    function FEATURE_VERSION() external view returns (uint256 version);\\n}\\n\",\"keccak256\":\"0x95e4108668c121a4d7072c8cf579ce349fb1287e2259aed613e45d716ceb3905\",\"license\":\"Apache-2.0\"},\"src/zero-ex/features/interfaces/IMetaTransactionsFeature.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../../contracts-erc20/v06/IERC20TokenV06.sol\\\";\\nimport \\\"../libs/LibSignature.sol\\\";\\n\\n/// @dev Meta-transactions feature.\\ninterface IMetaTransactionsFeature {\\n    /// @dev Describes an exchange proxy meta transaction.\\n    struct MetaTransactionData {\\n        // Signer of meta-transaction. On whose behalf to execute the MTX.\\n        address payable signer;\\n        // Required sender, or NULL for anyone.\\n        address sender;\\n        // Minimum gas price.\\n        uint256 minGasPrice;\\n        // Maximum gas price.\\n        uint256 maxGasPrice;\\n        // MTX is invalid after this time.\\n        uint256 expirationTimeSeconds;\\n        // Nonce to make this MTX unique.\\n        uint256 salt;\\n        // Encoded call data to a function on the exchange proxy.\\n        bytes callData;\\n        // Amount of ETH to attach to the call.\\n        uint256 value;\\n        // ERC20 fee `signer` pays `sender`.\\n        IERC20TokenV06 feeToken;\\n        // ERC20 fee amount.\\n        uint256 feeAmount;\\n    }\\n\\n    /// @dev Emitted whenever a meta-transaction is executed via\\n    ///      `executeMetaTransaction()` or `executeMetaTransactions()`.\\n    /// @param hash The meta-transaction hash.\\n    /// @param selector The selector of the function being executed.\\n    /// @param signer Who to execute the meta-transaction on behalf of.\\n    /// @param sender Who executed the meta-transaction.\\n    event MetaTransactionExecuted(\\n        bytes32 hash,\\n        bytes4 indexed selector,\\n        address signer,\\n        address sender\\n    );\\n\\n    /// @dev Execute a single meta-transaction.\\n    /// @param mtx The meta-transaction.\\n    /// @param signature The signature by `mtx.signer`.\\n    /// @return returnResult The ABI-encoded result of the underlying call.\\n    function executeMetaTransaction(\\n        MetaTransactionData calldata mtx,\\n        LibSignature.Signature calldata signature\\n    )\\n        external\\n        payable\\n        returns (bytes memory returnResult);\\n\\n    /// @dev Execute multiple meta-transactions.\\n    /// @param mtxs The meta-transactions.\\n    /// @param signatures The signature by each respective `mtx.signer`.\\n    /// @return returnResults The ABI-encoded results of the underlying calls.\\n    function batchExecuteMetaTransactions(\\n        MetaTransactionData[] calldata mtxs,\\n        LibSignature.Signature[] calldata signatures\\n    )\\n        external\\n        payable\\n        returns (bytes[] memory returnResults);\\n\\n    /// @dev Get the block at which a meta-transaction has been executed.\\n    /// @param mtx The meta-transaction.\\n    /// @return blockNumber The block height when the meta-transactioin was executed.\\n    function getMetaTransactionExecutedBlock(MetaTransactionData calldata mtx)\\n        external\\n        view\\n        returns (uint256 blockNumber);\\n\\n    /// @dev Get the block at which a meta-transaction hash has been executed.\\n    /// @param mtxHash The meta-transaction hash.\\n    /// @return blockNumber The block height when the meta-transactioin was executed.\\n    function getMetaTransactionHashExecutedBlock(bytes32 mtxHash)\\n        external\\n        view\\n        returns (uint256 blockNumber);\\n\\n    /// @dev Get the EIP712 hash of a meta-transaction.\\n    /// @param mtx The meta-transaction.\\n    /// @return mtxHash The EIP712 hash of `mtx`.\\n    function getMetaTransactionHash(MetaTransactionData calldata mtx)\\n        external\\n        view\\n        returns (bytes32 mtxHash);\\n}\\n\",\"keccak256\":\"0x10d393a79369a4d865265c626d2daed453e042139c378546c000fe4f99d99302\",\"license\":\"Apache-2.0\"},\"src/zero-ex/features/interfaces/INativeOrdersEvents.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2021 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../../contracts-erc20/v06/IERC20TokenV06.sol\\\";\\nimport \\\"../libs/LibSignature.sol\\\";\\nimport \\\"../libs/LibNativeOrder.sol\\\";\\n\\n\\n/// @dev Events emitted by NativeOrdersFeature.\\ninterface INativeOrdersEvents {\\n\\n    /// @dev Emitted whenever a `LimitOrder` is filled.\\n    /// @param orderHash The canonical hash of the order.\\n    /// @param maker The maker of the order.\\n    /// @param taker The taker of the order.\\n    /// @param feeRecipient Fee recipient of the order.\\n    /// @param takerTokenFilledAmount How much taker token was filled.\\n    /// @param makerTokenFilledAmount How much maker token was filled.\\n    /// @param protocolFeePaid How much protocol fee was paid.\\n    /// @param pool The fee pool associated with this order.\\n    event LimitOrderFilled(\\n        bytes32 orderHash,\\n        address maker,\\n        address taker,\\n        address feeRecipient,\\n        address makerToken,\\n        address takerToken,\\n        uint128 takerTokenFilledAmount,\\n        uint128 makerTokenFilledAmount,\\n        uint128 takerTokenFeeFilledAmount,\\n        uint256 protocolFeePaid,\\n        bytes32 pool\\n    );\\n\\n    /// @dev Emitted whenever an `RfqOrder` is filled.\\n    /// @param orderHash The canonical hash of the order.\\n    /// @param maker The maker of the order.\\n    /// @param taker The taker of the order.\\n    /// @param takerTokenFilledAmount How much taker token was filled.\\n    /// @param makerTokenFilledAmount How much maker token was filled.\\n    /// @param pool The fee pool associated with this order.\\n    event RfqOrderFilled(\\n        bytes32 orderHash,\\n        address maker,\\n        address taker,\\n        address makerToken,\\n        address takerToken,\\n        uint128 takerTokenFilledAmount,\\n        uint128 makerTokenFilledAmount,\\n        bytes32 pool\\n    );\\n\\n    /// @dev Emitted whenever a limit or RFQ order is cancelled.\\n    /// @param orderHash The canonical hash of the order.\\n    /// @param maker The order maker.\\n    event OrderCancelled(\\n        bytes32 orderHash,\\n        address maker\\n    );\\n\\n    /// @dev Emitted whenever Limit orders are cancelled by pair by a maker.\\n    /// @param maker The maker of the order.\\n    /// @param makerToken The maker token in a pair for the orders cancelled.\\n    /// @param takerToken The taker token in a pair for the orders cancelled.\\n    /// @param minValidSalt The new minimum valid salt an order with this pair must\\n    ///        have.\\n    event PairCancelledLimitOrders(\\n        address maker,\\n        address makerToken,\\n        address takerToken,\\n        uint256 minValidSalt\\n    );\\n\\n    /// @dev Emitted whenever RFQ orders are cancelled by pair by a maker.\\n    /// @param maker The maker of the order.\\n    /// @param makerToken The maker token in a pair for the orders cancelled.\\n    /// @param takerToken The taker token in a pair for the orders cancelled.\\n    /// @param minValidSalt The new minimum valid salt an order with this pair must\\n    ///        have.\\n    event PairCancelledRfqOrders(\\n        address maker,\\n        address makerToken,\\n        address takerToken,\\n        uint256 minValidSalt\\n    );\\n\\n    /// @dev Emitted when new addresses are allowed or disallowed to fill\\n    ///      orders with a given txOrigin.\\n    /// @param origin The address doing the allowing.\\n    /// @param addrs The address being allowed/disallowed.\\n    /// @param allowed Indicates whether the address should be allowed.\\n    event RfqOrderOriginsAllowed(\\n        address origin,\\n        address[] addrs,\\n        bool allowed\\n    );\\n\\n    /// @dev Emitted when new order signers are registered\\n    /// @param maker The maker address that is registering a designated signer.\\n    /// @param signer The address that will sign on behalf of maker.\\n    /// @param allowed Indicates whether the address should be allowed.\\n    event OrderSignerRegistered(\\n        address maker,\\n        address signer,\\n        bool allowed\\n    );\\n}\\n\",\"keccak256\":\"0x612127d3c7a08652bfe25f5c202829c0a13c2ae2b139cacd26426b748c2abff5\",\"license\":\"Apache-2.0\"},\"src/zero-ex/features/interfaces/INativeOrdersFeature.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../../contracts-erc20/v06/IERC20TokenV06.sol\\\";\\nimport \\\"../libs/LibSignature.sol\\\";\\nimport \\\"../libs/LibNativeOrder.sol\\\";\\nimport \\\"./INativeOrdersEvents.sol\\\";\\n\\n\\n/// @dev Feature for interacting with limit orders.\\ninterface INativeOrdersFeature is\\n    INativeOrdersEvents\\n{\\n\\n    /// @dev Transfers protocol fees from the `FeeCollector` pools into\\n    ///      the staking contract.\\n    /// @param poolIds Staking pool IDs\\n    function transferProtocolFeesForPools(bytes32[] calldata poolIds)\\n        external;\\n\\n    /// @dev Fill a limit order. The taker and sender will be the caller.\\n    /// @param order The limit order. ETH protocol fees can be\\n    ///      attached to this call. Any unspent ETH will be refunded to\\n    ///      the caller.\\n    /// @param signature The order signature.\\n    /// @param takerTokenFillAmount Maximum taker token amount to fill this order with.\\n    /// @return takerTokenFilledAmount How much maker token was filled.\\n    /// @return makerTokenFilledAmount How much maker token was filled.\\n    function fillLimitOrder(\\n        LibNativeOrder.LimitOrder calldata order,\\n        LibSignature.Signature calldata signature,\\n        uint128 takerTokenFillAmount\\n    )\\n        external\\n        payable\\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount);\\n\\n    /// @dev Fill an RFQ order for up to `takerTokenFillAmount` taker tokens.\\n    ///      The taker will be the caller.\\n    /// @param order The RFQ order.\\n    /// @param signature The order signature.\\n    /// @param takerTokenFillAmount Maximum taker token amount to fill this order with.\\n    /// @return takerTokenFilledAmount How much maker token was filled.\\n    /// @return makerTokenFilledAmount How much maker token was filled.\\n    function fillRfqOrder(\\n        LibNativeOrder.RfqOrder calldata order,\\n        LibSignature.Signature calldata signature,\\n        uint128 takerTokenFillAmount\\n    )\\n        external\\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount);\\n\\n    /// @dev Fill an RFQ order for exactly `takerTokenFillAmount` taker tokens.\\n    ///      The taker will be the caller. ETH protocol fees can be\\n    ///      attached to this call. Any unspent ETH will be refunded to\\n    ///      the caller.\\n    /// @param order The limit order.\\n    /// @param signature The order signature.\\n    /// @param takerTokenFillAmount How much taker token to fill this order with.\\n    /// @return makerTokenFilledAmount How much maker token was filled.\\n    function fillOrKillLimitOrder(\\n        LibNativeOrder.LimitOrder calldata order,\\n        LibSignature.Signature calldata signature,\\n        uint128 takerTokenFillAmount\\n    )\\n        external\\n        payable\\n        returns (uint128 makerTokenFilledAmount);\\n\\n    /// @dev Fill an RFQ order for exactly `takerTokenFillAmount` taker tokens.\\n    ///      The taker will be the caller.\\n    /// @param order The RFQ order.\\n    /// @param signature The order signature.\\n    /// @param takerTokenFillAmount How much taker token to fill this order with.\\n    /// @return makerTokenFilledAmount How much maker token was filled.\\n    function fillOrKillRfqOrder(\\n        LibNativeOrder.RfqOrder calldata order,\\n        LibSignature.Signature calldata signature,\\n        uint128 takerTokenFillAmount\\n    )\\n        external\\n        returns (uint128 makerTokenFilledAmount);\\n\\n    /// @dev Fill a limit order. Internal variant. ETH protocol fees can be\\n    ///      attached to this call. Any unspent ETH will be refunded to\\n    ///      `msg.sender` (not `sender`).\\n    /// @param order The limit order.\\n    /// @param signature The order signature.\\n    /// @param takerTokenFillAmount Maximum taker token to fill this order with.\\n    /// @param taker The order taker.\\n    /// @param sender The order sender.\\n    /// @return takerTokenFilledAmount How much maker token was filled.\\n    /// @return makerTokenFilledAmount How much maker token was filled.\\n    function _fillLimitOrder(\\n        LibNativeOrder.LimitOrder calldata order,\\n        LibSignature.Signature calldata signature,\\n        uint128 takerTokenFillAmount,\\n        address taker,\\n        address sender\\n    )\\n        external\\n        payable\\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount);\\n\\n    /// @dev Fill an RFQ order. Internal variant.\\n    /// @param order The RFQ order.\\n    /// @param signature The order signature.\\n    /// @param takerTokenFillAmount Maximum taker token to fill this order with.\\n    /// @param taker The order taker.\\n    /// @param useSelfBalance Whether to use the ExchangeProxy's transient\\n    ///        balance of taker tokens to fill the order.\\n    /// @param recipient The recipient of the maker tokens.\\n    /// @return takerTokenFilledAmount How much maker token was filled.\\n    /// @return makerTokenFilledAmount How much maker token was filled.\\n    function _fillRfqOrder(\\n        LibNativeOrder.RfqOrder calldata order,\\n        LibSignature.Signature calldata signature,\\n        uint128 takerTokenFillAmount,\\n        address taker,\\n        bool useSelfBalance,\\n        address recipient\\n    )\\n        external\\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount);\\n\\n    /// @dev Cancel a single limit order. The caller must be the maker or a valid order signer.\\n    ///      Silently succeeds if the order has already been cancelled.\\n    /// @param order The limit order.\\n    function cancelLimitOrder(LibNativeOrder.LimitOrder calldata order)\\n        external;\\n\\n    /// @dev Cancel a single RFQ order. The caller must be the maker or a valid order signer.\\n    ///      Silently succeeds if the order has already been cancelled.\\n    /// @param order The RFQ order.\\n    function cancelRfqOrder(LibNativeOrder.RfqOrder calldata order)\\n        external;\\n\\n    /// @dev Mark what tx.origin addresses are allowed to fill an order that\\n    ///      specifies the message sender as its txOrigin.\\n    /// @param origins An array of origin addresses to update.\\n    /// @param allowed True to register, false to unregister.\\n    function registerAllowedRfqOrigins(address[] memory origins, bool allowed)\\n        external;\\n\\n    /// @dev Cancel multiple limit orders. The caller must be the maker or a valid order signer.\\n    ///      Silently succeeds if the order has already been cancelled.\\n    /// @param orders The limit orders.\\n    function batchCancelLimitOrders(LibNativeOrder.LimitOrder[] calldata orders)\\n        external;\\n\\n    /// @dev Cancel multiple RFQ orders. The caller must be the maker or a valid order signer.\\n    ///      Silently succeeds if the order has already been cancelled.\\n    /// @param orders The RFQ orders.\\n    function batchCancelRfqOrders(LibNativeOrder.RfqOrder[] calldata orders)\\n        external;\\n\\n    /// @dev Cancel all limit orders for a given maker and pair with a salt less\\n    ///      than the value provided. The caller must be the maker. Subsequent\\n    ///      calls to this function with the same caller and pair require the\\n    ///      new salt to be >= the old salt.\\n    /// @param makerToken The maker token.\\n    /// @param takerToken The taker token.\\n    /// @param minValidSalt The new minimum valid salt.\\n    function cancelPairLimitOrders(\\n        IERC20TokenV06 makerToken,\\n        IERC20TokenV06 takerToken,\\n        uint256 minValidSalt\\n    )\\n        external;\\n\\n    /// @dev Cancel all limit orders for a given maker and pair with a salt less\\n    ///      than the value provided. The caller must be a signer registered to the maker.\\n    ///      Subsequent calls to this function with the same maker and pair require the\\n    ///      new salt to be >= the old salt.\\n    /// @param maker The maker for which to cancel.\\n    /// @param makerToken The maker token.\\n    /// @param takerToken The taker token.\\n    /// @param minValidSalt The new minimum valid salt.\\n    function cancelPairLimitOrdersWithSigner(\\n        address maker,\\n        IERC20TokenV06 makerToken,\\n        IERC20TokenV06 takerToken,\\n        uint256 minValidSalt\\n    )\\n        external;\\n\\n    /// @dev Cancel all limit orders for a given maker and pairs with salts less\\n    ///      than the values provided. The caller must be the maker. Subsequent\\n    ///      calls to this function with the same caller and pair require the\\n    ///      new salt to be >= the old salt.\\n    /// @param makerTokens The maker tokens.\\n    /// @param takerTokens The taker tokens.\\n    /// @param minValidSalts The new minimum valid salts.\\n    function batchCancelPairLimitOrders(\\n        IERC20TokenV06[] calldata makerTokens,\\n        IERC20TokenV06[] calldata takerTokens,\\n        uint256[] calldata minValidSalts\\n    )\\n        external;\\n\\n    /// @dev Cancel all limit orders for a given maker and pairs with salts less\\n    ///      than the values provided. The caller must be a signer registered to the maker.\\n    ///      Subsequent calls to this function with the same maker and pair require the\\n    ///      new salt to be >= the old salt.\\n    /// @param maker The maker for which to cancel.\\n    /// @param makerTokens The maker tokens.\\n    /// @param takerTokens The taker tokens.\\n    /// @param minValidSalts The new minimum valid salts.\\n    function batchCancelPairLimitOrdersWithSigner(\\n        address maker,\\n        IERC20TokenV06[] memory makerTokens,\\n        IERC20TokenV06[] memory takerTokens,\\n        uint256[] memory minValidSalts\\n    )\\n        external;\\n\\n    /// @dev Cancel all RFQ orders for a given maker and pair with a salt less\\n    ///      than the value provided. The caller must be the maker. Subsequent\\n    ///      calls to this function with the same caller and pair require the\\n    ///      new salt to be >= the old salt.\\n    /// @param makerToken The maker token.\\n    /// @param takerToken The taker token.\\n    /// @param minValidSalt The new minimum valid salt.\\n    function cancelPairRfqOrders(\\n        IERC20TokenV06 makerToken,\\n        IERC20TokenV06 takerToken,\\n        uint256 minValidSalt\\n    )\\n        external;\\n\\n    /// @dev Cancel all RFQ orders for a given maker and pair with a salt less\\n    ///      than the value provided. The caller must be a signer registered to the maker.\\n    ///      Subsequent calls to this function with the same maker and pair require the\\n    ///      new salt to be >= the old salt.\\n    /// @param maker The maker for which to cancel.\\n    /// @param makerToken The maker token.\\n    /// @param takerToken The taker token.\\n    /// @param minValidSalt The new minimum valid salt.\\n    function cancelPairRfqOrdersWithSigner(\\n        address maker,\\n        IERC20TokenV06 makerToken,\\n        IERC20TokenV06 takerToken,\\n        uint256 minValidSalt\\n    )\\n        external;\\n\\n    /// @dev Cancel all RFQ orders for a given maker and pairs with salts less\\n    ///      than the values provided. The caller must be the maker. Subsequent\\n    ///      calls to this function with the same caller and pair require the\\n    ///      new salt to be >= the old salt.\\n    /// @param makerTokens The maker tokens.\\n    /// @param takerTokens The taker tokens.\\n    /// @param minValidSalts The new minimum valid salts.\\n    function batchCancelPairRfqOrders(\\n        IERC20TokenV06[] calldata makerTokens,\\n        IERC20TokenV06[] calldata takerTokens,\\n        uint256[] calldata minValidSalts\\n    )\\n        external;\\n\\n    /// @dev Cancel all RFQ orders for a given maker and pairs with salts less\\n    ///      than the values provided. The caller must be a signer registered to the maker.\\n    ///      Subsequent calls to this function with the same maker and pair require the\\n    ///      new salt to be >= the old salt.\\n    /// @param maker The maker for which to cancel.\\n    /// @param makerTokens The maker tokens.\\n    /// @param takerTokens The taker tokens.\\n    /// @param minValidSalts The new minimum valid salts.\\n    function batchCancelPairRfqOrdersWithSigner(\\n        address maker,\\n        IERC20TokenV06[] memory makerTokens,\\n        IERC20TokenV06[] memory takerTokens,\\n        uint256[] memory minValidSalts\\n    )\\n        external;\\n\\n    /// @dev Get the order info for a limit order.\\n    /// @param order The limit order.\\n    /// @return orderInfo Info about the order.\\n    function getLimitOrderInfo(LibNativeOrder.LimitOrder calldata order)\\n        external\\n        view\\n        returns (LibNativeOrder.OrderInfo memory orderInfo);\\n\\n    /// @dev Get the order info for an RFQ order.\\n    /// @param order The RFQ order.\\n    /// @return orderInfo Info about the order.\\n    function getRfqOrderInfo(LibNativeOrder.RfqOrder calldata order)\\n        external\\n        view\\n        returns (LibNativeOrder.OrderInfo memory orderInfo);\\n\\n    /// @dev Get the canonical hash of a limit order.\\n    /// @param order The limit order.\\n    /// @return orderHash The order hash.\\n    function getLimitOrderHash(LibNativeOrder.LimitOrder calldata order)\\n        external\\n        view\\n        returns (bytes32 orderHash);\\n\\n    /// @dev Get the canonical hash of an RFQ order.\\n    /// @param order The RFQ order.\\n    /// @return orderHash The order hash.\\n    function getRfqOrderHash(LibNativeOrder.RfqOrder calldata order)\\n        external\\n        view\\n        returns (bytes32 orderHash);\\n\\n    /// @dev Get the protocol fee multiplier. This should be multiplied by the\\n    ///      gas price to arrive at the required protocol fee to fill a native order.\\n    /// @return multiplier The protocol fee multiplier.\\n    function getProtocolFeeMultiplier()\\n        external\\n        view\\n        returns (uint32 multiplier);\\n\\n    /// @dev Get order info, fillable amount, and signature validity for a limit order.\\n    ///      Fillable amount is determined using balances and allowances of the maker.\\n    /// @param order The limit order.\\n    /// @param signature The order signature.\\n    /// @return orderInfo Info about the order.\\n    /// @return actualFillableTakerTokenAmount How much of the order is fillable\\n    ///         based on maker funds, in taker tokens.\\n    /// @return isSignatureValid Whether the signature is valid.\\n    function getLimitOrderRelevantState(\\n        LibNativeOrder.LimitOrder calldata order,\\n        LibSignature.Signature calldata signature\\n    )\\n        external\\n        view\\n        returns (\\n            LibNativeOrder.OrderInfo memory orderInfo,\\n            uint128 actualFillableTakerTokenAmount,\\n            bool isSignatureValid\\n        );\\n\\n    /// @dev Get order info, fillable amount, and signature validity for an RFQ order.\\n    ///      Fillable amount is determined using balances and allowances of the maker.\\n    /// @param order The RFQ order.\\n    /// @param signature The order signature.\\n    /// @return orderInfo Info about the order.\\n    /// @return actualFillableTakerTokenAmount How much of the order is fillable\\n    ///         based on maker funds, in taker tokens.\\n    /// @return isSignatureValid Whether the signature is valid.\\n    function getRfqOrderRelevantState(\\n        LibNativeOrder.RfqOrder calldata order,\\n        LibSignature.Signature calldata signature\\n    )\\n        external\\n        view\\n        returns (\\n            LibNativeOrder.OrderInfo memory orderInfo,\\n            uint128 actualFillableTakerTokenAmount,\\n            bool isSignatureValid\\n        );\\n\\n    /// @dev Batch version of `getLimitOrderRelevantState()`, without reverting.\\n    ///      Orders that would normally cause `getLimitOrderRelevantState()`\\n    ///      to revert will have empty results.\\n    /// @param orders The limit orders.\\n    /// @param signatures The order signatures.\\n    /// @return orderInfos Info about the orders.\\n    /// @return actualFillableTakerTokenAmounts How much of each order is fillable\\n    ///         based on maker funds, in taker tokens.\\n    /// @return isSignatureValids Whether each signature is valid for the order.\\n    function batchGetLimitOrderRelevantStates(\\n        LibNativeOrder.LimitOrder[] calldata orders,\\n        LibSignature.Signature[] calldata signatures\\n    )\\n        external\\n        view\\n        returns (\\n            LibNativeOrder.OrderInfo[] memory orderInfos,\\n            uint128[] memory actualFillableTakerTokenAmounts,\\n            bool[] memory isSignatureValids\\n        );\\n\\n    /// @dev Batch version of `getRfqOrderRelevantState()`, without reverting.\\n    ///      Orders that would normally cause `getRfqOrderRelevantState()`\\n    ///      to revert will have empty results.\\n    /// @param orders The RFQ orders.\\n    /// @param signatures The order signatures.\\n    /// @return orderInfos Info about the orders.\\n    /// @return actualFillableTakerTokenAmounts How much of each order is fillable\\n    ///         based on maker funds, in taker tokens.\\n    /// @return isSignatureValids Whether each signature is valid for the order.\\n    function batchGetRfqOrderRelevantStates(\\n        LibNativeOrder.RfqOrder[] calldata orders,\\n        LibSignature.Signature[] calldata signatures\\n    )\\n        external\\n        view\\n        returns (\\n            LibNativeOrder.OrderInfo[] memory orderInfos,\\n            uint128[] memory actualFillableTakerTokenAmounts,\\n            bool[] memory isSignatureValids\\n        );\\n\\n    /// @dev Register a signer who can sign on behalf of msg.sender\\n    ///      This allows one to sign on behalf of a contract that calls this function\\n    /// @param signer The address from which you plan to generate signatures\\n    /// @param allowed True to register, false to unregister.\\n    function registerAllowedOrderSigner(\\n        address signer,\\n        bool allowed\\n    )\\n        external;\\n\\n    /// @dev checks if a given address is registered to sign on behalf of a maker address\\n    /// @param maker The maker address encoded in an order (can be a contract)\\n    /// @param signer The address that is providing a signature\\n    function isValidOrderSigner(\\n        address maker,\\n        address signer\\n    )\\n        external\\n        view\\n        returns (bool isAllowed);\\n}\\n\",\"keccak256\":\"0x89d0f6de7d2b6801f52707bed5b565e5ee17812285aa684272be969772f6f0ec\",\"license\":\"Apache-2.0\"},\"src/zero-ex/features/interfaces/IOwnableFeature.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../../contracts-utils/v06/interfaces/IOwnableV06.sol\\\";\\n\\n\\n// solhint-disable no-empty-blocks\\n/// @dev Owner management and migration features.\\ninterface IOwnableFeature is\\n    IOwnableV06\\n{\\n    /// @dev Emitted when `migrate()` is called.\\n    /// @param caller The caller of `migrate()`.\\n    /// @param migrator The migration contract.\\n    /// @param newOwner The address of the new owner.\\n    event Migrated(address caller, address migrator, address newOwner);\\n\\n    /// @dev Execute a migration function in the context of the ZeroEx contract.\\n    ///      The result of the function being called should be the magic bytes\\n    ///      0x2c64c5ef (`keccack('MIGRATE_SUCCESS')`). Only callable by the owner.\\n    ///      The owner will be temporarily set to `address(this)` inside the call.\\n    ///      Before returning, the owner will be set to `newOwner`.\\n    /// @param target The migrator contract address.\\n    /// @param newOwner The address of the new owner.\\n    /// @param data The call data.\\n    function migrate(address target, bytes calldata data, address newOwner) external;\\n}\\n\",\"keccak256\":\"0xe81956582c0be0010796d0946ba045e3e11f0e048c904d6448fa474944244c89\",\"license\":\"Apache-2.0\"},\"src/zero-ex/features/interfaces/ISimpleFunctionRegistryFeature.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\n\\n/// @dev Basic registry management features.\\ninterface ISimpleFunctionRegistryFeature {\\n\\n    /// @dev A function implementation was updated via `extend()` or `rollback()`.\\n    /// @param selector The function selector.\\n    /// @param oldImpl The implementation contract address being replaced.\\n    /// @param newImpl The replacement implementation contract address.\\n    event ProxyFunctionUpdated(bytes4 indexed selector, address oldImpl, address newImpl);\\n\\n    /// @dev Roll back to a prior implementation of a function.\\n    /// @param selector The function selector.\\n    /// @param targetImpl The address of an older implementation of the function.\\n    function rollback(bytes4 selector, address targetImpl) external;\\n\\n    /// @dev Register or replace a function.\\n    /// @param selector The function selector.\\n    /// @param impl The implementation contract for the function.\\n    function extend(bytes4 selector, address impl) external;\\n\\n    /// @dev Retrieve the length of the rollback history for a function.\\n    /// @param selector The function selector.\\n    /// @return rollbackLength The number of items in the rollback history for\\n    ///         the function.\\n    function getRollbackLength(bytes4 selector)\\n        external\\n        view\\n        returns (uint256 rollbackLength);\\n\\n    /// @dev Retrieve an entry in the rollback history for a function.\\n    /// @param selector The function selector.\\n    /// @param idx The index in the rollback history.\\n    /// @return impl An implementation address for the function at\\n    ///         index `idx`.\\n    function getRollbackEntryAtIndex(bytes4 selector, uint256 idx)\\n        external\\n        view\\n        returns (address impl);\\n}\\n\",\"keccak256\":\"0x07507897f6b0f0e62895b7a0124ecc27f202b25cb682c9d8dc5eaf79a64a9233\",\"license\":\"Apache-2.0\"},\"src/zero-ex/features/interfaces/ITransformERC20Feature.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../../contracts-erc20/v06/IERC20TokenV06.sol\\\";\\nimport \\\"../../transformers/IERC20Transformer.sol\\\";\\nimport \\\"../../external/IFlashWallet.sol\\\";\\n\\n\\n/// @dev Feature to composably transform between ERC20 tokens.\\ninterface ITransformERC20Feature {\\n\\n    /// @dev Defines a transformation to run in `transformERC20()`.\\n    struct Transformation {\\n        // The deployment nonce for the transformer.\\n        // The address of the transformer contract will be derived from this\\n        // value.\\n        uint32 deploymentNonce;\\n        // Arbitrary data to pass to the transformer.\\n        bytes data;\\n    }\\n\\n    /// @dev Arguments for `_transformERC20()`.\\n    struct TransformERC20Args {\\n        // The taker address.\\n        address payable taker;\\n        // The token being provided by the taker.\\n        // If `0xeee...`, ETH is implied and should be provided with the call.`\\n        IERC20TokenV06 inputToken;\\n        // The token to be acquired by the taker.\\n        // `0xeee...` implies ETH.\\n        IERC20TokenV06 outputToken;\\n        // The amount of `inputToken` to take from the taker.\\n        // If set to `uint256(-1)`, the entire spendable balance of the taker\\n        // will be solt.\\n        uint256 inputTokenAmount;\\n        // The minimum amount of `outputToken` the taker\\n        // must receive for the entire transformation to succeed. If set to zero,\\n        // the minimum output token transfer will not be asserted.\\n        uint256 minOutputTokenAmount;\\n        // The transformations to execute on the token balance(s)\\n        // in sequence.\\n        Transformation[] transformations;\\n        // Whether to use the Exchange Proxy's balance of `inputToken`.\\n        bool useSelfBalance;\\n        // The recipient of the bought `outputToken`.\\n        address payable recipient;\\n    }\\n\\n    /// @dev Raised upon a successful `transformERC20`.\\n    /// @param taker The taker (caller) address.\\n    /// @param inputToken The token being provided by the taker.\\n    ///        If `0xeee...`, ETH is implied and should be provided with the call.`\\n    /// @param outputToken The token to be acquired by the taker.\\n    ///        `0xeee...` implies ETH.\\n    /// @param inputTokenAmount The amount of `inputToken` to take from the taker.\\n    /// @param outputTokenAmount The amount of `outputToken` received by the taker.\\n    event TransformedERC20(\\n        address indexed taker,\\n        address inputToken,\\n        address outputToken,\\n        uint256 inputTokenAmount,\\n        uint256 outputTokenAmount\\n    );\\n\\n    /// @dev Raised when `setTransformerDeployer()` is called.\\n    /// @param transformerDeployer The new deployer address.\\n    event TransformerDeployerUpdated(address transformerDeployer);\\n\\n    /// @dev Raised when `setQuoteSigner()` is called.\\n    /// @param quoteSigner The new quote signer.\\n    event QuoteSignerUpdated(address quoteSigner);\\n\\n    /// @dev Replace the allowed deployer for transformers.\\n    ///      Only callable by the owner.\\n    /// @param transformerDeployer The address of the new trusted deployer\\n    ///        for transformers.\\n    function setTransformerDeployer(address transformerDeployer)\\n        external;\\n\\n    /// @dev Replace the optional signer for `transformERC20()` calldata.\\n    ///      Only callable by the owner.\\n    /// @param quoteSigner The address of the new calldata signer.\\n    function setQuoteSigner(address quoteSigner)\\n        external;\\n\\n    /// @dev Deploy a new flash wallet instance and replace the current one with it.\\n    ///      Useful if we somehow break the current wallet instance.\\n    ///       Only callable by the owner.\\n    /// @return wallet The new wallet instance.\\n    function createTransformWallet()\\n        external\\n        returns (IFlashWallet wallet);\\n\\n    /// @dev Executes a series of transformations to convert an ERC20 `inputToken`\\n    ///      to an ERC20 `outputToken`.\\n    /// @param inputToken The token being provided by the sender.\\n    ///        If `0xeee...`, ETH is implied and should be provided with the call.`\\n    /// @param outputToken The token to be acquired by the sender.\\n    ///        `0xeee...` implies ETH.\\n    /// @param inputTokenAmount The amount of `inputToken` to take from the sender.\\n    /// @param minOutputTokenAmount The minimum amount of `outputToken` the sender\\n    ///        must receive for the entire transformation to succeed.\\n    /// @param transformations The transformations to execute on the token balance(s)\\n    ///        in sequence.\\n    /// @return outputTokenAmount The amount of `outputToken` received by the sender.\\n    function transformERC20(\\n        IERC20TokenV06 inputToken,\\n        IERC20TokenV06 outputToken,\\n        uint256 inputTokenAmount,\\n        uint256 minOutputTokenAmount,\\n        Transformation[] calldata transformations\\n    )\\n        external\\n        payable\\n        returns (uint256 outputTokenAmount);\\n\\n    /// @dev Internal version of `transformERC20()`. Only callable from within.\\n    /// @param args A `TransformERC20Args` struct.\\n    /// @return outputTokenAmount The amount of `outputToken` received by the taker.\\n    function _transformERC20(TransformERC20Args calldata args)\\n        external\\n        payable\\n        returns (uint256 outputTokenAmount);\\n\\n    /// @dev Return the current wallet instance that will serve as the execution\\n    ///      context for transformations.\\n    /// @return wallet The wallet instance.\\n    function getTransformWallet()\\n        external\\n        view\\n        returns (IFlashWallet wallet);\\n\\n    /// @dev Return the allowed deployer for transformers.\\n    /// @return deployer The transform deployer address.\\n    function getTransformerDeployer()\\n        external\\n        view\\n        returns (address deployer);\\n\\n    /// @dev Return the optional signer for `transformERC20()` calldata.\\n    /// @return signer The transform deployer address.\\n    function getQuoteSigner()\\n        external\\n        view\\n        returns (address signer);\\n}\\n\",\"keccak256\":\"0xe9f8ddf4c78830077160956a87530495bbbdd4abfd3a0f7902885fc93d06e2f3\",\"license\":\"Apache-2.0\"},\"src/zero-ex/features/libs/LibNativeOrder.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../../contracts-erc20/v06/IERC20TokenV06.sol\\\";\\nimport \\\"../../../contracts-utils/v06/errors/LibRichErrorsV06.sol\\\";\\nimport \\\"../../../contracts-utils/v06/LibSafeMathV06.sol\\\";\\nimport \\\"../../errors/LibNativeOrdersRichErrors.sol\\\";\\n\\n\\n/// @dev A library for common native order operations.\\nlibrary LibNativeOrder {\\n    using LibSafeMathV06 for uint256;\\n    using LibRichErrorsV06 for bytes;\\n\\n    enum OrderStatus {\\n        INVALID,\\n        FILLABLE,\\n        FILLED,\\n        CANCELLED,\\n        EXPIRED\\n    }\\n\\n    /// @dev A standard OTC or OO limit order.\\n    struct LimitOrder {\\n        IERC20TokenV06 makerToken;\\n        IERC20TokenV06 takerToken;\\n        uint128 makerAmount;\\n        uint128 takerAmount;\\n        uint128 takerTokenFeeAmount;\\n        address maker;\\n        address taker;\\n        address sender;\\n        address feeRecipient;\\n        bytes32 pool;\\n        uint64 expiry;\\n        uint256 salt;\\n    }\\n\\n    /// @dev An RFQ limit order.\\n    struct RfqOrder {\\n        IERC20TokenV06 makerToken;\\n        IERC20TokenV06 takerToken;\\n        uint128 makerAmount;\\n        uint128 takerAmount;\\n        address maker;\\n        address taker;\\n        address txOrigin;\\n        bytes32 pool;\\n        uint64 expiry;\\n        uint256 salt;\\n    }\\n\\n    /// @dev An OTC limit order.\\n    struct OtcOrder {\\n        IERC20TokenV06 makerToken;\\n        IERC20TokenV06 takerToken;\\n        uint128 makerAmount;\\n        uint128 takerAmount;\\n        address maker;\\n        address taker;\\n        address txOrigin;\\n        uint256 expiryAndNonce; // [uint64 expiry, uint64 nonceBucket, uint128 nonce]\\n    }\\n\\n    /// @dev Info on a limit or RFQ order.\\n    struct OrderInfo {\\n        bytes32 orderHash;\\n        OrderStatus status;\\n        uint128 takerTokenFilledAmount;\\n    }\\n\\n    /// @dev Info on an OTC order.\\n    struct OtcOrderInfo {\\n        bytes32 orderHash;\\n        OrderStatus status;\\n    }\\n\\n    uint256 private constant UINT_128_MASK = (1 << 128) - 1;\\n    uint256 private constant UINT_64_MASK = (1 << 64) - 1;\\n    uint256 private constant ADDRESS_MASK = (1 << 160) - 1;\\n\\n    // The type hash for limit orders, which is:\\n    // keccak256(abi.encodePacked(\\n    //     \\\"LimitOrder(\\\",\\n    //       \\\"address makerToken,\\\",\\n    //       \\\"address takerToken,\\\",\\n    //       \\\"uint128 makerAmount,\\\",\\n    //       \\\"uint128 takerAmount,\\\",\\n    //       \\\"uint128 takerTokenFeeAmount,\\\",\\n    //       \\\"address maker,\\\",\\n    //       \\\"address taker,\\\",\\n    //       \\\"address sender,\\\",\\n    //       \\\"address feeRecipient,\\\",\\n    //       \\\"bytes32 pool,\\\",\\n    //       \\\"uint64 expiry,\\\",\\n    //       \\\"uint256 salt\\\"\\n    //     \\\")\\\"\\n    // ))\\n    uint256 private constant _LIMIT_ORDER_TYPEHASH =\\n        0xce918627cb55462ddbb85e73de69a8b322f2bc88f4507c52fcad6d4c33c29d49;\\n\\n    // The type hash for RFQ orders, which is:\\n    // keccak256(abi.encodePacked(\\n    //     \\\"RfqOrder(\\\",\\n    //       \\\"address makerToken,\\\",\\n    //       \\\"address takerToken,\\\",\\n    //       \\\"uint128 makerAmount,\\\",\\n    //       \\\"uint128 takerAmount,\\\",\\n    //       \\\"address maker,\\\",\\n    //       \\\"address taker,\\\",\\n    //       \\\"address txOrigin,\\\",\\n    //       \\\"bytes32 pool,\\\",\\n    //       \\\"uint64 expiry,\\\",\\n    //       \\\"uint256 salt\\\"\\n    //     \\\")\\\"\\n    // ))\\n    uint256 private constant _RFQ_ORDER_TYPEHASH =\\n        0xe593d3fdfa8b60e5e17a1b2204662ecbe15c23f2084b9ad5bae40359540a7da9;\\n\\n    // The type hash for OTC orders, which is:\\n    // keccak256(abi.encodePacked(\\n    //     \\\"OtcOrder(\\\",\\n    //       \\\"address makerToken,\\\",\\n    //       \\\"address takerToken,\\\",\\n    //       \\\"uint128 makerAmount,\\\",\\n    //       \\\"uint128 takerAmount,\\\",\\n    //       \\\"address maker,\\\",\\n    //       \\\"address taker,\\\",\\n    //       \\\"address txOrigin,\\\",\\n    //       \\\"uint256 expiryAndNonce\\\"\\n    //     \\\")\\\"\\n    // ))\\n    uint256 private constant _OTC_ORDER_TYPEHASH =\\n        0x2f754524de756ae72459efbe1ec88c19a745639821de528ac3fb88f9e65e35c8;\\n\\n    /// @dev Get the struct hash of a limit order.\\n    /// @param order The limit order.\\n    /// @return structHash The struct hash of the order.\\n    function getLimitOrderStructHash(LimitOrder memory order)\\n        internal\\n        pure\\n        returns (bytes32 structHash)\\n    {\\n        // The struct hash is:\\n        // keccak256(abi.encode(\\n        //   TYPE_HASH,\\n        //   order.makerToken,\\n        //   order.takerToken,\\n        //   order.makerAmount,\\n        //   order.takerAmount,\\n        //   order.takerTokenFeeAmount,\\n        //   order.maker,\\n        //   order.taker,\\n        //   order.sender,\\n        //   order.feeRecipient,\\n        //   order.pool,\\n        //   order.expiry,\\n        //   order.salt,\\n        // ))\\n        assembly {\\n            let mem := mload(0x40)\\n            mstore(mem, _LIMIT_ORDER_TYPEHASH)\\n            // order.makerToken;\\n            mstore(add(mem, 0x20), and(ADDRESS_MASK, mload(order)))\\n            // order.takerToken;\\n            mstore(add(mem, 0x40), and(ADDRESS_MASK, mload(add(order, 0x20))))\\n            // order.makerAmount;\\n            mstore(add(mem, 0x60), and(UINT_128_MASK, mload(add(order, 0x40))))\\n            // order.takerAmount;\\n            mstore(add(mem, 0x80), and(UINT_128_MASK, mload(add(order, 0x60))))\\n            // order.takerTokenFeeAmount;\\n            mstore(add(mem, 0xA0), and(UINT_128_MASK, mload(add(order, 0x80))))\\n            // order.maker;\\n            mstore(add(mem, 0xC0), and(ADDRESS_MASK, mload(add(order, 0xA0))))\\n            // order.taker;\\n            mstore(add(mem, 0xE0), and(ADDRESS_MASK, mload(add(order, 0xC0))))\\n            // order.sender;\\n            mstore(add(mem, 0x100), and(ADDRESS_MASK, mload(add(order, 0xE0))))\\n            // order.feeRecipient;\\n            mstore(add(mem, 0x120), and(ADDRESS_MASK, mload(add(order, 0x100))))\\n            // order.pool;\\n            mstore(add(mem, 0x140), mload(add(order, 0x120)))\\n            // order.expiry;\\n            mstore(add(mem, 0x160), and(UINT_64_MASK, mload(add(order, 0x140))))\\n            // order.salt;\\n            mstore(add(mem, 0x180), mload(add(order, 0x160)))\\n            structHash := keccak256(mem, 0x1A0)\\n        }\\n    }\\n\\n    /// @dev Get the struct hash of a RFQ order.\\n    /// @param order The RFQ order.\\n    /// @return structHash The struct hash of the order.\\n    function getRfqOrderStructHash(RfqOrder memory order)\\n        internal\\n        pure\\n        returns (bytes32 structHash)\\n    {\\n        // The struct hash is:\\n        // keccak256(abi.encode(\\n        //   TYPE_HASH,\\n        //   order.makerToken,\\n        //   order.takerToken,\\n        //   order.makerAmount,\\n        //   order.takerAmount,\\n        //   order.maker,\\n        //   order.taker,\\n        //   order.txOrigin,\\n        //   order.pool,\\n        //   order.expiry,\\n        //   order.salt,\\n        // ))\\n        assembly {\\n            let mem := mload(0x40)\\n            mstore(mem, _RFQ_ORDER_TYPEHASH)\\n            // order.makerToken;\\n            mstore(add(mem, 0x20), and(ADDRESS_MASK, mload(order)))\\n            // order.takerToken;\\n            mstore(add(mem, 0x40), and(ADDRESS_MASK, mload(add(order, 0x20))))\\n            // order.makerAmount;\\n            mstore(add(mem, 0x60), and(UINT_128_MASK, mload(add(order, 0x40))))\\n            // order.takerAmount;\\n            mstore(add(mem, 0x80), and(UINT_128_MASK, mload(add(order, 0x60))))\\n            // order.maker;\\n            mstore(add(mem, 0xA0), and(ADDRESS_MASK, mload(add(order, 0x80))))\\n            // order.taker;\\n            mstore(add(mem, 0xC0), and(ADDRESS_MASK, mload(add(order, 0xA0))))\\n            // order.txOrigin;\\n            mstore(add(mem, 0xE0), and(ADDRESS_MASK, mload(add(order, 0xC0))))\\n            // order.pool;\\n            mstore(add(mem, 0x100), mload(add(order, 0xE0)))\\n            // order.expiry;\\n            mstore(add(mem, 0x120), and(UINT_64_MASK, mload(add(order, 0x100))))\\n            // order.salt;\\n            mstore(add(mem, 0x140), mload(add(order, 0x120)))\\n            structHash := keccak256(mem, 0x160)\\n        }\\n    }\\n\\n    /// @dev Get the struct hash of an OTC order.\\n    /// @param order The OTC order.\\n    /// @return structHash The struct hash of the order.\\n    function getOtcOrderStructHash(OtcOrder memory order)\\n        internal\\n        pure\\n        returns (bytes32 structHash)\\n    {\\n        // The struct hash is:\\n        // keccak256(abi.encode(\\n        //   TYPE_HASH,\\n        //   order.makerToken,\\n        //   order.takerToken,\\n        //   order.makerAmount,\\n        //   order.takerAmount,\\n        //   order.maker,\\n        //   order.taker,\\n        //   order.txOrigin,\\n        //   order.expiryAndNonce,\\n        // ))\\n        assembly {\\n            let mem := mload(0x40)\\n            mstore(mem, _OTC_ORDER_TYPEHASH)\\n            // order.makerToken;\\n            mstore(add(mem, 0x20), and(ADDRESS_MASK, mload(order)))\\n            // order.takerToken;\\n            mstore(add(mem, 0x40), and(ADDRESS_MASK, mload(add(order, 0x20))))\\n            // order.makerAmount;\\n            mstore(add(mem, 0x60), and(UINT_128_MASK, mload(add(order, 0x40))))\\n            // order.takerAmount;\\n            mstore(add(mem, 0x80), and(UINT_128_MASK, mload(add(order, 0x60))))\\n            // order.maker;\\n            mstore(add(mem, 0xA0), and(ADDRESS_MASK, mload(add(order, 0x80))))\\n            // order.taker;\\n            mstore(add(mem, 0xC0), and(ADDRESS_MASK, mload(add(order, 0xA0))))\\n            // order.txOrigin;\\n            mstore(add(mem, 0xE0), and(ADDRESS_MASK, mload(add(order, 0xC0))))\\n            // order.expiryAndNonce;\\n            mstore(add(mem, 0x100), mload(add(order, 0xE0)))\\n            structHash := keccak256(mem, 0x120)\\n        }\\n    }\\n\\n    /// @dev Refund any leftover protocol fees in `msg.value` to `msg.sender`.\\n    /// @param ethProtocolFeePaid How much ETH was paid in protocol fees.\\n    function refundExcessProtocolFeeToSender(uint256 ethProtocolFeePaid)\\n        internal\\n    {\\n        if (msg.value > ethProtocolFeePaid && msg.sender != address(this)) {\\n            uint256 refundAmount = msg.value.safeSub(ethProtocolFeePaid);\\n            (bool success,) = msg\\n                .sender\\n                .call{value: refundAmount}(\\\"\\\");\\n            if (!success) {\\n                LibNativeOrdersRichErrors.ProtocolFeeRefundFailed(\\n                    msg.sender,\\n                    refundAmount\\n                ).rrevert();\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xea904ff56831e55dc145f7d6aab68e61238a78642923f9f86b47b509f94cdfa3\",\"license\":\"Apache-2.0\"},\"src/zero-ex/features/libs/LibSignature.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../../contracts-utils/v06/errors/LibRichErrorsV06.sol\\\";\\nimport \\\"../../errors/LibSignatureRichErrors.sol\\\";\\n\\n\\n/// @dev A library for validating signatures.\\nlibrary LibSignature {\\n    using LibRichErrorsV06 for bytes;\\n\\n    // '\\\\x19Ethereum Signed Message:\\\\n32\\\\x00\\\\x00\\\\x00\\\\x00' in a word.\\n    uint256 private constant ETH_SIGN_HASH_PREFIX =\\n        0x19457468657265756d205369676e6564204d6573736167653a0a333200000000;\\n    /// @dev Exclusive upper limit on ECDSA signatures 'R' values.\\n    ///      The valid range is given by fig (282) of the yellow paper.\\n    uint256 private constant ECDSA_SIGNATURE_R_LIMIT =\\n        uint256(0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141);\\n    /// @dev Exclusive upper limit on ECDSA signatures 'S' values.\\n    ///      The valid range is given by fig (283) of the yellow paper.\\n    uint256 private constant ECDSA_SIGNATURE_S_LIMIT = ECDSA_SIGNATURE_R_LIMIT / 2 + 1;\\n\\n    /// @dev Allowed signature types.\\n    enum SignatureType {\\n        ILLEGAL,\\n        INVALID,\\n        EIP712,\\n        ETHSIGN,\\n        PRESIGNED\\n    }\\n\\n    /// @dev Encoded EC signature.\\n    struct Signature {\\n        // How to validate the signature.\\n        SignatureType signatureType;\\n        // EC Signature data.\\n        uint8 v;\\n        // EC Signature data.\\n        bytes32 r;\\n        // EC Signature data.\\n        bytes32 s;\\n    }\\n\\n    /// @dev Retrieve the signer of a signature.\\n    ///      Throws if the signature can't be validated.\\n    /// @param hash The hash that was signed.\\n    /// @param signature The signature.\\n    /// @return recovered The recovered signer address.\\n    function getSignerOfHash(\\n        bytes32 hash,\\n        Signature memory signature\\n    )\\n        internal\\n        pure\\n        returns (address recovered)\\n    {\\n        // Ensure this is a signature type that can be validated against a hash.\\n        _validateHashCompatibleSignature(hash, signature);\\n\\n        if (signature.signatureType == SignatureType.EIP712) {\\n            // Signed using EIP712\\n            recovered = ecrecover(\\n                hash,\\n                signature.v,\\n                signature.r,\\n                signature.s\\n            );\\n        } else if (signature.signatureType == SignatureType.ETHSIGN) {\\n            // Signed using `eth_sign`\\n            // Need to hash `hash` with \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\" prefix\\n            // in packed encoding.\\n            bytes32 ethSignHash;\\n            assembly {\\n                // Use scratch space\\n                mstore(0, ETH_SIGN_HASH_PREFIX) // length of 28 bytes\\n                mstore(28, hash) // length of 32 bytes\\n                ethSignHash := keccak256(0, 60)\\n            }\\n            recovered = ecrecover(\\n                ethSignHash,\\n                signature.v,\\n                signature.r,\\n                signature.s\\n            );\\n        }\\n        // `recovered` can be null if the signature values are out of range.\\n        if (recovered == address(0)) {\\n            LibSignatureRichErrors.SignatureValidationError(\\n                LibSignatureRichErrors.SignatureValidationErrorCodes.BAD_SIGNATURE_DATA,\\n                hash\\n            ).rrevert();\\n        }\\n    }\\n\\n    /// @dev Validates that a signature is compatible with a hash signee.\\n    /// @param hash The hash that was signed.\\n    /// @param signature The signature.\\n    function _validateHashCompatibleSignature(\\n        bytes32 hash,\\n        Signature memory signature\\n    )\\n        private\\n        pure\\n    {\\n        // Ensure the r and s are within malleability limits.\\n        if (uint256(signature.r) >= ECDSA_SIGNATURE_R_LIMIT ||\\n            uint256(signature.s) >= ECDSA_SIGNATURE_S_LIMIT)\\n        {\\n            LibSignatureRichErrors.SignatureValidationError(\\n                LibSignatureRichErrors.SignatureValidationErrorCodes.BAD_SIGNATURE_DATA,\\n                hash\\n            ).rrevert();\\n        }\\n\\n        // Always illegal signature.\\n        if (signature.signatureType == SignatureType.ILLEGAL) {\\n            LibSignatureRichErrors.SignatureValidationError(\\n                LibSignatureRichErrors.SignatureValidationErrorCodes.ILLEGAL,\\n                hash\\n            ).rrevert();\\n        }\\n\\n        // Always invalid.\\n        if (signature.signatureType == SignatureType.INVALID) {\\n            LibSignatureRichErrors.SignatureValidationError(\\n                LibSignatureRichErrors.SignatureValidationErrorCodes.ALWAYS_INVALID,\\n                hash\\n            ).rrevert();\\n        }\\n\\n        // If a feature supports pre-signing, it wouldn't use \\n        // `getSignerOfHash` on a pre-signed order.\\n        if (signature.signatureType == SignatureType.PRESIGNED) {\\n            LibSignatureRichErrors.SignatureValidationError(\\n                LibSignatureRichErrors.SignatureValidationErrorCodes.UNSUPPORTED,\\n                hash\\n            ).rrevert();\\n        }\\n\\n        // Solidity should check that the signature type is within enum range for us\\n        // when abi-decoding.\\n    }\\n}\\n\",\"keccak256\":\"0xe7a20ddd3288eb8a1f90a3648bef7cba0d68d9035bd4b2e2af22c57bfca2f3db\",\"license\":\"Apache-2.0\"},\"src/zero-ex/fixins/FixinCommon.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../contracts-utils/v06/errors/LibRichErrorsV06.sol\\\";\\nimport \\\"../errors/LibCommonRichErrors.sol\\\";\\nimport \\\"../errors/LibOwnableRichErrors.sol\\\";\\nimport \\\"../features/interfaces/IOwnableFeature.sol\\\";\\nimport \\\"../features/interfaces/ISimpleFunctionRegistryFeature.sol\\\";\\n\\n\\n/// @dev Common feature utilities.\\nabstract contract FixinCommon {\\n\\n    using LibRichErrorsV06 for bytes;\\n\\n    /// @dev The implementation address of this feature.\\n    address internal immutable _implementation;\\n\\n    /// @dev The caller must be this contract.\\n    modifier onlySelf() virtual {\\n        if (msg.sender != address(this)) {\\n            LibCommonRichErrors.OnlyCallableBySelfError(msg.sender).rrevert();\\n        }\\n        _;\\n    }\\n\\n    /// @dev The caller of this function must be the owner.\\n    modifier onlyOwner() virtual {\\n        {\\n            address owner = IOwnableFeature(address(this)).owner();\\n            if (msg.sender != owner) {\\n                LibOwnableRichErrors.OnlyOwnerError(\\n                    msg.sender,\\n                    owner\\n                ).rrevert();\\n            }\\n        }\\n        _;\\n    }\\n\\n    constructor() internal {\\n        // Remember this feature's original address.\\n        _implementation = address(this);\\n    }\\n\\n    /// @dev Registers a function implemented by this feature at `_implementation`.\\n    ///      Can and should only be called within a `migrate()`.\\n    /// @param selector The selector of the function whose implementation\\n    ///        is at `_implementation`.\\n    function _registerFeatureFunction(bytes4 selector)\\n        internal\\n    {\\n        ISimpleFunctionRegistryFeature(address(this)).extend(selector, _implementation);\\n    }\\n\\n    /// @dev Encode a feature version as a `uint256`.\\n    /// @param major The major version number of the feature.\\n    /// @param minor The minor version number of the feature.\\n    /// @param revision The revision number of the feature.\\n    /// @return encodedVersion The encoded version number.\\n    function _encodeVersion(uint32 major, uint32 minor, uint32 revision)\\n        internal\\n        pure\\n        returns (uint256 encodedVersion)\\n    {\\n        return (uint256(major) << 64) | (uint256(minor) << 32) | uint256(revision);\\n    }\\n}\\n\",\"keccak256\":\"0x6cb9e8ef2d64d51b23c26ed62b07d2256e8ae14a5df59181b28698c03371f0f1\",\"license\":\"Apache-2.0\"},\"src/zero-ex/fixins/FixinEIP712.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../contracts-utils/v06/errors/LibRichErrorsV06.sol\\\";\\nimport \\\"../errors/LibCommonRichErrors.sol\\\";\\nimport \\\"../errors/LibOwnableRichErrors.sol\\\";\\n\\n\\n/// @dev EIP712 helpers for features.\\nabstract contract FixinEIP712 {\\n\\n    /// @dev The domain hash separator for the entire exchange proxy.\\n    bytes32 public immutable EIP712_DOMAIN_SEPARATOR;\\n\\n    constructor(address zeroExAddress) internal {\\n        // Compute `EIP712_DOMAIN_SEPARATOR`\\n        {\\n            uint256 chainId;\\n            assembly { chainId := chainid() }\\n            EIP712_DOMAIN_SEPARATOR = keccak256(\\n                abi.encode(\\n                    keccak256(\\n                        \\\"EIP712Domain(\\\"\\n                            \\\"string name,\\\"\\n                            \\\"string version,\\\"\\n                            \\\"uint256 chainId,\\\"\\n                            \\\"address verifyingContract\\\"\\n                        \\\")\\\"\\n                    ),\\n                    keccak256(\\\"ZeroEx\\\"),\\n                    keccak256(\\\"1.0.0\\\"),\\n                    chainId,\\n                    zeroExAddress\\n                )\\n            );\\n        }\\n    }\\n\\n    function _getEIP712Hash(bytes32 structHash)\\n        internal\\n        view\\n        returns (bytes32 eip712Hash)\\n    {\\n        return keccak256(abi.encodePacked(\\n            hex\\\"1901\\\",\\n            EIP712_DOMAIN_SEPARATOR,\\n            structHash\\n        ));\\n    }\\n}\\n\",\"keccak256\":\"0x8746a75070bdce09d1047f14819ce04cbe93d69200517f2e6cb368ae567f26b2\",\"license\":\"Apache-2.0\"},\"src/zero-ex/fixins/FixinReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../contracts-utils/v06/LibBytesV06.sol\\\";\\nimport \\\"../../contracts-utils/v06/errors/LibRichErrorsV06.sol\\\";\\nimport \\\"../errors/LibCommonRichErrors.sol\\\";\\nimport \\\"../storage/LibReentrancyGuardStorage.sol\\\";\\n\\n\\n/// @dev Common feature utilities.\\nabstract contract FixinReentrancyGuard {\\n\\n    using LibRichErrorsV06 for bytes;\\n    using LibBytesV06 for bytes;\\n\\n    // Combinable reentrancy flags.\\n    /// @dev Reentrancy guard flag for meta-transaction functions.\\n    uint256 constant internal REENTRANCY_MTX = 0x1;\\n\\n    /// @dev Cannot reenter a function with the same reentrancy guard flags.\\n    modifier nonReentrant(uint256 reentrancyFlags) virtual {\\n        LibReentrancyGuardStorage.Storage storage stor =\\n            LibReentrancyGuardStorage.getStorage();\\n        {\\n            uint256 currentFlags = stor.reentrancyFlags;\\n            // Revert if any bits in `reentrancyFlags` has already been set.\\n            if ((currentFlags & reentrancyFlags) != 0) {\\n                LibCommonRichErrors.IllegalReentrancyError(\\n                    msg.data.readBytes4(0),\\n                    reentrancyFlags\\n                ).rrevert();\\n            }\\n            // Update reentrancy flags.\\n            stor.reentrancyFlags = currentFlags | reentrancyFlags;\\n        }\\n\\n        _;\\n\\n        // Clear reentrancy flags.\\n        stor.reentrancyFlags = stor.reentrancyFlags & (~reentrancyFlags);\\n    }\\n}\\n\",\"keccak256\":\"0xb76837e523e4eed43fac6cc1d17b60d2ff11956a0586652a33fd1cb4ce76190f\",\"license\":\"Apache-2.0\"},\"src/zero-ex/fixins/FixinTokenSpender.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../contracts-erc20/v06/IERC20TokenV06.sol\\\";\\nimport \\\"../../contracts-utils/v06/LibSafeMathV06.sol\\\";\\n\\n\\n/// @dev Helpers for moving tokens around.\\nabstract contract FixinTokenSpender {\\n\\n    // Mask of the lower 20 bytes of a bytes32.\\n    uint256 constant private ADDRESS_MASK = 0x000000000000000000000000ffffffffffffffffffffffffffffffffffffffff;\\n\\n    /// @dev Transfers ERC20 tokens from `owner` to `to`.\\n    /// @param token The token to spend.\\n    /// @param owner The owner of the tokens.\\n    /// @param to The recipient of the tokens.\\n    /// @param amount The amount of `token` to transfer.\\n    function _transferERC20TokensFrom(\\n        IERC20TokenV06 token,\\n        address owner,\\n        address to,\\n        uint256 amount\\n    )\\n        internal\\n    {\\n        require(address(token) != address(this), \\\"FixinTokenSpender/CANNOT_INVOKE_SELF\\\");\\n\\n        assembly {\\n            let ptr := mload(0x40) // free memory pointer\\n\\n            // selector for transferFrom(address,address,uint256)\\n            mstore(ptr, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(ptr, 0x04), and(owner, ADDRESS_MASK))\\n            mstore(add(ptr, 0x24), and(to, ADDRESS_MASK))\\n            mstore(add(ptr, 0x44), amount)\\n\\n            let success := call(\\n                gas(),\\n                and(token, ADDRESS_MASK),\\n                0,\\n                ptr,\\n                0x64,\\n                ptr,\\n                32\\n            )\\n\\n            let rdsize := returndatasize()\\n\\n            // Check for ERC20 success. ERC20 tokens should return a boolean,\\n            // but some don't. We accept 0-length return data as success, or at\\n            // least 32 bytes that starts with a 32-byte boolean true.\\n            success := and(\\n                success,                             // call itself succeeded\\n                or(\\n                    iszero(rdsize),                  // no return data, or\\n                    and(\\n                        iszero(lt(rdsize, 32)),      // at least 32 bytes\\n                        eq(mload(ptr), 1)            // starts with uint256(1)\\n                    )\\n                )\\n            )\\n\\n            if iszero(success) {\\n                returndatacopy(ptr, 0, rdsize)\\n                revert(ptr, rdsize)\\n            }\\n        }\\n    }\\n\\n    /// @dev Transfers ERC20 tokens from ourselves to `to`.\\n    /// @param token The token to spend.\\n    /// @param to The recipient of the tokens.\\n    /// @param amount The amount of `token` to transfer.\\n    function _transferERC20Tokens(\\n        IERC20TokenV06 token,\\n        address to,\\n        uint256 amount\\n    )\\n        internal\\n    {\\n        require(address(token) != address(this), \\\"FixinTokenSpender/CANNOT_INVOKE_SELF\\\");\\n\\n        assembly {\\n            let ptr := mload(0x40) // free memory pointer\\n\\n            // selector for transfer(address,uint256)\\n            mstore(ptr, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(ptr, 0x04), and(to, ADDRESS_MASK))\\n            mstore(add(ptr, 0x24), amount)\\n\\n            let success := call(\\n                gas(),\\n                and(token, ADDRESS_MASK),\\n                0,\\n                ptr,\\n                0x44,\\n                ptr,\\n                32\\n            )\\n\\n            let rdsize := returndatasize()\\n\\n            // Check for ERC20 success. ERC20 tokens should return a boolean,\\n            // but some don't. We accept 0-length return data as success, or at\\n            // least 32 bytes that starts with a 32-byte boolean true.\\n            success := and(\\n                success,                             // call itself succeeded\\n                or(\\n                    iszero(rdsize),                  // no return data, or\\n                    and(\\n                        iszero(lt(rdsize, 32)),      // at least 32 bytes\\n                        eq(mload(ptr), 1)            // starts with uint256(1)\\n                    )\\n                )\\n            )\\n\\n            if iszero(success) {\\n                returndatacopy(ptr, 0, rdsize)\\n                revert(ptr, rdsize)\\n            }\\n        }\\n    }\\n\\n\\n    /// @dev Transfers some amount of ETH to the given recipient and\\n    ///      reverts if the transfer fails.\\n    /// @param recipient The recipient of the ETH.\\n    /// @param amount The amount of ETH to transfer.\\n    function _transferEth(address payable recipient, uint256 amount)\\n        internal\\n    {\\n        if (amount > 0) {\\n            (bool success,) = recipient.call{value: amount}(\\\"\\\");\\n            require(success, \\\"FixinTokenSpender::_transferEth/TRANSFER_FAILED\\\");\\n        }\\n    }\\n\\n    /// @dev Gets the maximum amount of an ERC20 token `token` that can be\\n    ///      pulled from `owner` by this address.\\n    /// @param token The token to spend.\\n    /// @param owner The owner of the tokens.\\n    /// @return amount The amount of tokens that can be pulled.\\n    function _getSpendableERC20BalanceOf(\\n        IERC20TokenV06 token,\\n        address owner\\n    )\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return LibSafeMathV06.min256(\\n            token.allowance(owner, address(this)),\\n            token.balanceOf(owner)\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x5d8ff9a63fe01980c589049080c80286a1f79e489edc5a1e2e6b5f406cd9e944\",\"license\":\"Apache-2.0\"},\"src/zero-ex/migrations/LibMigrate.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../contracts-utils/v06/errors/LibRichErrorsV06.sol\\\";\\nimport \\\"../errors/LibOwnableRichErrors.sol\\\";\\n\\n\\nlibrary LibMigrate {\\n\\n    /// @dev Magic bytes returned by a migrator to indicate success.\\n    ///      This is `keccack('MIGRATE_SUCCESS')`.\\n    bytes4 internal constant MIGRATE_SUCCESS = 0x2c64c5ef;\\n\\n    using LibRichErrorsV06 for bytes;\\n\\n    /// @dev Perform a delegatecall and ensure it returns the magic bytes.\\n    /// @param target The call target.\\n    /// @param data The call data.\\n    function delegatecallMigrateFunction(\\n        address target,\\n        bytes memory data\\n    )\\n        internal\\n    {\\n        (bool success, bytes memory resultData) = target.delegatecall(data);\\n        if (!success ||\\n            resultData.length != 32 ||\\n            abi.decode(resultData, (bytes4)) != MIGRATE_SUCCESS)\\n        {\\n            LibOwnableRichErrors.MigrateCallFailedError(target, resultData).rrevert();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb288d8528801eb00eb8e0645919aaa77be21ed47bdce6675a7874aaa8f8b9f73\",\"license\":\"Apache-2.0\"},\"src/zero-ex/storage/LibMetaTransactionsStorage.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./LibStorage.sol\\\";\\n\\n\\n/// @dev Storage helpers for the `MetaTransactions` feature.\\nlibrary LibMetaTransactionsStorage {\\n\\n    /// @dev Storage bucket for this feature.\\n    struct Storage {\\n        // The block number when a hash was executed.\\n        mapping (bytes32 => uint256) mtxHashToExecutedBlockNumber;\\n    }\\n\\n    /// @dev Get the storage bucket for this contract.\\n    function getStorage() internal pure returns (Storage storage stor) {\\n        uint256 storageSlot = LibStorage.getStorageSlot(\\n            LibStorage.StorageId.MetaTransactions\\n        );\\n        // Dip into assembly to change the slot pointed to by the local\\n        // variable `stor`.\\n        // See https://solidity.readthedocs.io/en/v0.6.8/assembly.html?highlight=slot#access-to-external-variables-functions-and-libraries\\n        assembly { stor_slot := storageSlot }\\n    }\\n}\\n\",\"keccak256\":\"0x2efdc5d584d54238cc3a3e553534c1617c433c0c6d3c42e0048aae116b2f7213\",\"license\":\"Apache-2.0\"},\"src/zero-ex/storage/LibReentrancyGuardStorage.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./LibStorage.sol\\\";\\nimport \\\"../external/IFlashWallet.sol\\\";\\n\\n\\n/// @dev Storage helpers for the `FixinReentrancyGuard` mixin.\\nlibrary LibReentrancyGuardStorage {\\n\\n    /// @dev Storage bucket for this feature.\\n    struct Storage {\\n        // Reentrancy flags set whenever a non-reentrant function is entered\\n        // and cleared when it is exited.\\n        uint256 reentrancyFlags;\\n    }\\n\\n    /// @dev Get the storage bucket for this contract.\\n    function getStorage() internal pure returns (Storage storage stor) {\\n        uint256 storageSlot = LibStorage.getStorageSlot(\\n            LibStorage.StorageId.ReentrancyGuard\\n        );\\n        // Dip into assembly to change the slot pointed to by the local\\n        // variable `stor`.\\n        // See https://solidity.readthedocs.io/en/v0.6.8/assembly.html?highlight=slot#access-to-external-variables-functions-and-libraries\\n        assembly { stor_slot := storageSlot }\\n    }\\n}\\n\",\"keccak256\":\"0xd71325302728c1e0224ea9918cf84b2ecb45cc55a308deb492e6001e2d7c3644\",\"license\":\"Apache-2.0\"},\"src/zero-ex/storage/LibStorage.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6;\\npragma experimental ABIEncoderV2;\\n\\n\\n/// @dev Common storage helpers\\nlibrary LibStorage {\\n\\n    /// @dev What to bit-shift a storage ID by to get its slot.\\n    ///      This gives us a maximum of 2**128 inline fields in each bucket.\\n    uint256 private constant STORAGE_SLOT_EXP = 128;\\n\\n    /// @dev Storage IDs for feature storage buckets.\\n    ///      WARNING: APPEND-ONLY.\\n    enum StorageId {\\n        Proxy,\\n        SimpleFunctionRegistry,\\n        Ownable,\\n        TokenSpender,\\n        TransformERC20,\\n        MetaTransactions,\\n        ReentrancyGuard,\\n        NativeOrders,\\n        OtcOrders,\\n        ERC721Orders,\\n        ERC1155Orders\\n    }\\n\\n    /// @dev Get the storage slot given a storage ID. We assign unique, well-spaced\\n    ///     slots to storage bucket variables to ensure they do not overlap.\\n    ///     See: https://solidity.readthedocs.io/en/v0.6.6/assembly.html#access-to-external-variables-functions-and-libraries\\n    /// @param storageId An entry in `StorageId`\\n    /// @return slot The storage slot.\\n    function getStorageSlot(StorageId storageId)\\n        internal\\n        pure\\n        returns (uint256 slot)\\n    {\\n        // This should never overflow with a reasonable `STORAGE_SLOT_EXP`\\n        // because Solidity will do a range check on `storageId` during the cast.\\n        return (uint256(storageId) + 1) << STORAGE_SLOT_EXP;\\n    }\\n}\\n\",\"keccak256\":\"0x5a61030137df3fb640d208bd143d601e6ea718f21f552121b37df3dad043bcbb\",\"license\":\"Apache-2.0\"},\"src/zero-ex/transformers/IERC20Transformer.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../contracts-erc20/v06/IERC20TokenV06.sol\\\";\\n\\n\\n/// @dev A transformation callback used in `TransformERC20.transformERC20()`.\\ninterface IERC20Transformer {\\n\\n    /// @dev Context information to pass into `transform()` by `TransformERC20.transformERC20()`.\\n    struct TransformContext {\\n        // The caller of `TransformERC20.transformERC20()`.\\n        address payable sender;\\n        // The recipient address, which may be distinct from `sender` e.g. in\\n        // meta-transactions.\\n        address payable recipient;\\n        // Arbitrary data to pass to the transformer.\\n        bytes data;\\n    }\\n\\n    /// @dev Called from `TransformERC20.transformERC20()`. This will be\\n    ///      delegatecalled in the context of the FlashWallet instance being used.\\n    /// @param context Context information.\\n    /// @return success The success bytes (`LibERC20Transformer.TRANSFORMER_SUCCESS`).\\n    function transform(TransformContext calldata context)\\n        external\\n        returns (bytes4 success);\\n}\\n\",\"keccak256\":\"0xbd47484b12b46605e510975fbddefc78be3b2b31ca7e767c6ed5784ed17658de\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x61010060405262000014600160028162000116565b60c0527fe866282978e74dc892efa3621df30a058ca4d374a338824c0b89f1dfdcb0ea0460e0523480156200004857600080fd5b5060405162002e0238038062002e028339810160408190526200006b9162000148565b3060601b60805260405181904690620000f1907f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f907f9e5dae0addaf20578aeb5d70341d092b53b4e14480ac5726438fd436df7ba427907f06c015bd22b4c69690933c1058878ebdfef31f9aaae40bbe86d8a09fe1b2972c908590879060200162000178565b60408051601f19818403018152919052805160209091012060a05250620001a4915050565b6bffffffff0000000000000000604084901b1667ffffffff00000000602084901b161763ffffffff8216179392505050565b6000602082840312156200015a578081fd5b81516001600160a01b038116811462000171578182fd5b9392505050565b9485526020850193909352604084019190915260608301526001600160a01b0316608082015260a00190565b60805160601c60a05160c05160e051612c1b620001e7600039806104ac52806106bb5250806101e45250806106df5280610ae7525080610a865250612c1b6000f3fe6080604052600436106100b15760003560e01c80638fd3ab8011610069578063c5579ec81161004e578063c5579ec814610198578063d036092d146101b8578063dab400f3146101cd576100b1565b80638fd3ab8014610156578063ae55049714610178576100b1565b80633fb2da381161009a5780633fb2da38146101015780636ae4b4f71461012157806372d17d0314610136576100b1565b8063031b905c146100b65780633d61ed3e146100e1575b600080fd5b3480156100c257600080fd5b506100cb6101e2565b6040516100d8919061250d565b60405180910390f35b6100f46100ef3660046121d2565b610206565b6040516100d89190612707565b34801561010d57600080fd5b506100cb61011c366004612197565b610347565b34801561012d57600080fd5b506100f461035d565b34801561014257600080fd5b506100cb610151366004611f67565b610396565b34801561016257600080fd5b5061016b6103b1565b6040516100d89190612660565b34801561018457600080fd5b506100cb610193366004612197565b6104a5565b6101ab6101a6366004611eb6565b61053b565b6040516100d8919061248f565b3480156101c457600080fd5b506100cb6106b9565b3480156101d957600080fd5b506100cb6106dd565b7f000000000000000000000000000000000000000000000000000000000000000081565b606060016000610214610701565b8054909150828116156102765761027661027161026b600080368080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092939250506107149050565b85610760565b61081b565b82178155344703610285611976565b33815260408101879052610298876104a5565b6020820152606081018690526102ad81610823565b94505060006102bc3447610a2b565b905080156102f357604051339082156108fc029083906000818181858888f193505050501580156102f1573d6000803e3d6000fd5b505b5047811115610337576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161032e9061279b565b60405180910390fd5b5080549119909116905592915050565b6000610355610151836104a5565b90505b919050565b6040518060400160405280601081526020017f4d6574615472616e73616374696f6e730000000000000000000000000000000081525081565b60006103a0610a43565b600092835260205250604090205490565b60006103dc7f3d61ed3e00000000000000000000000000000000000000000000000000000000610a50565b6104057fc5579ec800000000000000000000000000000000000000000000000000000000610a50565b61042e7f3fb2da3800000000000000000000000000000000000000000000000000000000610a50565b6104577f72d17d0300000000000000000000000000000000000000000000000000000000610a50565b6104807fae55049700000000000000000000000000000000000000000000000000000000610a50565b507f2c64c5ef0000000000000000000000000000000000000000000000000000000090565b60006103557f0000000000000000000000000000000000000000000000000000000000000000836000015184602001518560400151866060015187608001518860a001518960c00151805190602001208a60e001518b61010001518c61012001516040516020016105209b9a99989796959493929190612542565b60405160208183030381529060405280519060200120610ae3565b606060016000610549610701565b8054909150828116156105a0576105a061027161026b600080368080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092939250506107149050565b821781558351855134470391146105c0576105c061027187518751610b35565b855167ffffffffffffffff811180156105d857600080fd5b5060405190808252806020026020018201604052801561060c57816020015b60608152602001906001900390816105f75790505b50935060005b86518110156106ac57610623611976565b338152875188908390811061063457fe5b6020026020010151816040018190525061066088838151811061065357fe5b60200260200101516104a5565b6020820152865187908390811061067357fe5b6020026020010151816060018190525061068c81610823565b86838151811061069857fe5b602090810291909101015250600101610612565b5060006102bc3447610a2b565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008061070e6006610b6b565b92915050565b60008160040183511015610735576107356102716003855185600401610b86565b5001602001517fffffffff000000000000000000000000000000000000000000000000000000001690565b60607fc7a7103e21e41a5c3158b3028d34cb9bb9593b10b1892f49d7187efa71219d4e83836040516024016107969291906126d5565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152905092915050565b805160208201fd5b606061082e82610c2b565b43610837610a43565b60208085015160009081529190526040908190209190915582015161012001511561087c576040820151610100810151815184516101209093015161087c9390610e0c565b604082015160c00151610890906000610714565b7fffffffff0000000000000000000000000000000000000000000000000000000016608083018190527f415565b00000000000000000000000000000000000000000000000000000000014156108f0576108e982610f0b565b90506109b3565b60808201517fffffffff00000000000000000000000000000000000000000000000000000000167ff6274f66000000000000000000000000000000000000000000000000000000001415610947576108e982611140565b60808201517fffffffff00000000000000000000000000000000000000000000000000000000167faa77476c00000000000000000000000000000000000000000000000000000000141561099e576108e982611264565b6109b3610271836020015184608001516112f7565b81608001517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167f7f4fe3ff8ae440e1570c558da08440b26f89fb1c1f2910cd91ca6452955f121a8360200151846040015160000151856040015160200151604051610a1e93929190612516565b60405180910390a2919050565b6000818310610a3a5781610a3c565b825b9392505050565b60008061070e6005610b6b565b6040517f6eb224cb0000000000000000000000000000000000000000000000000000000081523090636eb224cb90610aae9084907f00000000000000000000000000000000000000000000000000000000000000009060040161268d565b600060405180830381600087803b158015610ac857600080fd5b505af1158015610adc573d6000803e3d6000fd5b5050505050565b60007f000000000000000000000000000000000000000000000000000000000000000082604051602001610b18929190612459565b604051602081830303815290604052805190602001209050919050565b60607f52974c3a86e985173f72e2fb84ba2bfca8fb3b7c5031eb8077ebd59458abf2a48383604051602401610796929190612603565b6000608082600a811115610b7b57fe5b600101901b92915050565b6060632800659560e01b848484604051602401610ba59392919061271a565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915290509392505050565b60408101516020015173ffffffffffffffffffffffffffffffffffffffff1615801590610c905750806000015173ffffffffffffffffffffffffffffffffffffffff1681604001516020015173ffffffffffffffffffffffffffffffffffffffff1614155b15610cb357610cb36102718260200151836000015184604001516020015161132d565b4281604001516080015111610cdc57610cdc610271826020015142846040015160800151611365565b3a8160400151604001511180610cf957503a816040015160600151105b15610d2157610d2161027182602001513a84604001516040015185604001516060015161139d565b4760a08201819052604082015160e001511115610d5657610d5661027182602001518360a00151846040015160e0015161145e565b80604001516000015173ffffffffffffffffffffffffffffffffffffffff16610d8782602001518360600151611496565b73ffffffffffffffffffffffffffffffffffffffff1614610dcd57610dcd61027160048360200151846040015160000151604051806020016040528060008152506115e7565b610dd5610a43565b6020808301516000908152919052604090205460c0820181905215610e0957610e0961027182602001518360c00151611621565b50565b73ffffffffffffffffffffffffffffffffffffffff8416301415610e5c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161032e906127d0565b6040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416600482015273ffffffffffffffffffffffffffffffffffffffff83166024820152816044820152602081606483600073ffffffffffffffffffffffffffffffffffffffff8a165af13d60018351146020821015168115178216915081610f0257806000843e8083fd5b50505050505050565b6060610f156119bd565b604083015160c0015151606090601c0167ffffffffffffffff81118015610f3b57600080fd5b506040519080825280601f01601f191660200182016040528015610f66576020820181803683370190505b5090506060846040015160c00151905060a081511015610f8257fe5b602082810152805160248201906040840190610fc390829084907ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc01611657565b83806020019051810190610fd79190611f7f565b945050505050610a3c8360200151638aa6539b60e01b60405180610100016040528087604001516000015173ffffffffffffffffffffffffffffffffffffffff168152602001856000015173ffffffffffffffffffffffffffffffffffffffff168152602001856020015173ffffffffffffffffffffffffffffffffffffffff16815260200185604001518152602001856060015181526020018560800151815260200160001515815260200187604001516000015173ffffffffffffffffffffffffffffffffffffffff168152506040516024016110b69190612a3f565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909416939093179092529086015160e00151611738565b606061114a611a18565b611152611a7c565b60006060611167866040015160c001516117c4565b90508080602001905181019061117d9190612075565b60208901516040808b015151905194985092965090945061125a9290917f414e4ccf00000000000000000000000000000000000000000000000000000000916111d091899189918991339060240161282d565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909416939093179092529089015160e00151611738565b9695505050505050565b606061126e611aa5565b611276611a7c565b6000606061128b866040015160c001516117c4565b9050808060200190518101906112a1919061221f565b60208901516040808b015151905194985092965090945061125a9290917faa6b21cd00000000000000000000000000000000000000000000000000000000916111d091899189918991600090829060240161293e565b60607f547a32a328d8a78dbe9bf090fa60ba3d4d1c6833a592a2c942666ce3249c121083836040516024016107969291906125a8565b60607fa78002a166fcae5236d89e3ff35c53dadb775f7818de4a020714cba4bf360822848484604051602401610ba593929190612516565b60607fbea726efdf9868bbc5755dce9f13d585b3cf731177be75300d15bb8f5e286158848484604051602401610ba593929190612611565b60607f6fec11a99ebb0ff14b6648f609f57864dadeba8b29869c4df2b3b76894147849858585856040516024016113d79493929190612627565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091529050949350505050565b60607f0a5ade45208123132815e1591a1c7e64045fd006152f5e85d100aee42ba02c75848484604051602401610ba593929190612611565b60006114a28383611831565b6002825160048111156114b157fe5b141561151957600183836020015184604001518560600151604051600081526020016040526040516114e69493929190612642565b6020604051602081039080840390855afa158015611508573d6000803e3d6000fd5b5050506020604051035190506115be565b60038251600481111561152857fe5b14156115be5760007f19457468657265756d205369676e6564204d6573736167653a0a33320000000060005283601c52603c60002090506001818460200151856040015186606001516040516000815260200160405260405161158e9493929190612642565b6020604051602081039080840390855afa1580156115b0573d6000803e3d6000fd5b505050602060405103519150505b73ffffffffffffffffffffffffffffffffffffffff811661070e5761070e610271600585611908565b60607f4c7607a3ebba99c9acde0e2a04d88829f7001b63f028b796dda6ff02406ddad5858585856040516024016113d79493929190612758565b60607ffe251a07f3cbffd23c1c1db9ec776d259099c832333d99ef48cacfa93a4d7b328383604051602401610796929190612603565b602081101561169e578151835160208390036101000a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0180199092169116178352611733565b828214156116ab57611733565b828211156116e55760208103905080820181840181515b828510156116dd5784518652602095860195909401936116c2565b905250611733565b60208103905080820181840183515b8186121561172e57825182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe092830192909101906116f4565b855250505b505050565b606060003073ffffffffffffffffffffffffffffffffffffffff168385604051611762919061243d565b60006040518083038185875af1925050503d806000811461179f576040519150601f19603f3d011682016040523d82523d6000602084013e6117a4565b606091505b5092509050806117bc576117bc61027186868561193e565b509392505050565b6060600482510367ffffffffffffffff811180156117e157600080fd5b506040519080825280601f01601f19166020018201604052801561180c576020820181803683370190505b50905060008060248401915060208301905061182a81838551611657565b5050919050565b60408101517ffffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141111580611888575060608101517f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a111155b1561189b5761189b610271600584611908565b6000815160048111156118aa57fe5b14156118be576118be610271600384611908565b6001815160048111156118cd57fe5b14156118e1576118e1610271600084611908565b6004815160048111156118f057fe5b141561190457611904610271600284611908565b5050565b60607ff18f11f3027e735c758137924b262d4d3aff0037dcd785aca3c699fa05d960bd838360405160240161079692919061273c565b60607fa9f0c547643c02afed4cf2699e794bc383effca840eed62fddb64a15a4e55bc4848484604051602401610ba5939291906125d8565b6040805160e08101825260008082526020820152908101611995611af9565b81526020016119a2611a7c565b81526000602082018190526040820181905260609091015290565b6040518060a00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001606081525090565b6040805161018081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081018290526101208101829052610140810182905261016081019190915290565b604080516080810190915280600081526000602082018190526040820181905260609091015290565b6040805161014081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081019190915290565b604051806101400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600081526020016060815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b803561070e81612ba7565b805161070e81612ba7565b600082601f830112611bb4578081fd5b8135611bc7611bc282612b0a565b612ae3565b8181529150602080830190848101608080850287018301881015611bea57600080fd5b60005b85811015611c1157611bff8984611d2c565b85529383019391810191600101611bed565b50505050505092915050565b600082601f830112611c2d578081fd5b8135611c3b611bc282612b2a565b9150808252836020828501011115611c5257600080fd5b8060208401602084013760009082016020015292915050565b6000610140808385031215611c7e578182fd5b611c8781612ae3565b915050611c948383611b8e565b8152611ca38360208401611b8e565b602082015260408201356040820152606082013560608201526080820135608082015260a082013560a082015260c082013567ffffffffffffffff811115611cea57600080fd5b611cf684828501611c1d565b60c08301525060e082013560e0820152610100611d1584828501611b8e565b818301525061012080830135818301525092915050565b600060808284031215611d3d578081fd5b611d476080612ae3565b90508135611d5481612bc9565b81526020820135611d6481612bd6565b80602083015250604082013560408201526060820135606082015292915050565b600060808284031215611d96578081fd5b611da06080612ae3565b90508151611dad81612bc9565b81526020820151611dbd81612bd6565b80602083015250604082015160408201526060820151606082015292915050565b600060408284031215611def578081fd5b611df96040612ae3565b9050815163ffffffff81168114611e0f57600080fd5b8152602082015167ffffffffffffffff811115611e2b57600080fd5b8201601f81018413611e3c57600080fd5b8051611e4a611bc282612b2a565b818152856020838501011115611e5f57600080fd5b611e70826020830160208601612b77565b602084015250909392505050565b80516fffffffffffffffffffffffffffffffff8116811461070e57600080fd5b805167ffffffffffffffff8116811461070e57600080fd5b60008060408385031215611ec8578182fd5b823567ffffffffffffffff80821115611edf578384fd5b818501915085601f830112611ef2578384fd5b8135611f00611bc282612b0a565b81815260208082019190858101885b85811015611f3857611f268c8484358b0101611c6b565b85529382019390820190600101611f0f565b50919750880135945050505080821115611f50578283fd5b50611f5d85828601611ba4565b9150509250929050565b600060208284031215611f78578081fd5b5035919050565b60006020808385031215611f91578182fd5b825167ffffffffffffffff80821115611fa8578384fd5b9084019060a08287031215611fbb578384fd5b611fc560a0612ae3565b8251611fd081612ba7565b815282840151611fdf81612ba7565b808583015250604083015160408201526060830151606082015260808301518281111561200a578586fd5b80840193505086601f84011261201e578485fd5b8251915061202e611bc283612b0a565b82815284810190848601875b85811015612063576120518b8984518a0101611dde565b8452928701929087019060010161203a565b50506080830152509695505050505050565b600080600083850361022081121561208b578182fd5b6101808082121561209a578283fd5b6120a381612ae3565b91506120af8787611b99565b82526120be8760208801611b99565b60208301526120d08760408801611e7e565b60408301526120e28760608801611e7e565b60608301526120f48760808801611e7e565b60808301526121068760a08801611b99565b60a08301526121188760c08801611b99565b60c083015261212a8760e08801611b99565b60e083015261010061213e88828901611b99565b90830152610120868101519083015261014061215c88828901611e9e565b818401525061016080870151818401525081945061217c87828801611d85565b9350505061218e856102008601611e7e565b90509250925092565b6000602082840312156121a8578081fd5b813567ffffffffffffffff8111156121be578182fd5b6121ca84828501611c6b565b949350505050565b60008060a083850312156121e4578182fd5b823567ffffffffffffffff8111156121fa578283fd5b61220685828601611c6b565b9250506122168460208501611d2c565b90509250929050565b60008060008385036101e0811215612235578182fd5b61014080821215612244578283fd5b61224d81612ae3565b91506122598787611b99565b82526122688760208801611b99565b602083015261227a8760408801611e7e565b604083015261228c8760608801611e7e565b606083015261229e8760808801611b99565b60808301526122b08760a08801611b99565b60a08301526122c28760c08801611b99565b60c083015260e086015160e08301526101006122e088828901611e9e565b818401525061012080870151818401525081945061230087828801611d85565b9350505061218e856101c08601611e7e565b73ffffffffffffffffffffffffffffffffffffffff169052565b6000815180845260208085018081965082840281019150828601855b8581101561238c5782840389528151805163ffffffff16855285015160408686018190526123788187018361239f565b9a87019a9550505090840190600101612348565b5091979650505050505050565b15159052565b600081518084526123b7816020860160208601612b77565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b8051600581106123f557fe5b825260208181015160ff169083015260408082015190830152606090810151910152565b6fffffffffffffffffffffffffffffffff169052565b67ffffffffffffffff169052565b6000825161244f818460208701612b77565b9190910192915050565b7f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b6000602080830181845280855180835260408601915060408482028701019250838701855b82811015612500577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08886030184526124ee85835161239f565b945092850192908501906001016124b4565b5092979650505050505050565b90815260200190565b92835273ffffffffffffffffffffffffffffffffffffffff918216602084015216604082015260600190565b9a8b5273ffffffffffffffffffffffffffffffffffffffff998a1660208c015297891660408b015260608a0196909652608089019490945260a088019290925260c087015260e08601526101008501529091166101208301526101408201526101600190565b9182527fffffffff0000000000000000000000000000000000000000000000000000000016602082015260400190565b6000848252606060208301526125f1606083018561239f565b828103604084015261125a818561239f565b918252602082015260400190565b9283526020830191909152604082015260600190565b93845260208401929092526040830152606082015260800190565b93845260ff9290921660208401526040830152606082015260800190565b7fffffffff0000000000000000000000000000000000000000000000000000000091909116815260200190565b7fffffffff0000000000000000000000000000000000000000000000000000000092909216825273ffffffffffffffffffffffffffffffffffffffff16602082015260400190565b7fffffffff00000000000000000000000000000000000000000000000000000000929092168252602082015260400190565b600060208252610a3c602083018461239f565b606081016008851061272857fe5b938152602081019290925260409091015290565b6040810161274984612b6c565b82528260208301529392505050565b600061276386612b6c565b825284602083015273ffffffffffffffffffffffffffffffffffffffff841660408301526080606083015261125a608083018461239f565b6020808252818101527f4d6574615472616e73616374696f6e73466561747572652f4554485f4c45414b604082015260600190565b60208082526024908201527f466978696e546f6b656e5370656e6465722f43414e4e4f545f494e564f4b455f60408201527f53454c4600000000000000000000000000000000000000000000000000000000606082015260800190565b600061026082019050612841828851612312565b60208701516128536020840182612312565b5060408701516128666040840182612419565b5060608701516128796060840182612419565b50608087015161288c6080840182612419565b5060a087015161289f60a0840182612312565b5060c08701516128b260c0840182612312565b5060e08701516128c560e0840182612312565b50610100808801516128d982850182612312565b50506101208781015190830152610140808801516128f98285018261242f565b505061016087810151908301526129146101808301876123e9565b612922610200830186612419565b612930610220830185612312565b61125a610240830184612312565b600061024082019050612952828951612312565b60208801516129646020840182612312565b5060408801516129776040840182612419565b50606088015161298a6060840182612419565b50608088015161299d6080840182612312565b5060a08801516129b060a0840182612312565b5060c08801516129c360c0840182612312565b5060e088015160e0830152610100808901516129e18285018261242f565b505061012088810151908301526129fc6101408301886123e9565b612a0a6101c0830187612419565b612a186101e0830186612312565b612a26610200830185612399565b612a34610220830184612312565b979650505050505050565b60006020825273ffffffffffffffffffffffffffffffffffffffff808451166020840152806020850151166040840152506040830151612a826060840182612312565b5060608301516080830152608083015160a083015260a08301516101008060c0850152612ab361012085018361232c565b915060c0850151612ac760e0860182612399565b5060e0850151612ad982860182612312565b5090949350505050565b60405181810167ffffffffffffffff81118282101715612b0257600080fd5b604052919050565b600067ffffffffffffffff821115612b20578081fd5b5060209081020190565b600067ffffffffffffffff821115612b40578081fd5b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b806006811061035857fe5b60005b83811015612b92578181015183820152602001612b7a565b83811115612ba1576000848401525b50505050565b73ffffffffffffffffffffffffffffffffffffffff81168114610e0957600080fd5b60058110610e0957600080fd5b60ff81168114610e0957600080fdfea2646970667358221220773355a4b54d0f1474dd5ee26193a504afee607c349b6ab16e8ecfd77daf504064736f6c634300060c0033",
  "deployedBytecode": "0x6080604052600436106100b15760003560e01c80638fd3ab8011610069578063c5579ec81161004e578063c5579ec814610198578063d036092d146101b8578063dab400f3146101cd576100b1565b80638fd3ab8014610156578063ae55049714610178576100b1565b80633fb2da381161009a5780633fb2da38146101015780636ae4b4f71461012157806372d17d0314610136576100b1565b8063031b905c146100b65780633d61ed3e146100e1575b600080fd5b3480156100c257600080fd5b506100cb6101e2565b6040516100d8919061250d565b60405180910390f35b6100f46100ef3660046121d2565b610206565b6040516100d89190612707565b34801561010d57600080fd5b506100cb61011c366004612197565b610347565b34801561012d57600080fd5b506100f461035d565b34801561014257600080fd5b506100cb610151366004611f67565b610396565b34801561016257600080fd5b5061016b6103b1565b6040516100d89190612660565b34801561018457600080fd5b506100cb610193366004612197565b6104a5565b6101ab6101a6366004611eb6565b61053b565b6040516100d8919061248f565b3480156101c457600080fd5b506100cb6106b9565b3480156101d957600080fd5b506100cb6106dd565b7f000000000000000000000000000000000000000000000000000000000000000081565b606060016000610214610701565b8054909150828116156102765761027661027161026b600080368080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092939250506107149050565b85610760565b61081b565b82178155344703610285611976565b33815260408101879052610298876104a5565b6020820152606081018690526102ad81610823565b94505060006102bc3447610a2b565b905080156102f357604051339082156108fc029083906000818181858888f193505050501580156102f1573d6000803e3d6000fd5b505b5047811115610337576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161032e9061279b565b60405180910390fd5b5080549119909116905592915050565b6000610355610151836104a5565b90505b919050565b6040518060400160405280601081526020017f4d6574615472616e73616374696f6e730000000000000000000000000000000081525081565b60006103a0610a43565b600092835260205250604090205490565b60006103dc7f3d61ed3e00000000000000000000000000000000000000000000000000000000610a50565b6104057fc5579ec800000000000000000000000000000000000000000000000000000000610a50565b61042e7f3fb2da3800000000000000000000000000000000000000000000000000000000610a50565b6104577f72d17d0300000000000000000000000000000000000000000000000000000000610a50565b6104807fae55049700000000000000000000000000000000000000000000000000000000610a50565b507f2c64c5ef0000000000000000000000000000000000000000000000000000000090565b60006103557f0000000000000000000000000000000000000000000000000000000000000000836000015184602001518560400151866060015187608001518860a001518960c00151805190602001208a60e001518b61010001518c61012001516040516020016105209b9a99989796959493929190612542565b60405160208183030381529060405280519060200120610ae3565b606060016000610549610701565b8054909150828116156105a0576105a061027161026b600080368080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092939250506107149050565b821781558351855134470391146105c0576105c061027187518751610b35565b855167ffffffffffffffff811180156105d857600080fd5b5060405190808252806020026020018201604052801561060c57816020015b60608152602001906001900390816105f75790505b50935060005b86518110156106ac57610623611976565b338152875188908390811061063457fe5b6020026020010151816040018190525061066088838151811061065357fe5b60200260200101516104a5565b6020820152865187908390811061067357fe5b6020026020010151816060018190525061068c81610823565b86838151811061069857fe5b602090810291909101015250600101610612565b5060006102bc3447610a2b565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008061070e6006610b6b565b92915050565b60008160040183511015610735576107356102716003855185600401610b86565b5001602001517fffffffff000000000000000000000000000000000000000000000000000000001690565b60607fc7a7103e21e41a5c3158b3028d34cb9bb9593b10b1892f49d7187efa71219d4e83836040516024016107969291906126d5565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152905092915050565b805160208201fd5b606061082e82610c2b565b43610837610a43565b60208085015160009081529190526040908190209190915582015161012001511561087c576040820151610100810151815184516101209093015161087c9390610e0c565b604082015160c00151610890906000610714565b7fffffffff0000000000000000000000000000000000000000000000000000000016608083018190527f415565b00000000000000000000000000000000000000000000000000000000014156108f0576108e982610f0b565b90506109b3565b60808201517fffffffff00000000000000000000000000000000000000000000000000000000167ff6274f66000000000000000000000000000000000000000000000000000000001415610947576108e982611140565b60808201517fffffffff00000000000000000000000000000000000000000000000000000000167faa77476c00000000000000000000000000000000000000000000000000000000141561099e576108e982611264565b6109b3610271836020015184608001516112f7565b81608001517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167f7f4fe3ff8ae440e1570c558da08440b26f89fb1c1f2910cd91ca6452955f121a8360200151846040015160000151856040015160200151604051610a1e93929190612516565b60405180910390a2919050565b6000818310610a3a5781610a3c565b825b9392505050565b60008061070e6005610b6b565b6040517f6eb224cb0000000000000000000000000000000000000000000000000000000081523090636eb224cb90610aae9084907f00000000000000000000000000000000000000000000000000000000000000009060040161268d565b600060405180830381600087803b158015610ac857600080fd5b505af1158015610adc573d6000803e3d6000fd5b5050505050565b60007f000000000000000000000000000000000000000000000000000000000000000082604051602001610b18929190612459565b604051602081830303815290604052805190602001209050919050565b60607f52974c3a86e985173f72e2fb84ba2bfca8fb3b7c5031eb8077ebd59458abf2a48383604051602401610796929190612603565b6000608082600a811115610b7b57fe5b600101901b92915050565b6060632800659560e01b848484604051602401610ba59392919061271a565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915290509392505050565b60408101516020015173ffffffffffffffffffffffffffffffffffffffff1615801590610c905750806000015173ffffffffffffffffffffffffffffffffffffffff1681604001516020015173ffffffffffffffffffffffffffffffffffffffff1614155b15610cb357610cb36102718260200151836000015184604001516020015161132d565b4281604001516080015111610cdc57610cdc610271826020015142846040015160800151611365565b3a8160400151604001511180610cf957503a816040015160600151105b15610d2157610d2161027182602001513a84604001516040015185604001516060015161139d565b4760a08201819052604082015160e001511115610d5657610d5661027182602001518360a00151846040015160e0015161145e565b80604001516000015173ffffffffffffffffffffffffffffffffffffffff16610d8782602001518360600151611496565b73ffffffffffffffffffffffffffffffffffffffff1614610dcd57610dcd61027160048360200151846040015160000151604051806020016040528060008152506115e7565b610dd5610a43565b6020808301516000908152919052604090205460c0820181905215610e0957610e0961027182602001518360c00151611621565b50565b73ffffffffffffffffffffffffffffffffffffffff8416301415610e5c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161032e906127d0565b6040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416600482015273ffffffffffffffffffffffffffffffffffffffff83166024820152816044820152602081606483600073ffffffffffffffffffffffffffffffffffffffff8a165af13d60018351146020821015168115178216915081610f0257806000843e8083fd5b50505050505050565b6060610f156119bd565b604083015160c0015151606090601c0167ffffffffffffffff81118015610f3b57600080fd5b506040519080825280601f01601f191660200182016040528015610f66576020820181803683370190505b5090506060846040015160c00151905060a081511015610f8257fe5b602082810152805160248201906040840190610fc390829084907ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc01611657565b83806020019051810190610fd79190611f7f565b945050505050610a3c8360200151638aa6539b60e01b60405180610100016040528087604001516000015173ffffffffffffffffffffffffffffffffffffffff168152602001856000015173ffffffffffffffffffffffffffffffffffffffff168152602001856020015173ffffffffffffffffffffffffffffffffffffffff16815260200185604001518152602001856060015181526020018560800151815260200160001515815260200187604001516000015173ffffffffffffffffffffffffffffffffffffffff168152506040516024016110b69190612a3f565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909416939093179092529086015160e00151611738565b606061114a611a18565b611152611a7c565b60006060611167866040015160c001516117c4565b90508080602001905181019061117d9190612075565b60208901516040808b015151905194985092965090945061125a9290917f414e4ccf00000000000000000000000000000000000000000000000000000000916111d091899189918991339060240161282d565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909416939093179092529089015160e00151611738565b9695505050505050565b606061126e611aa5565b611276611a7c565b6000606061128b866040015160c001516117c4565b9050808060200190518101906112a1919061221f565b60208901516040808b015151905194985092965090945061125a9290917faa6b21cd00000000000000000000000000000000000000000000000000000000916111d091899189918991600090829060240161293e565b60607f547a32a328d8a78dbe9bf090fa60ba3d4d1c6833a592a2c942666ce3249c121083836040516024016107969291906125a8565b60607fa78002a166fcae5236d89e3ff35c53dadb775f7818de4a020714cba4bf360822848484604051602401610ba593929190612516565b60607fbea726efdf9868bbc5755dce9f13d585b3cf731177be75300d15bb8f5e286158848484604051602401610ba593929190612611565b60607f6fec11a99ebb0ff14b6648f609f57864dadeba8b29869c4df2b3b76894147849858585856040516024016113d79493929190612627565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091529050949350505050565b60607f0a5ade45208123132815e1591a1c7e64045fd006152f5e85d100aee42ba02c75848484604051602401610ba593929190612611565b60006114a28383611831565b6002825160048111156114b157fe5b141561151957600183836020015184604001518560600151604051600081526020016040526040516114e69493929190612642565b6020604051602081039080840390855afa158015611508573d6000803e3d6000fd5b5050506020604051035190506115be565b60038251600481111561152857fe5b14156115be5760007f19457468657265756d205369676e6564204d6573736167653a0a33320000000060005283601c52603c60002090506001818460200151856040015186606001516040516000815260200160405260405161158e9493929190612642565b6020604051602081039080840390855afa1580156115b0573d6000803e3d6000fd5b505050602060405103519150505b73ffffffffffffffffffffffffffffffffffffffff811661070e5761070e610271600585611908565b60607f4c7607a3ebba99c9acde0e2a04d88829f7001b63f028b796dda6ff02406ddad5858585856040516024016113d79493929190612758565b60607ffe251a07f3cbffd23c1c1db9ec776d259099c832333d99ef48cacfa93a4d7b328383604051602401610796929190612603565b602081101561169e578151835160208390036101000a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0180199092169116178352611733565b828214156116ab57611733565b828211156116e55760208103905080820181840181515b828510156116dd5784518652602095860195909401936116c2565b905250611733565b60208103905080820181840183515b8186121561172e57825182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe092830192909101906116f4565b855250505b505050565b606060003073ffffffffffffffffffffffffffffffffffffffff168385604051611762919061243d565b60006040518083038185875af1925050503d806000811461179f576040519150601f19603f3d011682016040523d82523d6000602084013e6117a4565b606091505b5092509050806117bc576117bc61027186868561193e565b509392505050565b6060600482510367ffffffffffffffff811180156117e157600080fd5b506040519080825280601f01601f19166020018201604052801561180c576020820181803683370190505b50905060008060248401915060208301905061182a81838551611657565b5050919050565b60408101517ffffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141111580611888575060608101517f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a111155b1561189b5761189b610271600584611908565b6000815160048111156118aa57fe5b14156118be576118be610271600384611908565b6001815160048111156118cd57fe5b14156118e1576118e1610271600084611908565b6004815160048111156118f057fe5b141561190457611904610271600284611908565b5050565b60607ff18f11f3027e735c758137924b262d4d3aff0037dcd785aca3c699fa05d960bd838360405160240161079692919061273c565b60607fa9f0c547643c02afed4cf2699e794bc383effca840eed62fddb64a15a4e55bc4848484604051602401610ba5939291906125d8565b6040805160e08101825260008082526020820152908101611995611af9565b81526020016119a2611a7c565b81526000602082018190526040820181905260609091015290565b6040518060a00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001606081525090565b6040805161018081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081018290526101208101829052610140810182905261016081019190915290565b604080516080810190915280600081526000602082018190526040820181905260609091015290565b6040805161014081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081019190915290565b604051806101400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600081526020016060815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b803561070e81612ba7565b805161070e81612ba7565b600082601f830112611bb4578081fd5b8135611bc7611bc282612b0a565b612ae3565b8181529150602080830190848101608080850287018301881015611bea57600080fd5b60005b85811015611c1157611bff8984611d2c565b85529383019391810191600101611bed565b50505050505092915050565b600082601f830112611c2d578081fd5b8135611c3b611bc282612b2a565b9150808252836020828501011115611c5257600080fd5b8060208401602084013760009082016020015292915050565b6000610140808385031215611c7e578182fd5b611c8781612ae3565b915050611c948383611b8e565b8152611ca38360208401611b8e565b602082015260408201356040820152606082013560608201526080820135608082015260a082013560a082015260c082013567ffffffffffffffff811115611cea57600080fd5b611cf684828501611c1d565b60c08301525060e082013560e0820152610100611d1584828501611b8e565b818301525061012080830135818301525092915050565b600060808284031215611d3d578081fd5b611d476080612ae3565b90508135611d5481612bc9565b81526020820135611d6481612bd6565b80602083015250604082013560408201526060820135606082015292915050565b600060808284031215611d96578081fd5b611da06080612ae3565b90508151611dad81612bc9565b81526020820151611dbd81612bd6565b80602083015250604082015160408201526060820151606082015292915050565b600060408284031215611def578081fd5b611df96040612ae3565b9050815163ffffffff81168114611e0f57600080fd5b8152602082015167ffffffffffffffff811115611e2b57600080fd5b8201601f81018413611e3c57600080fd5b8051611e4a611bc282612b2a565b818152856020838501011115611e5f57600080fd5b611e70826020830160208601612b77565b602084015250909392505050565b80516fffffffffffffffffffffffffffffffff8116811461070e57600080fd5b805167ffffffffffffffff8116811461070e57600080fd5b60008060408385031215611ec8578182fd5b823567ffffffffffffffff80821115611edf578384fd5b818501915085601f830112611ef2578384fd5b8135611f00611bc282612b0a565b81815260208082019190858101885b85811015611f3857611f268c8484358b0101611c6b565b85529382019390820190600101611f0f565b50919750880135945050505080821115611f50578283fd5b50611f5d85828601611ba4565b9150509250929050565b600060208284031215611f78578081fd5b5035919050565b60006020808385031215611f91578182fd5b825167ffffffffffffffff80821115611fa8578384fd5b9084019060a08287031215611fbb578384fd5b611fc560a0612ae3565b8251611fd081612ba7565b815282840151611fdf81612ba7565b808583015250604083015160408201526060830151606082015260808301518281111561200a578586fd5b80840193505086601f84011261201e578485fd5b8251915061202e611bc283612b0a565b82815284810190848601875b85811015612063576120518b8984518a0101611dde565b8452928701929087019060010161203a565b50506080830152509695505050505050565b600080600083850361022081121561208b578182fd5b6101808082121561209a578283fd5b6120a381612ae3565b91506120af8787611b99565b82526120be8760208801611b99565b60208301526120d08760408801611e7e565b60408301526120e28760608801611e7e565b60608301526120f48760808801611e7e565b60808301526121068760a08801611b99565b60a08301526121188760c08801611b99565b60c083015261212a8760e08801611b99565b60e083015261010061213e88828901611b99565b90830152610120868101519083015261014061215c88828901611e9e565b818401525061016080870151818401525081945061217c87828801611d85565b9350505061218e856102008601611e7e565b90509250925092565b6000602082840312156121a8578081fd5b813567ffffffffffffffff8111156121be578182fd5b6121ca84828501611c6b565b949350505050565b60008060a083850312156121e4578182fd5b823567ffffffffffffffff8111156121fa578283fd5b61220685828601611c6b565b9250506122168460208501611d2c565b90509250929050565b60008060008385036101e0811215612235578182fd5b61014080821215612244578283fd5b61224d81612ae3565b91506122598787611b99565b82526122688760208801611b99565b602083015261227a8760408801611e7e565b604083015261228c8760608801611e7e565b606083015261229e8760808801611b99565b60808301526122b08760a08801611b99565b60a08301526122c28760c08801611b99565b60c083015260e086015160e08301526101006122e088828901611e9e565b818401525061012080870151818401525081945061230087828801611d85565b9350505061218e856101c08601611e7e565b73ffffffffffffffffffffffffffffffffffffffff169052565b6000815180845260208085018081965082840281019150828601855b8581101561238c5782840389528151805163ffffffff16855285015160408686018190526123788187018361239f565b9a87019a9550505090840190600101612348565b5091979650505050505050565b15159052565b600081518084526123b7816020860160208601612b77565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b8051600581106123f557fe5b825260208181015160ff169083015260408082015190830152606090810151910152565b6fffffffffffffffffffffffffffffffff169052565b67ffffffffffffffff169052565b6000825161244f818460208701612b77565b9190910192915050565b7f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b6000602080830181845280855180835260408601915060408482028701019250838701855b82811015612500577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08886030184526124ee85835161239f565b945092850192908501906001016124b4565b5092979650505050505050565b90815260200190565b92835273ffffffffffffffffffffffffffffffffffffffff918216602084015216604082015260600190565b9a8b5273ffffffffffffffffffffffffffffffffffffffff998a1660208c015297891660408b015260608a0196909652608089019490945260a088019290925260c087015260e08601526101008501529091166101208301526101408201526101600190565b9182527fffffffff0000000000000000000000000000000000000000000000000000000016602082015260400190565b6000848252606060208301526125f1606083018561239f565b828103604084015261125a818561239f565b918252602082015260400190565b9283526020830191909152604082015260600190565b93845260208401929092526040830152606082015260800190565b93845260ff9290921660208401526040830152606082015260800190565b7fffffffff0000000000000000000000000000000000000000000000000000000091909116815260200190565b7fffffffff0000000000000000000000000000000000000000000000000000000092909216825273ffffffffffffffffffffffffffffffffffffffff16602082015260400190565b7fffffffff00000000000000000000000000000000000000000000000000000000929092168252602082015260400190565b600060208252610a3c602083018461239f565b606081016008851061272857fe5b938152602081019290925260409091015290565b6040810161274984612b6c565b82528260208301529392505050565b600061276386612b6c565b825284602083015273ffffffffffffffffffffffffffffffffffffffff841660408301526080606083015261125a608083018461239f565b6020808252818101527f4d6574615472616e73616374696f6e73466561747572652f4554485f4c45414b604082015260600190565b60208082526024908201527f466978696e546f6b656e5370656e6465722f43414e4e4f545f494e564f4b455f60408201527f53454c4600000000000000000000000000000000000000000000000000000000606082015260800190565b600061026082019050612841828851612312565b60208701516128536020840182612312565b5060408701516128666040840182612419565b5060608701516128796060840182612419565b50608087015161288c6080840182612419565b5060a087015161289f60a0840182612312565b5060c08701516128b260c0840182612312565b5060e08701516128c560e0840182612312565b50610100808801516128d982850182612312565b50506101208781015190830152610140808801516128f98285018261242f565b505061016087810151908301526129146101808301876123e9565b612922610200830186612419565b612930610220830185612312565b61125a610240830184612312565b600061024082019050612952828951612312565b60208801516129646020840182612312565b5060408801516129776040840182612419565b50606088015161298a6060840182612419565b50608088015161299d6080840182612312565b5060a08801516129b060a0840182612312565b5060c08801516129c360c0840182612312565b5060e088015160e0830152610100808901516129e18285018261242f565b505061012088810151908301526129fc6101408301886123e9565b612a0a6101c0830187612419565b612a186101e0830186612312565b612a26610200830185612399565b612a34610220830184612312565b979650505050505050565b60006020825273ffffffffffffffffffffffffffffffffffffffff808451166020840152806020850151166040840152506040830151612a826060840182612312565b5060608301516080830152608083015160a083015260a08301516101008060c0850152612ab361012085018361232c565b915060c0850151612ac760e0860182612399565b5060e0850151612ad982860182612312565b5090949350505050565b60405181810167ffffffffffffffff81118282101715612b0257600080fd5b604052919050565b600067ffffffffffffffff821115612b20578081fd5b5060209081020190565b600067ffffffffffffffff821115612b40578081fd5b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b806006811061035857fe5b60005b83811015612b92578181015183820152602001612b7a565b83811115612ba1576000848401525b50505050565b73ffffffffffffffffffffffffffffffffffffffff81168114610e0957600080fd5b60058110610e0957600080fd5b60ff81168114610e0957600080fdfea2646970667358221220773355a4b54d0f1474dd5ee26193a504afee607c349b6ab16e8ecfd77daf504064736f6c634300060c0033",
  "devdoc": {
    "details": "MetaTransactions feature.",
    "kind": "dev",
    "methods": {
      "batchExecuteMetaTransactions((address,address,uint256,uint256,uint256,uint256,bytes,uint256,address,uint256)[],(uint8,uint8,bytes32,bytes32)[])": {
        "details": "Execute multiple meta-transactions.",
        "params": {
          "mtxs": "The meta-transactions.",
          "signatures": "The signature by each respective `mtx.signer`."
        },
        "returns": {
          "returnResults": "The ABI-encoded results of the underlying calls."
        }
      },
      "executeMetaTransaction((address,address,uint256,uint256,uint256,uint256,bytes,uint256,address,uint256),(uint8,uint8,bytes32,bytes32))": {
        "details": "Execute a single meta-transaction.",
        "params": {
          "mtx": "The meta-transaction.",
          "signature": "The signature by `mtx.signer`."
        },
        "returns": {
          "returnResult": "The ABI-encoded result of the underlying call."
        }
      },
      "getMetaTransactionExecutedBlock((address,address,uint256,uint256,uint256,uint256,bytes,uint256,address,uint256))": {
        "details": "Get the block at which a meta-transaction has been executed.",
        "params": {
          "mtx": "The meta-transaction."
        },
        "returns": {
          "blockNumber": "The block height when the meta-transactioin was executed."
        }
      },
      "getMetaTransactionHash((address,address,uint256,uint256,uint256,uint256,bytes,uint256,address,uint256))": {
        "details": "Get the EIP712 hash of a meta-transaction.",
        "params": {
          "mtx": "The meta-transaction."
        },
        "returns": {
          "mtxHash": "The EIP712 hash of `mtx`."
        }
      },
      "getMetaTransactionHashExecutedBlock(bytes32)": {
        "details": "Get the block at which a meta-transaction hash has been executed.",
        "params": {
          "mtxHash": "The meta-transaction hash."
        },
        "returns": {
          "blockNumber": "The block height when the meta-transactioin was executed."
        }
      },
      "migrate()": {
        "details": "Initialize and register this feature.      Should be delegatecalled by `Migrate.migrate()`.",
        "returns": {
          "success": "`LibMigrate.SUCCESS` on success."
        }
      }
    },
    "stateVariables": {
      "FEATURE_NAME": {
        "details": "Name of this feature."
      },
      "FEATURE_VERSION": {
        "details": "Version of this feature."
      },
      "MTX_EIP712_TYPEHASH": {
        "details": "EIP712 typehash of the `MetaTransactionData` struct."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}